[ClassData]-- 
$[_global]:
.size:0

 [ULang:Test]|Color1[] -> bool;//ULang:Tests:Color1
 [ULang:Test]|Color2[] -> bool;//ULang:Tests:Color2
 [ULang:Test]|Print1[] -> bool;//ULang:Tests:Print1
 [ULang:Test]|Print2[] -> bool;//ULang:Tests:Print2
 [ULang:Test]|Max_1[] -> bool;//ULang:Tests:Max_1
 [ULang:Test]|Max_2[] -> bool;//ULang:Tests:Max_2
 [ULang:Test]|Min_1[] -> bool;//ULang:Tests:Min_1
 [ULang:Test]|Min_2[] -> bool;//ULang:Tests:Min_2
 [ULang:Test]|Ptr_1[] -> bool;//ULang:Tests:Ptr_1
 [ULang:Test]|Ptr_2[] -> bool;//ULang:Tests:Ptr_2
 [ULang:Test]|Ptr_3[] -> bool;//ULang:Tests:Ptr_3
 [ULang:Test]|Ptr_4[] -> bool;//ULang:Tests:Ptr_4
 [ULang:Test]|Ptr_5[] -> bool;//ULang:Tests:Ptr_5
 [ULang:Test]|StringSpan_1[] -> bool;//ULang:Tests:StringSpan_1
 [ULang:Test]|StringSpan_2[] -> bool;//ULang:Tests:StringSpan_2
 [ULang:Test]|StringSpan_3[] -> bool;//ULang:Tests:StringSpan_3
 [ULang:Test]|StringSpan_4[] -> bool;//ULang:Tests:StringSpan_4
 [ULang:Test]|StringSpan_5[] -> bool;//ULang:Tests:StringSpan_5
 [ULang:Test]|Unique_ptr_1[] -> bool;//ULang:Tests:Unique_ptr_1
 [ULang:Test]|Unique_ptr_2[] -> void;//ULang:Tests:Unique_ptr_2
 [ULang:Test]|Unique_ptr_3[] -> void;//ULang:Tests:Unique_ptr_3
 [ULang:Test]|Unique_ptr_4[] -> void;//ULang:Tests:Unique_ptr_4
 [ULang:Test]|Unique_ptr_5[] -> void;//ULang:Tests:Unique_ptr_5
 [ULang:Test]|Vector_1[] -> bool;//ULang:Tests:Vector_1
 |Vector_2[] -> bool;//ULang:Tests:Vector_2
 |ptr<sint32>[sint32&] -> ULang:Ptr<sint32>;//ULang:ptr<sint32>^i32&
 |ptr<ULang:Vec2f_t<float32>>[ULang:Vec2f_t<float32>&] -> ULang:Ptr<ULang:Vec2f_t<float32>>;//ULang:ptr<ULang:Vec2f_t<float32>>^ULang:Vec2f_t<float32>&
 |Range<uintptr>[uIntPtr, uIntPtr] -> ULang:Range_t<uintptr>;//ULang:Range<uintptr>^uptr,uptr


$[_global]:
.size:0

 |OS_PrintChar[char] -> void;//ULang:Native:OS_PrintChar^c
 |OS_PrintSpan[imut char[&], uIntPtr] -> void;//ULang:Native:OS_PrintSpan^c[&]imut,uptr
 |OS_PrintClear[] -> void;//ULang:Native:OS_PrintClear
 |OS_Malloc[uIntPtr] -> void;//ULang:Native:OS_Malloc^uptr
 |OS_Free[uint8[&]] -> void;//ULang:Native:OS_Free^u8[&]
 |__Log[imut char[&]] -> void;//__Log^c[&]imut
 |__LogChar[char] -> void;//__LogChar^c
 |__LogBuffer[imut char[&], uIntPtr] -> void;//__LogBuffer^c[&]imut,uptr
 |__ReadChar[] -> char;//__ReadChar
 |__Malloc[uIntPtr] -> uint8[&];//__Malloc^uptr
 |__Free[uint8[&]] -> void;//__Free^u8[&]
 |__OpenFile[char[&], uIntPtr] -> uIntPtr;//__OpenFile^c[&],uptr
 |__CloseFile[uIntPtr] -> void;//__CloseFile^uptr
 |__IsFileOpen[uIntPtr] -> void;//__IsFileOpen^uptr


$ULang:Native:PathChar = char;

$FilePathChar = char;

$FileHandle = uIntPtr;

$Socket = uIntPtr;

$ULang:ColorRGB:
.size:12
 float32 R;//Offset 0
 float32 G;//Offset 4
 float32 B;//Offset 8

 |(&_new&)[this&] -> void;//ULang:ColorRGB:(&_new&)^ULang:ColorRGB&
 |(&_new&)[this&, float32, float32, float32] -> void;//ULang:ColorRGB:(&_new&)^ULang:ColorRGB&,f32,f32,f32
 |(&equal&)[this&, imut ULang:ColorRGB&] -> bool;//ULang:ColorRGB:(&equal&)^ULang:ColorRGB&,ULang:ColorRGB&imut
 |(&notequal&)[this&, imut ULang:ColorRGB&] -> bool;//ULang:ColorRGB:(&notequal&)^ULang:ColorRGB&,ULang:ColorRGB&imut
 |(&Cast&)[umut this&] -> ULang:Color24;//ULang:ColorRGB:(&Cast&)^ULang:ColorRGB&imut


$ULang:Color:
.size:16
 float32 R;//Offset 0
 float32 G;//Offset 4
 float32 B;//Offset 8
 float32 A;//Offset 12

 |(&_new&)[this&] -> void;//ULang:Color:(&_new&)^ULang:Color&
 |(&_new&)[this&, float32, float32, float32, float32] -> void;//ULang:Color:(&_new&)^ULang:Color&,f32,f32,f32,f32
 |(&_new&)[this&, imut ULang:ColorRGB&, float32] -> void;//ULang:Color:(&_new&)^ULang:Color&,ULang:ColorRGB&imut,f32
 |WithOutOpacity[this&] -> ULang:ColorRGB;//ULang:Color:WithOutOpacity^ULang:Color&
 |(&equal&)[this&, imut ULang:Color&] -> bool;//ULang:Color:(&equal&)^ULang:Color&,ULang:Color&imut
 |(&notequal&)[this&, imut ULang:Color&] -> bool;//ULang:Color:(&notequal&)^ULang:Color&,ULang:Color&imut
 |(&Cast&)[umut this&] -> ULang:Color32;//ULang:Color:(&Cast&)^ULang:Color&imut


$ULang:Color24:
.size:3
 uint8 R;//Offset 0
 uint8 G;//Offset 1
 uint8 B;//Offset 2

 |(&_new&)[this&] -> void;//ULang:Color24:(&_new&)^ULang:Color24&
 |(&_new&)[this&, uint8, uint8, uint8] -> void;//ULang:Color24:(&_new&)^ULang:Color24&,u8,u8,u8
 |(&equal&)[this&, imut ULang:Color24&] -> bool;//ULang:Color24:(&equal&)^ULang:Color24&,ULang:Color24&imut
 |(&notequal&)[this&, imut ULang:Color24&] -> bool;//ULang:Color24:(&notequal&)^ULang:Color24&,ULang:Color24&imut
 |(&Cast&)[umut this&] -> ULang:ColorRGB;//ULang:Color24:(&Cast&)^ULang:Color24&imut


$ULang:Color32:
.size:4
 uint8 R;//Offset 0
 uint8 G;//Offset 1
 uint8 B;//Offset 2
 uint8 A;//Offset 3

 |(&_new&)[this&] -> void;//ULang:Color32:(&_new&)^ULang:Color32&
 |(&_new&)[this&, uint8, uint8, uint8, uint8] -> void;//ULang:Color32:(&_new&)^ULang:Color32&,u8,u8,u8,u8
 |(&_new&)[this&, imut ULang:Color24&, uint8] -> void;//ULang:Color32:(&_new&)^ULang:Color32&,ULang:Color24&imut,u8
 |WithOutOpacity[this&] -> ULang:Color24;//ULang:Color32:WithOutOpacity^ULang:Color32&
 |(&equal&)[this&, imut ULang:Color32&] -> bool;//ULang:Color32:(&equal&)^ULang:Color32&,ULang:Color32&imut
 |(&notequal&)[this&, imut ULang:Color32&] -> bool;//ULang:Color32:(&notequal&)^ULang:Color32&,ULang:Color32&imut
 |(&Cast&)[umut this&] -> ULang:Color;//ULang:Color32:(&Cast&)^ULang:Color32&imut


---

$Mat4x4_t<T>:
 //$V = T[/4];//the parser cant do T[/4][/4]
 //V[/4] base;



---
$ULang:Mat4 = ULang:Mat4x4_t<float32>;

---

$Bound<T>;

---
$ULang:Compiler:
.size:0

 |Is64Bit[] -> bool;//ULang:Compiler:Is64Bit
 |Is32Bit[] -> bool;//ULang:Compiler:Is32Bit
 |IsBackendC89[] -> bool;//ULang:Compiler:IsBackendC89
 |IsBackendUCodeVM[] -> bool;//ULang:Compiler:IsBackendUCodeVM
 |IsBackendWasm[] -> bool;//ULang:Compiler:IsBackendWasm
 |IsBackendVM[] -> bool;//ULang:Compiler:IsBackendVM
 |(&_new&)[ULang:Compiler&] -> void;//ULang:Compiler:(&_new&)^ULang:Compiler&


$ULang:Empty:
.size:0

 |(&_new&)[ULang:Empty&] -> void;//ULang:Empty:(&_new&)^ULang:Empty&


---

$IPar<T> = imut T&;


---
$ULang:LowLevel:
.size:0

 |Malloc[uIntPtr] -> void;//ULang:LowLevel:Malloc^uptr
 |Free[uint8[&]] -> void;//ULang:LowLevel:Free^u8[&]
 |Memcopy[uint8[&], uint8[&], uIntPtr] -> void;//ULang:LowLevel:Memcopy^u8[&],u8[&],uptr
 |Memmove[uint8[&], uint8[&], uIntPtr] -> void;//ULang:LowLevel:Memmove^u8[&],u8[&],uptr
 |(&_new&)[ULang:LowLevel&] -> void;//ULang:LowLevel:(&_new&)^ULang:LowLevel&


$ULang:Math:
.size:0

 |(&_new&)[ULang:Math&] -> void;//ULang:Math:(&_new&)^ULang:Math&
 |Max<sint32>[sint32, sint32] -> sint32;//ULang:Math:Max<sint32>^i32,i32
 |Min<sint32>[sint32, sint32] -> sint32;//ULang:Math:Min<sint32>^i32,i32


---

|PI<T>[] => 3.14;
 ---
---

|Max<T>[T A,T B]:
  if A > B:ret A;
  ret B;

 
 ---
---

|Min<T>[T A,T B]:
  if A < B:ret A;
  ret B;
 
 
 ---
---

|Pow<T>[T val,T power] => val;
 ---
---

|Lerp<T>[T start,T end,T time]:
  ret start + (end - start) * time;
 ---
---

|Swap<T>[T& A,T& B] -> void:
 T C = move A;
 A = move B;
 B = move C;
 ---
$ULang:Test tag:
$ULang:Fmt:
.size:0

 |Print[char] -> void;//ULang:Fmt:Print^c
 |Print[imut ULang:StringSpan_t<char>] -> void;//ULang:Fmt:Print^ULang:StringSpan_t<char>imut
 |Print[imut ULang:String_t<char>&] -> void;//ULang:Fmt:Print^ULang:String_t<char>&imut
 |Println[char] -> void;//ULang:Fmt:Println^c
 |Println[imut ULang:StringSpan_t<char>] -> void;//ULang:Fmt:Println^ULang:StringSpan_t<char>imut
 |Println[imut ULang:String_t<char>&] -> void;//ULang:Fmt:Println^ULang:String_t<char>&imut
 |(&_new&)[ULang:Fmt&] -> void;//ULang:Fmt:(&_new&)^ULang:Fmt&


$ULang:Debug trait:
$ULang:OpenedFile:
.size:0

 |(&_new&)[ULang:OpenedFile&] -> void;//ULang:OpenedFile:(&_new&)^ULang:OpenedFile&


$ULang:OpenFileError:
.size:0

 |(&_new&)[ULang:OpenFileError&] -> void;//ULang:OpenFileError:(&_new&)^ULang:OpenFileError&


$ULang:File:
.size:0

 |Open[ULang:StringSpan_t<char>] -> ULang:Result<ULang:OpenedFile,ULang:OpenFileError>;//ULang:File:Open^ULang:StringSpan_t<char>
 |Open[imut ULang:String_t<char>&] -> ULang:Result<ULang:OpenedFile,ULang:OpenFileError>;//ULang:File:Open^ULang:String_t<char>&imut
 |GetString[ULang:StringSpan_t<char>] -> ULang:Result<ULang:String_t<char>,ULang:OpenFileError>;//ULang:File:GetString^ULang:StringSpan_t<char>
 |GetString[imut ULang:String_t<char>&] -> ULang:Result<ULang:String_t<char>,ULang:OpenFileError>;//ULang:File:GetString^ULang:String_t<char>&imut
 |GetBytes[ULang:StringSpan_t<char>] -> ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>;//ULang:File:GetBytes^ULang:StringSpan_t<char>
 |GetBytes[imut ULang:String_t<char>&] -> ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>;//ULang:File:GetBytes^ULang:String_t<char>&imut
 |(&_new&)[ULang:File&] -> void;//ULang:File:(&_new&)^ULang:File&


$ULang:Writer:
.size:0

 |(&_new&)[ULang:Writer&] -> void;//ULang:Writer:(&_new&)^ULang:Writer&


---

$Atomic<T> = T;


---
---

$AtomicShared_ptr<T>;

---
$ULang:Future:
.size:0

 |(&_new&)[ULang:Future&] -> void;//ULang:Future:(&_new&)^ULang:Future&


---

$Mutex<T>;

---
$ULang:Thread:
.size:0

 |(&_new&)[ULang:Thread&] -> void;//ULang:Thread:(&_new&)^ULang:Thread&


---

$Array<T,(Size)>;

---
---

$Map<K,T>:
 $Hash = uintptr;
 public: 
  int a =0;
 private:
  |Add[K key,T value]:


---
---

$Optional<T> enum:
 Opt[T Value],
 NoOpt,

---
$ULang:PathChar = char;

$ULang:PathString = ULang:String_t<char>;

$ULang:PathSpan = ULang:StringSpan_t<char>;

$ULang:Path:
.size:0

 |(&_new&)[ULang:Path&] -> void;//ULang:Path:(&_new&)^ULang:Path&


---

|iptr<T>[imut T& V] => Ptr<T>::Make(V);
 ---
---

|ptr<T>[T& V] => Ptr<T>::Make(V);
 ---
---

$Ptr<T>:
 private: 
  T& _base;
 public:
  |new[this&,T& base]:
   _base =: base;
  
  |Get[this&] -> T&:ret _base;
  |Get[imut this&] -> imut T&:ret _base;
  
  |Write[this&,imut T& newvalue] -> void:Get() = newvalue;
  |Write[this&,moved T newvalue] -> void:Get() = newvalue;

  |ReadPtr[imut this&] -> imut T&:ret Get();

  |~>[this&] -> T&:ret Get();

  |~>[imut this&] -> imut T&:ret Get();

  |ReassignTo[this&,T& newbase]:_base =: newbase;



  |Make[imut T& V] -> imut this:ret [unsafe bitcast<T&>(bitcast<uintptr>(V))];
  |Make[T& V] -> this:ret [V];





---
$ULang:VoidPtr = ULang:Ptr<ULang:Empty>;

---

$Range_t<T>:
 private:
  T _start;
  T _end;
 public:
  |new[this&]:
   _start = [];
   _end = [];
  |new[this&,T start,T end]:
   _start = start;
   _end = end;

  |Start[imut this&] => _start;
  |End[imut this&] => _end;



---
---

$RangeInclusive_t<T>:
 private: 
  T _start;
  T _end;
 public:
  |new[this&,T Start,T End]:
   _start = Start;
   _end = End;

  |Start[imut this&] => _start;
  |End[imut this&] => _end;




---
---

$RangeFull_t<T>;

---
---

$RangeTo_t<T>;

---
---

$RangeFrom_t<T>;

---
---

|Range<T>[T start,T end] -> Range_t<T>:
 ret [start,end];


 ---
---

|RangeInclusive<T>[T start,T end]  -> RangeInclusive_t<T>:
 ret [start,end];
 ---
---

$Result<T,E> enum:
 Val[T val],
 Err[E err],

---
---

$Shared_ptr<T>;

---
---

$Span<T>:
 private:
  T[&] _data;
  uintptr _size;
 public:
  |new[this&]:
   _data = unsafe bitcast<T[&]>(0);
   _size = 0;

  unsafe |new[this&,T[&] data,uintptr size]:
   _data = data;
   _size = size;
  |Size[imut this&] => _size;
  unsafe |Data[this&] => _data;
  unsafe |iData[imut this&] => _data;
  

  |[][this&,uintptr Index] -> T&:ret _data[Index];
  |[][imut this&,uintptr Index] -> imut T&:ret _data[Index];

  |[][this&,Range_t<uintptr> Range] -> this:ret unsafe [_data[Range.Start()],Range.End() - Range.Start()];
  |[][imut this&,Range_t<uintptr> Range] -> this:ret unsafe [_data[Range.Start()],Range.End() - Range.Start()];


---
---

$StringSpan_t<T>:
 private:
  T[&] _data;
  uintptr _size;
 public: 
  //$MyString = String_t<T>;
  $MySpan = Span<T>;
  
  |new[this&]:
   _data = unsafe bitcast<T[&]>(0);
   _size = 0;
 
  unsafe |new[this&,T[&] data,uintptr size]:
   _data = data;
   _size = size;

  |Size[imut this&] => _size;
  unsafe |iData[imut this&] -> imut T[&]:ret _data;
  unsafe |Data[this&] -> T[&]:ret _data; 

  |==[imut this&,imut this& Other] -> bool:
   if this.Size() != Other.Size():ret false;

   for [uintptr i = 0;i < this.Size();i++]:

    if this[i] != Other[i]:ret false;

   ret true;

  |!=[imut this&,imut this& Other] => !(this == Other);

  |AsSpan[this&] -> T[:]:ret unsafe [_data,_size];
  |iAsSpan[imut this&] -> imut T[:]:ret unsafe [_data,_size];

  
  |ToStr[MySpan& span] -> this: ret unsafe [span.Data(),span.Size()];
  |ToStr[imut MySpan& span] -> this:ret unsafe [span.Data(),span.Size()];

  |[][this&,uintptr Index] -> T&:ret _data[Index];
  |[][imut this&,uintptr Index] -> imut T&:ret _data[Index];

  |[][this&,Range_t<uintptr> Range] -> this:ret ToStr(AsSpan()[Range]);
  |[][imut this&,Range_t<uintptr> Range] -> this:ret ToStr(AsSpan()[Range]);



---
---

$String_t<T>:
 private: 
  Vector<T> _base;//there's some optimizations we could do but I just need something working
 public:
  $MyStringSpan = StringSpan_t<T>;
  $MySpan = Span<T>;

  |new[this&] -> void;

  
  |new[this&,IPar<MyStringSpan> span] -> void:
   Resize(span.Size());
   for [uintptr i = 0;i < span.Size();i++]:this[i] = span[i];

  unsafe |iData[imut this&] -> imut T[&]:ret unsafe _base.iData();
  unsafe |Data[this&] -> T[&]:ret unsafe _base.Data();
  

  |Size[imut this&] => _base.Size();
  |Capacity[imut this&] => _base.Capacity();

  |Resize[this&,uintptr Size] -> void:_base.Resize(Size);
  |Reserve[this&,uintptr Size] -> void:_base.Reserve(Size);
  |Clear[this&] -> void:_base.Clear();

  |Pop[this&] -> T:ret _base.Pop();
  |Remove[this&,uintptr Index] -> T:ret _base.Remove(Index);

  |Push[this&,imut T& Val] -> void:_base.Push(Val);
  |Push[this&,moved T Val] -> void:_base.Push(Val);

  |Insert[this&,uintptr Index,imut T& Item] -> void:_base.Insert(Index,Item);
  |Insert[this&,uintptr Index,moved T Item] -> void:_base.Insert(Index,Item);
  
  //Not required Functions 
  |[][this&,uintptr Index] -> T&:ret _base[Index];
  |[][imut this&,uintptr Index] -> imut T&:ret _base[Index];

  |Append[this&,imut T[:] Val] -> void:_base.Append(Val);
  |Append[this&,moved Span<T> Val] -> void:_base.Append(Val);

  |==[imut this&,imut this& Other] -> bool:
   ret this.iStr() == Other.iStr();

  |!=[imut this&,imut this& Other]:ret !(this == Other);

  |+[imut this&,imut this& Other] -> this:
   ret this + Other.iStr(); 

  |+=[this&,imut this& Other] -> void:
   this += Other.iStr();


  |==[imut this&, IPar<MyStringSpan> Other] -> bool:
   ret this.iStr() == Other;

  |!=[imut this&, IPar<MyStringSpan> Other]:ret !(this == Other);

  |+[imut this&, IPar<MyStringSpan> Other] -> this:
   this copy = this;
   copy += Other;
   ret copy;

  |+=[this&, IPar<MyStringSpan> Other] -> void:
   _base.Append(Other.iAsSpan());

  |AsSpan[this&] -> T[:]:ret unsafe [];
  |iAsSpan[imut this&] -> imut T[:]:ret unsafe [];

  |Str[this&] -> MyStringSpan:ret unsafe [];
  |iStr[imut this&] -> imut MyStringSpan:ret unsafe [];

  |[][this&,Range_t<uintptr> Range] -> MyStringSpan:ret Str()[Range];
  |[][imut this&,Range_t<uintptr> Range] -> imut MyStringSpan:ret Str()[Range];



---
$ULang:String = ULang:String_t<char>;

$ULang:StringSpan = ULang:StringSpan_t<char>;

$ULang:String8 = ULang:String_t<uft8>;

$ULang:String8Span = ULang:StringSpan_t<uft8>;

$ULang:String16 = ULang:String_t<uft16>;

$ULang:String16Span = ULang:StringSpan_t<uft16>;

$ULang:String32 = ULang:String_t<uft32>;

$ULang:String32Span = ULang:StringSpan_t<uft32>;

---

$Unique_ptr<T>:
 private:
  T& _ptr;
 public:
  |new[this&] -> void:
   _ptr =: unsafe bitcast<T&>(0);
  
  |new[this&,imut this& Other] = invalid;

  |new[this&,moved this& Value] -> void:
   _ptr =: Value._ptr;
   Value._ptr =: unsafe bitcast<T&>(0);
  
  |drop[this&]:
   uintptr ptr =unsafe bitcast<uintptr>(_ptr);
   if ptr != uintptr(0):
    unsafe drop(_ptr);

  |Make[] -> this:
   this r = [];
   r._ptr =: unsafe new T();
   ret r;


  |Get[this&] -> T&:ret _ptr;
  |Get[imut this&] -> imut T&:ret _ptr;
  
  |Write[this&,imut T& newvalue] -> void:Get() = newvalue;
  |Write[this&,moved T newvalue] -> void:Get() = newvalue;

  |ReadPtr[imut this&] -> imut T&:ret Get();

  |~>[this&] -> T&:ret Get();

  |~>[imut this&] -> imut T&:ret Get();


---
---

$Vec2f_t<T>:
 T X;
 T Y;
 
 |new[this&]:
  X = 0;
  Y = 0;

 |new[this&,T x,T y]:
  X = x;
  Y = y;

 |==[imut this&,imut this& Other]:
  ret this.X == Other.X && this.Y == Other.Y;

 |!=[imut this&,imut this& Other]:
  ret !(this == Other);

 |+=[this&,imut this& Other]:
  this.X += Other.X;
  this.Y += Other.Y;

 |-=[this&,imut this& Other]:
  this.X -= Other.X;
  this.Y -= Other.Y;

 |+[imut this&,imut this& Other] -> this:
  var copy = this;
  copy += Other;
  ret copy;

 |-[imut this&,imut this& Other] -> this:
  var copy = this;
  copy -= Other;
  ret copy;



---
---

$Vec2i_t<T>:
 T X;
 T Y;
 |new[this&]:
  X = 0;
  Y = 0;
 |new[this&,T x,T y]:
  X = x;
  Y = y;

 |==[imut this&,imut this& Other]:
  ret this.X == Other.X && this.Y == Other.Y;

 |!=[imut this&,imut this& Other]:
  ret !(this == Other);
 
 |+=[this&,imut this& Other]:
  this.X += Other.X;
  this.Y += Other.Y;

 |-=[this&,imut this& Other]:
  this.X -= Other.X;
  this.Y -= Other.Y;

 |+[imut this&,imut this& Other] -> this:
  var copy = this;
  copy += Other;
  ret copy;

 |-[imut this&,imut this& Other] -> this:
  var copy = this;
  copy -= Other;
  ret copy;



---
$ULang:Vec2 = ULang:Vec2f_t<float32>;

$ULang:Vec2i = ULang:Vec2i_t<sint32>;

---

$Vec3f_t<T>:
 T X;
 T Y;
 T Z;

 $MyVec2f = Vec2f_t<T>;

 |new[this&]:
  X = 0;
  Y = 0;
  Z = 0;

 |new[this&,T x,T y,T z]:
  X = x;
  Y = y;
  Z = z;

 |new[this&,IPar<MyVec2f> pos,T z]:
  X = pos.X;
  Y = pos.Y;
  Z = z;

 |==[imut this&,this& Other]:
  ret this.X == Other.X && this.Y == Other.Y && this.Z == Other.Z;

 |!=[imut this&,this& Other]:
  ret !(this == Other);

 |+=[this&,imut this& Other]:
  this.X += Other.X;
  this.Y += Other.Y;
  this.Z += Other.Z;

 |-=[this&,imut this& Other]:
  this.X -= Other.X;
  this.Y -= Other.Y;
  this.Z -= Other.Z;

 |+[imut this&,imut this& Other] -> this:
  var copy = this;
  copy += Other;
  ret copy;

 |-[imut this&,imut this& Other] -> this:
  var copy = this;
  copy -= Other;
  ret copy;



---
---

$Vec3i_t<T>:
 T X;
 T Y;
 T Z;
 $MyVec2i = Vec2i_t<T>;

 |new[this&]:
  X = 0;
  Y = 0;
  Z = 0;
 

 |new[this&,T x,T y,T z]:
  X = x;
  Y = y;
  Z = z; 
  
  
 |new[this&,IPar<MyVec2i> pos,T z]:
  X = pos.X;
  Y = pos.Y;
  Z = z;


 |==[imut this&,imut this& Other]:
  ret this.X == Other.X && this.Y == Other.Y && this.Z == Other.Z;

 |!=[imut this&,imut this& Other]:
  ret !(this == Other);

 |+=[this&,imut this& Other]:
  this.X += Other.X;
  this.Y += Other.Y;
  this.Z += Other.Z;

 |-=[this&,imut this& Other]:
  this.X -= Other.X;
  this.Y -= Other.Y;
  this.Z -= Other.Z;

 |+[imut this&,imut this& Other] -> this:
  var copy = this;
  copy += Other;
  ret copy;

 |-[imut this&,imut this& Other] -> this:
  var copy = this;
  copy -= Other;
  ret copy;



---
$ULang:Vec3 = ULang:Vec3f_t<float32>;

$ULang:Vec3i = ULang:Vec3f_t<sint32>;

---

$Vec4f_t<T>:
 T X;
 T Y;
 T Z;
 T W;




---
$ULang:Vec4 = ULang:Vec4f_t<float32>;

---

$Vector<T>:
 private: 
  T[&] _data;
  uintptr _size;
  uintptr _capacity;
 public:
  |new[this&]:
   _data = unsafe bitcast<T[&]>(0);
   _size = 0;
   _capacity = 0;
  |drop[this&]:
   uintptr ptr =unsafe bitcast<uintptr>(_data);
   if ptr != uintptr(0):
   unsafe drop(_data);

  unsafe |iData[imut this&] -> imut T[&]:ret _data;
  unsafe |Data[this&] -> T[&]:ret _data;

  |Size[imut this&] => _size;
  |Capacity[imut this&] => _capacity;

  |Resize[this&,uintptr Size] -> void:
    Reserve(Size);
    _size = Size;

  |Reserve[this&,uintptr Size] -> void:
    if Size > _capacity:
      var oldsize = _size;
      var old = _data;


      _capacity = Size;
      _data = unsafe new T[Size];
      for [uintptr i = 0;i < oldsize;i++]:
       _data[i] = old[i];

      uintptr ptr =unsafe bitcast<uintptr>(old);
      if ptr == uintptr(0):
       unsafe drop(old);
  
  |Clear[this&] -> void:_size = 0;

  |Pop[this&] -> T;
  |Remove[this&,uintptr Index] -> T;

  |Push[this&,imut T& Val] -> void:
   Resize(_size + 1);
   this[_size - 1] = Val;


  |Push[this&,moved T Val] -> void:
   Resize(_size + 1);
   this[_size - 1] = Val;

  |Insert[this&,uintptr Index,imut T& Item] -> void;
  |Insert[this&,uintptr Index,moved T Item] -> void;

  //Not required Functions 
  |Append[this&,imut T[:] Val] -> void;
  |Append[this&,moved Span<T> Val] -> void;

  
  |[][this&,uintptr Index] -> T&:ret _data[Index];
  |[][imut this&,uintptr Index] -> imut T&:ret _data[Index];


  //Span

  |[][this&,Range_t<uintptr> Range] -> T[:]:ret AsSpan()[Range]; 
  |[][imut this&,Range_t<uintptr> Range] -> imut T[:]:ret AsSpan()[Range];

  |AsSpan[this&] -> T[:]:ret unsafe [_data,_size];
  |iAsSpan[imut this&] -> imut T[:]:ret unsafe [_data,_size];


---
$ULang:IPar<ULang:ColorRGB> = imut ULang:ColorRGB&;

$ULang:IPar<ULang:Color24> = imut ULang:Color24&;

$ULang:IPar<ULang:Color> = imut ULang:Color&;

$ULang:IPar<ULang:Color32> = imut ULang:Color32&;

$ULang:Mat4x4_t<float32>:
.size:0

 |(&_new&)[ULang:Mat4x4_t<float32>&] -> void;//ULang:Mat4x4_t<float32>:(&_new&)^ULang:Mat4x4_t<float32>&


$ULang:Range_t<uintptr>:
.size:16
 uIntPtr _start;//Offset 0
 uIntPtr _end;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Range_t<uintptr>:(&_new&)^ULang:Range_t<uintptr>&
 |(&_new&)[this&, uIntPtr, uIntPtr] -> void;//ULang:Range_t<uintptr>:(&_new&)^ULang:Range_t<uintptr>&,uptr,uptr
 |Start[umut this&] -> uIntPtr;//ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut
 |End[umut this&] -> uIntPtr;//ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut


$ULang:Span<char>:
.size:16
 char[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Span<char>:(&_new&)^ULang:Span<char>&
 |(&_new&)[this&, char[&], uIntPtr] -> void;//ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:Span<char>:Size^ULang:Span<char>&imut
 |Data[this&] -> char[&];//ULang:Span<char>:Data^ULang:Span<char>&
 |iData[umut this&] -> char[&];//ULang:Span<char>:iData^ULang:Span<char>&imut
 |(&Index&)[this&, uIntPtr] -> char&;//ULang:Span<char>:(&Index&)^ULang:Span<char>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut char&;//ULang:Span<char>:(&Index&)^ULang:Span<char>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<char>;//ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:Span<char>;//ULang:Span<char>:(&Index&)^ULang:Span<char>&imut,ULang:Range_t<uintptr>


$ULang:StringSpan_t<char>:
.size:16
 char[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&
 |(&_new&)[this&, char[&], uIntPtr] -> void;//ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut
 |iData[umut this&] -> imut char[&];//ULang:StringSpan_t<char>:iData^ULang:StringSpan_t<char>&imut
 |Data[this&] -> char[&];//ULang:StringSpan_t<char>:Data^ULang:StringSpan_t<char>&
 |(&equal&)[umut this&, imut ULang:StringSpan_t<char>&] -> bool;//ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut
 |(&notequal&)[umut this&, imut ULang:StringSpan_t<char>&] -> bool;//ULang:StringSpan_t<char>:(&notequal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut
 |AsSpan[this&] -> ULang:Span<char>;//ULang:StringSpan_t<char>:AsSpan^ULang:StringSpan_t<char>&
 |iAsSpan[umut this&] -> imut ULang:Span<char>;//ULang:StringSpan_t<char>:iAsSpan^ULang:StringSpan_t<char>&imut
 |ToStr[ULang:Span<char>&] -> ULang:StringSpan_t<char>;//ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&
 |ToStr[imut ULang:Span<char>&] -> ULang:StringSpan_t<char>;//ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&imut
 |(&Index&)[this&, uIntPtr] -> char&;//ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut char&;//ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<char>;//ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<char>;//ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&imut,ULang:Range_t<uintptr>


$ULang:StringSpan_t<char>:MySpan = ULang:Span<char>;

$ULang:IPar<[badtype]> = imut [badtype]&;

$ULang:Vector<char>:
.size:24
 char[&] _data;//Offset 0
 uIntPtr _size;//Offset 8
 uIntPtr _capacity;//Offset 16

 |(&_new&)[this&] -> void;//ULang:Vector<char>:(&_new&)^ULang:Vector<char>&
 |(&_drop&)[this&] -> void;//ULang:Vector<char>:(&_drop&)^ULang:Vector<char>&
 |iData[umut this&] -> imut char[&];//ULang:Vector<char>:iData^ULang:Vector<char>&imut
 |Data[this&] -> char[&];//ULang:Vector<char>:Data^ULang:Vector<char>&
 |Size[umut this&] -> uIntPtr;//ULang:Vector<char>:Size^ULang:Vector<char>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:Vector<char>:Capacity^ULang:Vector<char>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:Vector<char>:Reserve^ULang:Vector<char>&,uptr
 |Clear[this&] -> void;//ULang:Vector<char>:Clear^ULang:Vector<char>&
 |Pop[this&] -> char;//ULang:Vector<char>:Pop^ULang:Vector<char>&
 |Remove[this&, uIntPtr] -> char;//ULang:Vector<char>:Remove^ULang:Vector<char>&,uptr
 |Push[this&, imut char&] -> void;//ULang:Vector<char>:Push^ULang:Vector<char>&,c&imut
 |Push[this&, moved char] -> void;//ULang:Vector<char>:Push^ULang:Vector<char>&,cmov
 |Insert[this&, uIntPtr, imut char&] -> void;//ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,c&imut
 |Insert[this&, uIntPtr, moved char] -> void;//ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,cmov
 |Append[this&, imut ULang:Span<char>] -> void;//ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>imut
 |Append[this&, moved ULang:Span<char>] -> void;//ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>mov
 |(&Index&)[this&, uIntPtr] -> char&;//ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut char&;//ULang:Vector<char>:(&Index&)^ULang:Vector<char>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<char>;//ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:Span<char>;//ULang:Vector<char>:(&Index&)^ULang:Vector<char>&imut,ULang:Range_t<uintptr>
 |AsSpan[this&] -> ULang:Span<char>;//ULang:Vector<char>:AsSpan^ULang:Vector<char>&
 |iAsSpan[umut this&] -> imut ULang:Span<char>;//ULang:Vector<char>:iAsSpan^ULang:Vector<char>&imut


$ULang:IPar<ULang:StringSpan_t<char>> = imut ULang:StringSpan_t<char>&;

$ULang:String_t<char>:
.size:24
 ULang:Vector<char> _base;//Offset 0

 |(&_new&)[this&] -> void;//ULang:String_t<char>:(&_new&)^ULang:String_t<char>&
 |(&_new&)[this&, imut ULang:StringSpan_t<char>&] -> void;//ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut
 |iData[umut this&] -> imut char[&];//ULang:String_t<char>:iData^ULang:String_t<char>&imut
 |Data[this&] -> char[&];//ULang:String_t<char>:Data^ULang:String_t<char>&
 |Size[umut this&] -> uIntPtr;//ULang:String_t<char>:Size^ULang:String_t<char>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:String_t<char>:Capacity^ULang:String_t<char>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:String_t<char>:Resize^ULang:String_t<char>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:String_t<char>:Reserve^ULang:String_t<char>&,uptr
 |Clear[this&] -> void;//ULang:String_t<char>:Clear^ULang:String_t<char>&
 |Pop[this&] -> char;//ULang:String_t<char>:Pop^ULang:String_t<char>&
 |Remove[this&, uIntPtr] -> char;//ULang:String_t<char>:Remove^ULang:String_t<char>&,uptr
 |Push[this&, imut char&] -> void;//ULang:String_t<char>:Push^ULang:String_t<char>&,c&imut
 |Push[this&, moved char] -> void;//ULang:String_t<char>:Push^ULang:String_t<char>&,cmov
 |Insert[this&, uIntPtr, imut char&] -> void;//ULang:String_t<char>:Insert^ULang:String_t<char>&,uptr,c&imut
 |Insert[this&, uIntPtr, moved char] -> void;//ULang:String_t<char>:Insert^ULang:String_t<char>&,uptr,cmov
 |(&Index&)[this&, uIntPtr] -> char&;//ULang:String_t<char>:(&Index&)^ULang:String_t<char>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut char&;//ULang:String_t<char>:(&Index&)^ULang:String_t<char>&imut,uptr
 |Append[this&, imut ULang:Span<char>] -> void;//ULang:String_t<char>:Append^ULang:String_t<char>&,ULang:Span<char>imut
 |Append[this&, moved ULang:Span<char>] -> void;//ULang:String_t<char>:Append^ULang:String_t<char>&,ULang:Span<char>mov
 |(&equal&)[umut this&, imut ULang:String_t<char>&] -> bool;//ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut
 |(&notequal&)[umut this&, imut ULang:String_t<char>&] -> bool;//ULang:String_t<char>:(&notequal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut
 |(&Plus&)[umut this&, imut ULang:String_t<char>&] -> ULang:String_t<char>;//ULang:String_t<char>:(&Plus&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut
 |(&Compound_Plus&)[this&, imut ULang:String_t<char>&] -> void;//ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:String_t<char>&imut
 |(&equal&)[umut this&, imut ULang:StringSpan_t<char>&] -> bool;//ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut
 |(&notequal&)[umut this&, imut ULang:StringSpan_t<char>&] -> bool;//ULang:String_t<char>:(&notequal&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut
 |(&Plus&)[umut this&, imut ULang:StringSpan_t<char>&] -> ULang:String_t<char>;//ULang:String_t<char>:(&Plus&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut
 |(&Compound_Plus&)[this&, imut ULang:StringSpan_t<char>&] -> void;//ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut
 |AsSpan[this&] -> ULang:Span<char>;//ULang:String_t<char>:AsSpan^ULang:String_t<char>&
 |iAsSpan[umut this&] -> imut ULang:Span<char>;//ULang:String_t<char>:iAsSpan^ULang:String_t<char>&imut
 |Str[this&] -> ULang:StringSpan_t<char>;//ULang:String_t<char>:Str^ULang:String_t<char>&
 |iStr[umut this&] -> imut ULang:StringSpan_t<char>;//ULang:String_t<char>:iStr^ULang:String_t<char>&imut
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<char>;//ULang:String_t<char>:(&Index&)^ULang:String_t<char>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:StringSpan_t<char>;//ULang:String_t<char>:(&Index&)^ULang:String_t<char>&imut,ULang:Range_t<uintptr>


$ULang:String_t<char>:MyStringSpan = ULang:StringSpan_t<char>;

$ULang:String_t<char>:MySpan = ULang:Span<char>;

$ULang:Result<ULang:OpenedFile,ULang:OpenFileError> enum[uint8]:
 Val[ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Val!] = 0,
 Err[ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Err!] = 1
//Union = #ULang:Result<ULang:OpenedFile,ULang:OpenFileError>u

$#ULang:Result<ULang:OpenedFile,ULang:OpenFileError>u:
.size:0
 ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Val! Val;//Offset 0
 ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Err! Err;//Offset 0



$ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Val!:
.size:0
 ULang:OpenedFile val;//Offset 0



$ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Err!:
.size:0
 ULang:OpenFileError err;//Offset 0



$ULang:Result<ULang:String_t<char>,ULang:OpenFileError> enum[uint8]:
 Val[ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Val!] = 0,
 Err[ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Err!] = 1
//Union = #ULang:Result<ULang:String_t<char>,ULang:OpenFileError>u

$#ULang:Result<ULang:String_t<char>,ULang:OpenFileError>u:
.size:24
 ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Val! Val;//Offset 0
 ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Err! Err;//Offset 0



$ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Val!:
.size:24
 ULang:String_t<char> val;//Offset 0



$ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Err!:
.size:0
 ULang:OpenFileError err;//Offset 0



$ULang:Span<uint8>:
.size:16
 uint8[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&
 |(&_new&)[this&, uint8[&], uIntPtr] -> void;//ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:Span<uint8>:Size^ULang:Span<uint8>&imut
 |Data[this&] -> uint8[&];//ULang:Span<uint8>:Data^ULang:Span<uint8>&
 |iData[umut this&] -> uint8[&];//ULang:Span<uint8>:iData^ULang:Span<uint8>&imut
 |(&Index&)[this&, uIntPtr] -> uint8&;//ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uint8&;//ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<uint8>;//ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:Span<uint8>;//ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&imut,ULang:Range_t<uintptr>


$ULang:Vector<uint8>:
.size:24
 uint8[&] _data;//Offset 0
 uIntPtr _size;//Offset 8
 uIntPtr _capacity;//Offset 16

 |(&_new&)[this&] -> void;//ULang:Vector<uint8>:(&_new&)^ULang:Vector<uint8>&
 |(&_drop&)[this&] -> void;//ULang:Vector<uint8>:(&_drop&)^ULang:Vector<uint8>&
 |iData[umut this&] -> imut uint8[&];//ULang:Vector<uint8>:iData^ULang:Vector<uint8>&imut
 |Data[this&] -> uint8[&];//ULang:Vector<uint8>:Data^ULang:Vector<uint8>&
 |Size[umut this&] -> uIntPtr;//ULang:Vector<uint8>:Size^ULang:Vector<uint8>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:Vector<uint8>:Capacity^ULang:Vector<uint8>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:Vector<uint8>:Resize^ULang:Vector<uint8>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:Vector<uint8>:Reserve^ULang:Vector<uint8>&,uptr
 |Clear[this&] -> void;//ULang:Vector<uint8>:Clear^ULang:Vector<uint8>&
 |Pop[this&] -> uint8;//ULang:Vector<uint8>:Pop^ULang:Vector<uint8>&
 |Remove[this&, uIntPtr] -> uint8;//ULang:Vector<uint8>:Remove^ULang:Vector<uint8>&,uptr
 |Push[this&, imut uint8&] -> void;//ULang:Vector<uint8>:Push^ULang:Vector<uint8>&,u8&imut
 |Push[this&, moved uint8] -> void;//ULang:Vector<uint8>:Push^ULang:Vector<uint8>&,u8mov
 |Insert[this&, uIntPtr, imut uint8&] -> void;//ULang:Vector<uint8>:Insert^ULang:Vector<uint8>&,uptr,u8&imut
 |Insert[this&, uIntPtr, moved uint8] -> void;//ULang:Vector<uint8>:Insert^ULang:Vector<uint8>&,uptr,u8mov
 |Append[this&, imut ULang:Span<uint8>] -> void;//ULang:Vector<uint8>:Append^ULang:Vector<uint8>&,ULang:Span<uint8>imut
 |Append[this&, moved ULang:Span<uint8>] -> void;//ULang:Vector<uint8>:Append^ULang:Vector<uint8>&,ULang:Span<uint8>mov
 |(&Index&)[this&, uIntPtr] -> uint8&;//ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uint8&;//ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<uint8>;//ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:Span<uint8>;//ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&imut,ULang:Range_t<uintptr>
 |AsSpan[this&] -> ULang:Span<uint8>;//ULang:Vector<uint8>:AsSpan^ULang:Vector<uint8>&
 |iAsSpan[umut this&] -> imut ULang:Span<uint8>;//ULang:Vector<uint8>:iAsSpan^ULang:Vector<uint8>&imut


$ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError> enum[uint8]:
 Val[ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Val!] = 0,
 Err[ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Err!] = 1
//Union = #ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>u

$#ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>u:
.size:24
 ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Val! Val;//Offset 0
 ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Err! Err;//Offset 0



$ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Val!:
.size:24
 ULang:Vector<uint8> val;//Offset 0



$ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Err!:
.size:0
 ULang:OpenFileError err;//Offset 0



$ULang:Ptr<sint32>:
.size:8
 sint32& _base;//Offset 0

 |(&_new&)[this&, sint32&] -> void;//ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&,i32&
 |Get[this&] -> sint32&;//ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&
 |Get[umut this&] -> imut sint32&;//ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&imut
 |Write[this&, imut sint32&] -> void;//ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32&imut
 |Write[this&, moved sint32] -> void;//ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32mov
 |ReadPtr[umut this&] -> imut sint32&;//ULang:Ptr<sint32>:ReadPtr^ULang:Ptr<sint32>&imut
 |(&IndirectMember&)[this&] -> sint32&;//ULang:Ptr<sint32>:(&IndirectMember&)^ULang:Ptr<sint32>&
 |(&IndirectMember&)[umut this&] -> imut sint32&;//ULang:Ptr<sint32>:(&IndirectMember&)^ULang:Ptr<sint32>&imut
 |ReassignTo[this&, sint32&] -> void;//ULang:Ptr<sint32>:ReassignTo^ULang:Ptr<sint32>&,i32&
 |Make[imut sint32&] -> imut ULang:Ptr<sint32>;//ULang:Ptr<sint32>:Make^i32&imut
 |Make[sint32&] -> ULang:Ptr<sint32>;//ULang:Ptr<sint32>:Make^i32&
 |(&_new&)[ULang:Ptr<sint32>&] -> void;//ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&


$ULang:Vec2f_t<float32>:
.size:8
 float32 X;//Offset 0
 float32 Y;//Offset 4

 |(&_new&)[this&] -> void;//ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&
 |(&_new&)[this&, float32, float32] -> void;//ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&,f32,f32
 |(&equal&)[umut this&, imut ULang:Vec2f_t<float32>&] -> bool;//ULang:Vec2f_t<float32>:(&equal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut
 |(&notequal&)[umut this&, imut ULang:Vec2f_t<float32>&] -> bool;//ULang:Vec2f_t<float32>:(&notequal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut
 |(&Compound_Plus&)[this&, imut ULang:Vec2f_t<float32>&] -> void;//ULang:Vec2f_t<float32>:(&Compound_Plus&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut
 |(&Compound_Sub&)[this&, imut ULang:Vec2f_t<float32>&] -> void;//ULang:Vec2f_t<float32>:(&Compound_Sub&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut
 |(&Plus&)[umut this&, imut ULang:Vec2f_t<float32>&] -> ULang:Vec2f_t<float32>;//ULang:Vec2f_t<float32>:(&Plus&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut
 |(&Minus&)[umut this&, imut ULang:Vec2f_t<float32>&] -> ULang:Vec2f_t<float32>;//ULang:Vec2f_t<float32>:(&Minus&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut


$ULang:Ptr<ULang:Vec2f_t<float32>>:
.size:8
 ULang:Vec2f_t<float32>& _base;//Offset 0

 |(&_new&)[this&, ULang:Vec2f_t<float32>&] -> void;//ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&
 |Get[this&] -> ULang:Vec2f_t<float32>&;//ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&
 |Get[umut this&] -> imut ULang:Vec2f_t<float32>&;//ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&imut
 |Write[this&, imut ULang:Vec2f_t<float32>&] -> void;//ULang:Ptr<ULang:Vec2f_t<float32>>:Write^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&imut
 |Write[this&, moved ULang:Vec2f_t<float32>] -> void;//ULang:Ptr<ULang:Vec2f_t<float32>>:Write^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>mov
 |ReadPtr[umut this&] -> imut ULang:Vec2f_t<float32>&;//ULang:Ptr<ULang:Vec2f_t<float32>>:ReadPtr^ULang:Ptr<ULang:Vec2f_t<float32>>&imut
 |(&IndirectMember&)[this&] -> ULang:Vec2f_t<float32>&;//ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&
 |(&IndirectMember&)[umut this&] -> imut ULang:Vec2f_t<float32>&;//ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&imut
 |ReassignTo[this&, ULang:Vec2f_t<float32>&] -> void;//ULang:Ptr<ULang:Vec2f_t<float32>>:ReassignTo^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&
 |Make[imut ULang:Vec2f_t<float32>&] -> imut ULang:Ptr<ULang:Vec2f_t<float32>>;//ULang:Ptr<ULang:Vec2f_t<float32>>:Make^ULang:Vec2f_t<float32>&imut
 |Make[ULang:Vec2f_t<float32>&] -> ULang:Ptr<ULang:Vec2f_t<float32>>;//ULang:Ptr<ULang:Vec2f_t<float32>>:Make^ULang:Vec2f_t<float32>&
 |(&_new&)[ULang:Ptr<ULang:Vec2f_t<float32>>&] -> void;//ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&


$ULang:Unique_ptr<sint32>:
.size:8
 sint32& _ptr;//Offset 0

 |(&_new&)[this&] -> void;//ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&
 |(&_new&)[this&, moved ULang:Unique_ptr<sint32>&] -> void;//ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&,ULang:Unique_ptr<sint32>&mov
 |(&_drop&)[this&] -> void;//ULang:Unique_ptr<sint32>:(&_drop&)^ULang:Unique_ptr<sint32>&
 |Make[] -> ULang:Unique_ptr<sint32>;//ULang:Unique_ptr<sint32>:Make
 |Get[this&] -> sint32&;//ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&
 |Get[umut this&] -> imut sint32&;//ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&imut
 |Write[this&, imut sint32&] -> void;//ULang:Unique_ptr<sint32>:Write^ULang:Unique_ptr<sint32>&,i32&imut
 |Write[this&, moved sint32] -> void;//ULang:Unique_ptr<sint32>:Write^ULang:Unique_ptr<sint32>&,i32mov
 |ReadPtr[umut this&] -> imut sint32&;//ULang:Unique_ptr<sint32>:ReadPtr^ULang:Unique_ptr<sint32>&imut
 |(&IndirectMember&)[this&] -> sint32&;//ULang:Unique_ptr<sint32>:(&IndirectMember&)^ULang:Unique_ptr<sint32>&
 |(&IndirectMember&)[umut this&] -> imut sint32&;//ULang:Unique_ptr<sint32>:(&IndirectMember&)^ULang:Unique_ptr<sint32>&imut


$ULang:Span<sint32>:
.size:16
 sint32[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&
 |(&_new&)[this&, sint32[&], uIntPtr] -> void;//ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:Span<sint32>:Size^ULang:Span<sint32>&imut
 |Data[this&] -> sint32[&];//ULang:Span<sint32>:Data^ULang:Span<sint32>&
 |iData[umut this&] -> sint32[&];//ULang:Span<sint32>:iData^ULang:Span<sint32>&imut
 |(&Index&)[this&, uIntPtr] -> sint32&;//ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut sint32&;//ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<sint32>;//ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:Span<sint32>;//ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&imut,ULang:Range_t<uintptr>


$ULang:Vector<sint32>:
.size:24
 sint32[&] _data;//Offset 0
 uIntPtr _size;//Offset 8
 uIntPtr _capacity;//Offset 16

 |(&_new&)[this&] -> void;//ULang:Vector<sint32>:(&_new&)^ULang:Vector<sint32>&
 |(&_drop&)[this&] -> void;//ULang:Vector<sint32>:(&_drop&)^ULang:Vector<sint32>&
 |iData[umut this&] -> imut sint32[&];//ULang:Vector<sint32>:iData^ULang:Vector<sint32>&imut
 |Data[this&] -> sint32[&];//ULang:Vector<sint32>:Data^ULang:Vector<sint32>&
 |Size[umut this&] -> uIntPtr;//ULang:Vector<sint32>:Size^ULang:Vector<sint32>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:Vector<sint32>:Capacity^ULang:Vector<sint32>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:Vector<sint32>:Resize^ULang:Vector<sint32>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:Vector<sint32>:Reserve^ULang:Vector<sint32>&,uptr
 |Clear[this&] -> void;//ULang:Vector<sint32>:Clear^ULang:Vector<sint32>&
 |Pop[this&] -> sint32;//ULang:Vector<sint32>:Pop^ULang:Vector<sint32>&
 |Remove[this&, uIntPtr] -> sint32;//ULang:Vector<sint32>:Remove^ULang:Vector<sint32>&,uptr
 |Push[this&, imut sint32&] -> void;//ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut
 |Push[this&, moved sint32] -> void;//ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32mov
 |Insert[this&, uIntPtr, imut sint32&] -> void;//ULang:Vector<sint32>:Insert^ULang:Vector<sint32>&,uptr,i32&imut
 |Insert[this&, uIntPtr, moved sint32] -> void;//ULang:Vector<sint32>:Insert^ULang:Vector<sint32>&,uptr,i32mov
 |Append[this&, imut ULang:Span<sint32>] -> void;//ULang:Vector<sint32>:Append^ULang:Vector<sint32>&,ULang:Span<sint32>imut
 |Append[this&, moved ULang:Span<sint32>] -> void;//ULang:Vector<sint32>:Append^ULang:Vector<sint32>&,ULang:Span<sint32>mov
 |(&Index&)[this&, uIntPtr] -> sint32&;//ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut sint32&;//ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<sint32>;//ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:Span<sint32>;//ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&imut,ULang:Range_t<uintptr>
 |AsSpan[this&] -> ULang:Span<sint32>;//ULang:Vector<sint32>:AsSpan^ULang:Vector<sint32>&
 |iAsSpan[umut this&] -> imut ULang:Span<sint32>;//ULang:Vector<sint32>:iAsSpan^ULang:Vector<sint32>&imut


$ULang:Ptr<ULang:Empty>:
.size:8
 ULang:Empty& _base;//Offset 0

 |(&_new&)[this&, ULang:Empty&] -> void;//ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&,ULang:Empty&
 |Get[this&] -> ULang:Empty&;//ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&
 |Get[umut this&] -> imut ULang:Empty&;//ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&imut
 |Write[this&, imut ULang:Empty&] -> void;//ULang:Ptr<ULang:Empty>:Write^ULang:Ptr<ULang:Empty>&,ULang:Empty&imut
 |Write[this&, moved ULang:Empty] -> void;//ULang:Ptr<ULang:Empty>:Write^ULang:Ptr<ULang:Empty>&,ULang:Emptymov
 |ReadPtr[umut this&] -> imut ULang:Empty&;//ULang:Ptr<ULang:Empty>:ReadPtr^ULang:Ptr<ULang:Empty>&imut
 |(&IndirectMember&)[this&] -> ULang:Empty&;//ULang:Ptr<ULang:Empty>:(&IndirectMember&)^ULang:Ptr<ULang:Empty>&
 |(&IndirectMember&)[umut this&] -> imut ULang:Empty&;//ULang:Ptr<ULang:Empty>:(&IndirectMember&)^ULang:Ptr<ULang:Empty>&imut
 |ReassignTo[this&, ULang:Empty&] -> void;//ULang:Ptr<ULang:Empty>:ReassignTo^ULang:Ptr<ULang:Empty>&,ULang:Empty&
 |Make[imut ULang:Empty&] -> imut ULang:Ptr<ULang:Empty>;//ULang:Ptr<ULang:Empty>:Make^ULang:Empty&imut
 |Make[ULang:Empty&] -> ULang:Ptr<ULang:Empty>;//ULang:Ptr<ULang:Empty>:Make^ULang:Empty&
 |(&_new&)[ULang:Ptr<ULang:Empty>&] -> void;//ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&


$ULang:Span<uft8>:
.size:16
 uft8[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&
 |(&_new&)[this&, uft8[&], uIntPtr] -> void;//ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:Span<uft8>:Size^ULang:Span<uft8>&imut
 |Data[this&] -> uft8[&];//ULang:Span<uft8>:Data^ULang:Span<uft8>&
 |iData[umut this&] -> uft8[&];//ULang:Span<uft8>:iData^ULang:Span<uft8>&imut
 |(&Index&)[this&, uIntPtr] -> uft8&;//ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft8&;//ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<uft8>;//ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:Span<uft8>;//ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&imut,ULang:Range_t<uintptr>


$ULang:Vector<uft8>:
.size:24
 uft8[&] _data;//Offset 0
 uIntPtr _size;//Offset 8
 uIntPtr _capacity;//Offset 16

 |(&_new&)[this&] -> void;//ULang:Vector<uft8>:(&_new&)^ULang:Vector<uft8>&
 |(&_drop&)[this&] -> void;//ULang:Vector<uft8>:(&_drop&)^ULang:Vector<uft8>&
 |iData[umut this&] -> imut uft8[&];//ULang:Vector<uft8>:iData^ULang:Vector<uft8>&imut
 |Data[this&] -> uft8[&];//ULang:Vector<uft8>:Data^ULang:Vector<uft8>&
 |Size[umut this&] -> uIntPtr;//ULang:Vector<uft8>:Size^ULang:Vector<uft8>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:Vector<uft8>:Capacity^ULang:Vector<uft8>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:Vector<uft8>:Reserve^ULang:Vector<uft8>&,uptr
 |Clear[this&] -> void;//ULang:Vector<uft8>:Clear^ULang:Vector<uft8>&
 |Pop[this&] -> uft8;//ULang:Vector<uft8>:Pop^ULang:Vector<uft8>&
 |Remove[this&, uIntPtr] -> uft8;//ULang:Vector<uft8>:Remove^ULang:Vector<uft8>&,uptr
 |Push[this&, imut uft8&] -> void;//ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,&imut
 |Push[this&, moved uft8] -> void;//ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,mov
 |Insert[this&, uIntPtr, imut uft8&] -> void;//ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,&imut
 |Insert[this&, uIntPtr, moved uft8] -> void;//ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,mov
 |Append[this&, imut ULang:Span<uft8>] -> void;//ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>imut
 |Append[this&, moved ULang:Span<uft8>] -> void;//ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>mov
 |(&Index&)[this&, uIntPtr] -> uft8&;//ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft8&;//ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<uft8>;//ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:Span<uft8>;//ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&imut,ULang:Range_t<uintptr>
 |AsSpan[this&] -> ULang:Span<uft8>;//ULang:Vector<uft8>:AsSpan^ULang:Vector<uft8>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft8>;//ULang:Vector<uft8>:iAsSpan^ULang:Vector<uft8>&imut


$ULang:StringSpan_t<uft8>:
.size:16
 uft8[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&
 |(&_new&)[this&, uft8[&], uIntPtr] -> void;//ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&,[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut
 |iData[umut this&] -> imut uft8[&];//ULang:StringSpan_t<uft8>:iData^ULang:StringSpan_t<uft8>&imut
 |Data[this&] -> uft8[&];//ULang:StringSpan_t<uft8>:Data^ULang:StringSpan_t<uft8>&
 |(&equal&)[umut this&, imut ULang:StringSpan_t<uft8>&] -> bool;//ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut
 |(&notequal&)[umut this&, imut ULang:StringSpan_t<uft8>&] -> bool;//ULang:StringSpan_t<uft8>:(&notequal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut
 |AsSpan[this&] -> ULang:Span<uft8>;//ULang:StringSpan_t<uft8>:AsSpan^ULang:StringSpan_t<uft8>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft8>;//ULang:StringSpan_t<uft8>:iAsSpan^ULang:StringSpan_t<uft8>&imut
 |ToStr[ULang:Span<uft8>&] -> ULang:StringSpan_t<uft8>;//ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&
 |ToStr[imut ULang:Span<uft8>&] -> ULang:StringSpan_t<uft8>;//ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&imut
 |(&Index&)[this&, uIntPtr] -> uft8&;//ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft8&;//ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft8>;//ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft8>;//ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&imut,ULang:Range_t<uintptr>


$ULang:StringSpan_t<uft8>:MySpan = ULang:Span<uft8>;

$ULang:IPar<ULang:StringSpan_t<uft8>> = imut ULang:StringSpan_t<uft8>&;

$ULang:String_t<uft8>:
.size:24
 ULang:Vector<uft8> _base;//Offset 0

 |(&_new&)[this&] -> void;//ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&
 |(&_new&)[this&, imut ULang:StringSpan_t<uft8>&] -> void;//ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut
 |iData[umut this&] -> imut uft8[&];//ULang:String_t<uft8>:iData^ULang:String_t<uft8>&imut
 |Data[this&] -> uft8[&];//ULang:String_t<uft8>:Data^ULang:String_t<uft8>&
 |Size[umut this&] -> uIntPtr;//ULang:String_t<uft8>:Size^ULang:String_t<uft8>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:String_t<uft8>:Capacity^ULang:String_t<uft8>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:String_t<uft8>:Resize^ULang:String_t<uft8>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:String_t<uft8>:Reserve^ULang:String_t<uft8>&,uptr
 |Clear[this&] -> void;//ULang:String_t<uft8>:Clear^ULang:String_t<uft8>&
 |Pop[this&] -> uft8;//ULang:String_t<uft8>:Pop^ULang:String_t<uft8>&
 |Remove[this&, uIntPtr] -> uft8;//ULang:String_t<uft8>:Remove^ULang:String_t<uft8>&,uptr
 |Push[this&, imut uft8&] -> void;//ULang:String_t<uft8>:Push^ULang:String_t<uft8>&,&imut
 |Push[this&, moved uft8] -> void;//ULang:String_t<uft8>:Push^ULang:String_t<uft8>&,mov
 |Insert[this&, uIntPtr, imut uft8&] -> void;//ULang:String_t<uft8>:Insert^ULang:String_t<uft8>&,uptr,&imut
 |Insert[this&, uIntPtr, moved uft8] -> void;//ULang:String_t<uft8>:Insert^ULang:String_t<uft8>&,uptr,mov
 |(&Index&)[this&, uIntPtr] -> uft8&;//ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft8&;//ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&imut,uptr
 |Append[this&, imut ULang:Span<uft8>] -> void;//ULang:String_t<uft8>:Append^ULang:String_t<uft8>&,ULang:Span<uft8>imut
 |Append[this&, moved ULang:Span<uft8>] -> void;//ULang:String_t<uft8>:Append^ULang:String_t<uft8>&,ULang:Span<uft8>mov
 |(&equal&)[umut this&, imut ULang:String_t<uft8>&] -> bool;//ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut
 |(&notequal&)[umut this&, imut ULang:String_t<uft8>&] -> bool;//ULang:String_t<uft8>:(&notequal&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut
 |(&Plus&)[umut this&, imut ULang:String_t<uft8>&] -> ULang:String_t<uft8>;//ULang:String_t<uft8>:(&Plus&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut
 |(&Compound_Plus&)[this&, imut ULang:String_t<uft8>&] -> void;//ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:String_t<uft8>&imut
 |(&equal&)[umut this&, imut ULang:StringSpan_t<uft8>&] -> bool;//ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut
 |(&notequal&)[umut this&, imut ULang:StringSpan_t<uft8>&] -> bool;//ULang:String_t<uft8>:(&notequal&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut
 |(&Plus&)[umut this&, imut ULang:StringSpan_t<uft8>&] -> ULang:String_t<uft8>;//ULang:String_t<uft8>:(&Plus&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut
 |(&Compound_Plus&)[this&, imut ULang:StringSpan_t<uft8>&] -> void;//ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut
 |AsSpan[this&] -> ULang:Span<uft8>;//ULang:String_t<uft8>:AsSpan^ULang:String_t<uft8>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft8>;//ULang:String_t<uft8>:iAsSpan^ULang:String_t<uft8>&imut
 |Str[this&] -> ULang:StringSpan_t<uft8>;//ULang:String_t<uft8>:Str^ULang:String_t<uft8>&
 |iStr[umut this&] -> imut ULang:StringSpan_t<uft8>;//ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft8>;//ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:StringSpan_t<uft8>;//ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&imut,ULang:Range_t<uintptr>


$ULang:String_t<uft8>:MyStringSpan = ULang:StringSpan_t<uft8>;

$ULang:String_t<uft8>:MySpan = ULang:Span<uft8>;

$ULang:Span<uft16>:
.size:16
 uft16[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&
 |(&_new&)[this&, uft16[&], uIntPtr] -> void;//ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:Span<uft16>:Size^ULang:Span<uft16>&imut
 |Data[this&] -> uft16[&];//ULang:Span<uft16>:Data^ULang:Span<uft16>&
 |iData[umut this&] -> uft16[&];//ULang:Span<uft16>:iData^ULang:Span<uft16>&imut
 |(&Index&)[this&, uIntPtr] -> uft16&;//ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft16&;//ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<uft16>;//ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:Span<uft16>;//ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&imut,ULang:Range_t<uintptr>


$ULang:Vector<uft16>:
.size:24
 uft16[&] _data;//Offset 0
 uIntPtr _size;//Offset 8
 uIntPtr _capacity;//Offset 16

 |(&_new&)[this&] -> void;//ULang:Vector<uft16>:(&_new&)^ULang:Vector<uft16>&
 |(&_drop&)[this&] -> void;//ULang:Vector<uft16>:(&_drop&)^ULang:Vector<uft16>&
 |iData[umut this&] -> imut uft16[&];//ULang:Vector<uft16>:iData^ULang:Vector<uft16>&imut
 |Data[this&] -> uft16[&];//ULang:Vector<uft16>:Data^ULang:Vector<uft16>&
 |Size[umut this&] -> uIntPtr;//ULang:Vector<uft16>:Size^ULang:Vector<uft16>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:Vector<uft16>:Capacity^ULang:Vector<uft16>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:Vector<uft16>:Reserve^ULang:Vector<uft16>&,uptr
 |Clear[this&] -> void;//ULang:Vector<uft16>:Clear^ULang:Vector<uft16>&
 |Pop[this&] -> uft16;//ULang:Vector<uft16>:Pop^ULang:Vector<uft16>&
 |Remove[this&, uIntPtr] -> uft16;//ULang:Vector<uft16>:Remove^ULang:Vector<uft16>&,uptr
 |Push[this&, imut uft16&] -> void;//ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,&imut
 |Push[this&, moved uft16] -> void;//ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,mov
 |Insert[this&, uIntPtr, imut uft16&] -> void;//ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,&imut
 |Insert[this&, uIntPtr, moved uft16] -> void;//ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,mov
 |Append[this&, imut ULang:Span<uft16>] -> void;//ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>imut
 |Append[this&, moved ULang:Span<uft16>] -> void;//ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>mov
 |(&Index&)[this&, uIntPtr] -> uft16&;//ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft16&;//ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<uft16>;//ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:Span<uft16>;//ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&imut,ULang:Range_t<uintptr>
 |AsSpan[this&] -> ULang:Span<uft16>;//ULang:Vector<uft16>:AsSpan^ULang:Vector<uft16>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft16>;//ULang:Vector<uft16>:iAsSpan^ULang:Vector<uft16>&imut


$ULang:StringSpan_t<uft16>:
.size:16
 uft16[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&
 |(&_new&)[this&, uft16[&], uIntPtr] -> void;//ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&,[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut
 |iData[umut this&] -> imut uft16[&];//ULang:StringSpan_t<uft16>:iData^ULang:StringSpan_t<uft16>&imut
 |Data[this&] -> uft16[&];//ULang:StringSpan_t<uft16>:Data^ULang:StringSpan_t<uft16>&
 |(&equal&)[umut this&, imut ULang:StringSpan_t<uft16>&] -> bool;//ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut
 |(&notequal&)[umut this&, imut ULang:StringSpan_t<uft16>&] -> bool;//ULang:StringSpan_t<uft16>:(&notequal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut
 |AsSpan[this&] -> ULang:Span<uft16>;//ULang:StringSpan_t<uft16>:AsSpan^ULang:StringSpan_t<uft16>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft16>;//ULang:StringSpan_t<uft16>:iAsSpan^ULang:StringSpan_t<uft16>&imut
 |ToStr[ULang:Span<uft16>&] -> ULang:StringSpan_t<uft16>;//ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&
 |ToStr[imut ULang:Span<uft16>&] -> ULang:StringSpan_t<uft16>;//ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&imut
 |(&Index&)[this&, uIntPtr] -> uft16&;//ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft16&;//ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft16>;//ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft16>;//ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&imut,ULang:Range_t<uintptr>


$ULang:StringSpan_t<uft16>:MySpan = ULang:Span<uft16>;

$ULang:IPar<ULang:StringSpan_t<uft16>> = imut ULang:StringSpan_t<uft16>&;

$ULang:String_t<uft16>:
.size:24
 ULang:Vector<uft16> _base;//Offset 0

 |(&_new&)[this&] -> void;//ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&
 |(&_new&)[this&, imut ULang:StringSpan_t<uft16>&] -> void;//ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut
 |iData[umut this&] -> imut uft16[&];//ULang:String_t<uft16>:iData^ULang:String_t<uft16>&imut
 |Data[this&] -> uft16[&];//ULang:String_t<uft16>:Data^ULang:String_t<uft16>&
 |Size[umut this&] -> uIntPtr;//ULang:String_t<uft16>:Size^ULang:String_t<uft16>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:String_t<uft16>:Capacity^ULang:String_t<uft16>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:String_t<uft16>:Resize^ULang:String_t<uft16>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:String_t<uft16>:Reserve^ULang:String_t<uft16>&,uptr
 |Clear[this&] -> void;//ULang:String_t<uft16>:Clear^ULang:String_t<uft16>&
 |Pop[this&] -> uft16;//ULang:String_t<uft16>:Pop^ULang:String_t<uft16>&
 |Remove[this&, uIntPtr] -> uft16;//ULang:String_t<uft16>:Remove^ULang:String_t<uft16>&,uptr
 |Push[this&, imut uft16&] -> void;//ULang:String_t<uft16>:Push^ULang:String_t<uft16>&,&imut
 |Push[this&, moved uft16] -> void;//ULang:String_t<uft16>:Push^ULang:String_t<uft16>&,mov
 |Insert[this&, uIntPtr, imut uft16&] -> void;//ULang:String_t<uft16>:Insert^ULang:String_t<uft16>&,uptr,&imut
 |Insert[this&, uIntPtr, moved uft16] -> void;//ULang:String_t<uft16>:Insert^ULang:String_t<uft16>&,uptr,mov
 |(&Index&)[this&, uIntPtr] -> uft16&;//ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft16&;//ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&imut,uptr
 |Append[this&, imut ULang:Span<uft16>] -> void;//ULang:String_t<uft16>:Append^ULang:String_t<uft16>&,ULang:Span<uft16>imut
 |Append[this&, moved ULang:Span<uft16>] -> void;//ULang:String_t<uft16>:Append^ULang:String_t<uft16>&,ULang:Span<uft16>mov
 |(&equal&)[umut this&, imut ULang:String_t<uft16>&] -> bool;//ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut
 |(&notequal&)[umut this&, imut ULang:String_t<uft16>&] -> bool;//ULang:String_t<uft16>:(&notequal&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut
 |(&Plus&)[umut this&, imut ULang:String_t<uft16>&] -> ULang:String_t<uft16>;//ULang:String_t<uft16>:(&Plus&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut
 |(&Compound_Plus&)[this&, imut ULang:String_t<uft16>&] -> void;//ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:String_t<uft16>&imut
 |(&equal&)[umut this&, imut ULang:StringSpan_t<uft16>&] -> bool;//ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut
 |(&notequal&)[umut this&, imut ULang:StringSpan_t<uft16>&] -> bool;//ULang:String_t<uft16>:(&notequal&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut
 |(&Plus&)[umut this&, imut ULang:StringSpan_t<uft16>&] -> ULang:String_t<uft16>;//ULang:String_t<uft16>:(&Plus&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut
 |(&Compound_Plus&)[this&, imut ULang:StringSpan_t<uft16>&] -> void;//ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut
 |AsSpan[this&] -> ULang:Span<uft16>;//ULang:String_t<uft16>:AsSpan^ULang:String_t<uft16>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft16>;//ULang:String_t<uft16>:iAsSpan^ULang:String_t<uft16>&imut
 |Str[this&] -> ULang:StringSpan_t<uft16>;//ULang:String_t<uft16>:Str^ULang:String_t<uft16>&
 |iStr[umut this&] -> imut ULang:StringSpan_t<uft16>;//ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft16>;//ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:StringSpan_t<uft16>;//ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&imut,ULang:Range_t<uintptr>


$ULang:String_t<uft16>:MyStringSpan = ULang:StringSpan_t<uft16>;

$ULang:String_t<uft16>:MySpan = ULang:Span<uft16>;

$ULang:Span<uft32>:
.size:16
 uft32[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&
 |(&_new&)[this&, uft32[&], uIntPtr] -> void;//ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:Span<uft32>:Size^ULang:Span<uft32>&imut
 |Data[this&] -> uft32[&];//ULang:Span<uft32>:Data^ULang:Span<uft32>&
 |iData[umut this&] -> uft32[&];//ULang:Span<uft32>:iData^ULang:Span<uft32>&imut
 |(&Index&)[this&, uIntPtr] -> uft32&;//ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft32&;//ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<uft32>;//ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:Span<uft32>;//ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&imut,ULang:Range_t<uintptr>


$ULang:Vector<uft32>:
.size:24
 uft32[&] _data;//Offset 0
 uIntPtr _size;//Offset 8
 uIntPtr _capacity;//Offset 16

 |(&_new&)[this&] -> void;//ULang:Vector<uft32>:(&_new&)^ULang:Vector<uft32>&
 |(&_drop&)[this&] -> void;//ULang:Vector<uft32>:(&_drop&)^ULang:Vector<uft32>&
 |iData[umut this&] -> imut uft32[&];//ULang:Vector<uft32>:iData^ULang:Vector<uft32>&imut
 |Data[this&] -> uft32[&];//ULang:Vector<uft32>:Data^ULang:Vector<uft32>&
 |Size[umut this&] -> uIntPtr;//ULang:Vector<uft32>:Size^ULang:Vector<uft32>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:Vector<uft32>:Capacity^ULang:Vector<uft32>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:Vector<uft32>:Reserve^ULang:Vector<uft32>&,uptr
 |Clear[this&] -> void;//ULang:Vector<uft32>:Clear^ULang:Vector<uft32>&
 |Pop[this&] -> uft32;//ULang:Vector<uft32>:Pop^ULang:Vector<uft32>&
 |Remove[this&, uIntPtr] -> uft32;//ULang:Vector<uft32>:Remove^ULang:Vector<uft32>&,uptr
 |Push[this&, imut uft32&] -> void;//ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,&imut
 |Push[this&, moved uft32] -> void;//ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,mov
 |Insert[this&, uIntPtr, imut uft32&] -> void;//ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,&imut
 |Insert[this&, uIntPtr, moved uft32] -> void;//ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,mov
 |Append[this&, imut ULang:Span<uft32>] -> void;//ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>imut
 |Append[this&, moved ULang:Span<uft32>] -> void;//ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>mov
 |(&Index&)[this&, uIntPtr] -> uft32&;//ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft32&;//ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:Span<uft32>;//ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:Span<uft32>;//ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&imut,ULang:Range_t<uintptr>
 |AsSpan[this&] -> ULang:Span<uft32>;//ULang:Vector<uft32>:AsSpan^ULang:Vector<uft32>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft32>;//ULang:Vector<uft32>:iAsSpan^ULang:Vector<uft32>&imut


$ULang:StringSpan_t<uft32>:
.size:16
 uft32[&] _data;//Offset 0
 uIntPtr _size;//Offset 8

 |(&_new&)[this&] -> void;//ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&
 |(&_new&)[this&, uft32[&], uIntPtr] -> void;//ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&,[&],uptr
 |Size[umut this&] -> uIntPtr;//ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut
 |iData[umut this&] -> imut uft32[&];//ULang:StringSpan_t<uft32>:iData^ULang:StringSpan_t<uft32>&imut
 |Data[this&] -> uft32[&];//ULang:StringSpan_t<uft32>:Data^ULang:StringSpan_t<uft32>&
 |(&equal&)[umut this&, imut ULang:StringSpan_t<uft32>&] -> bool;//ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut
 |(&notequal&)[umut this&, imut ULang:StringSpan_t<uft32>&] -> bool;//ULang:StringSpan_t<uft32>:(&notequal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut
 |AsSpan[this&] -> ULang:Span<uft32>;//ULang:StringSpan_t<uft32>:AsSpan^ULang:StringSpan_t<uft32>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft32>;//ULang:StringSpan_t<uft32>:iAsSpan^ULang:StringSpan_t<uft32>&imut
 |ToStr[ULang:Span<uft32>&] -> ULang:StringSpan_t<uft32>;//ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&
 |ToStr[imut ULang:Span<uft32>&] -> ULang:StringSpan_t<uft32>;//ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&imut
 |(&Index&)[this&, uIntPtr] -> uft32&;//ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft32&;//ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&imut,uptr
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft32>;//ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft32>;//ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&imut,ULang:Range_t<uintptr>


$ULang:StringSpan_t<uft32>:MySpan = ULang:Span<uft32>;

$ULang:IPar<ULang:StringSpan_t<uft32>> = imut ULang:StringSpan_t<uft32>&;

$ULang:String_t<uft32>:
.size:24
 ULang:Vector<uft32> _base;//Offset 0

 |(&_new&)[this&] -> void;//ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&
 |(&_new&)[this&, imut ULang:StringSpan_t<uft32>&] -> void;//ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut
 |iData[umut this&] -> imut uft32[&];//ULang:String_t<uft32>:iData^ULang:String_t<uft32>&imut
 |Data[this&] -> uft32[&];//ULang:String_t<uft32>:Data^ULang:String_t<uft32>&
 |Size[umut this&] -> uIntPtr;//ULang:String_t<uft32>:Size^ULang:String_t<uft32>&imut
 |Capacity[umut this&] -> uIntPtr;//ULang:String_t<uft32>:Capacity^ULang:String_t<uft32>&imut
 |Resize[this&, uIntPtr] -> void;//ULang:String_t<uft32>:Resize^ULang:String_t<uft32>&,uptr
 |Reserve[this&, uIntPtr] -> void;//ULang:String_t<uft32>:Reserve^ULang:String_t<uft32>&,uptr
 |Clear[this&] -> void;//ULang:String_t<uft32>:Clear^ULang:String_t<uft32>&
 |Pop[this&] -> uft32;//ULang:String_t<uft32>:Pop^ULang:String_t<uft32>&
 |Remove[this&, uIntPtr] -> uft32;//ULang:String_t<uft32>:Remove^ULang:String_t<uft32>&,uptr
 |Push[this&, imut uft32&] -> void;//ULang:String_t<uft32>:Push^ULang:String_t<uft32>&,&imut
 |Push[this&, moved uft32] -> void;//ULang:String_t<uft32>:Push^ULang:String_t<uft32>&,mov
 |Insert[this&, uIntPtr, imut uft32&] -> void;//ULang:String_t<uft32>:Insert^ULang:String_t<uft32>&,uptr,&imut
 |Insert[this&, uIntPtr, moved uft32] -> void;//ULang:String_t<uft32>:Insert^ULang:String_t<uft32>&,uptr,mov
 |(&Index&)[this&, uIntPtr] -> uft32&;//ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&,uptr
 |(&Index&)[umut this&, uIntPtr] -> imut uft32&;//ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&imut,uptr
 |Append[this&, imut ULang:Span<uft32>] -> void;//ULang:String_t<uft32>:Append^ULang:String_t<uft32>&,ULang:Span<uft32>imut
 |Append[this&, moved ULang:Span<uft32>] -> void;//ULang:String_t<uft32>:Append^ULang:String_t<uft32>&,ULang:Span<uft32>mov
 |(&equal&)[umut this&, imut ULang:String_t<uft32>&] -> bool;//ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut
 |(&notequal&)[umut this&, imut ULang:String_t<uft32>&] -> bool;//ULang:String_t<uft32>:(&notequal&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut
 |(&Plus&)[umut this&, imut ULang:String_t<uft32>&] -> ULang:String_t<uft32>;//ULang:String_t<uft32>:(&Plus&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut
 |(&Compound_Plus&)[this&, imut ULang:String_t<uft32>&] -> void;//ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:String_t<uft32>&imut
 |(&equal&)[umut this&, imut ULang:StringSpan_t<uft32>&] -> bool;//ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut
 |(&notequal&)[umut this&, imut ULang:StringSpan_t<uft32>&] -> bool;//ULang:String_t<uft32>:(&notequal&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut
 |(&Plus&)[umut this&, imut ULang:StringSpan_t<uft32>&] -> ULang:String_t<uft32>;//ULang:String_t<uft32>:(&Plus&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut
 |(&Compound_Plus&)[this&, imut ULang:StringSpan_t<uft32>&] -> void;//ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut
 |AsSpan[this&] -> ULang:Span<uft32>;//ULang:String_t<uft32>:AsSpan^ULang:String_t<uft32>&
 |iAsSpan[umut this&] -> imut ULang:Span<uft32>;//ULang:String_t<uft32>:iAsSpan^ULang:String_t<uft32>&imut
 |Str[this&] -> ULang:StringSpan_t<uft32>;//ULang:String_t<uft32>:Str^ULang:String_t<uft32>&
 |iStr[umut this&] -> imut ULang:StringSpan_t<uft32>;//ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut
 |(&Index&)[this&, ULang:Range_t<uintptr>] -> ULang:StringSpan_t<uft32>;//ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&,ULang:Range_t<uintptr>
 |(&Index&)[umut this&, ULang:Range_t<uintptr>] -> imut ULang:StringSpan_t<uft32>;//ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&imut,ULang:Range_t<uintptr>


$ULang:String_t<uft32>:MyStringSpan = ULang:StringSpan_t<uft32>;

$ULang:String_t<uft32>:MySpan = ULang:Span<uft32>;

$ULang:Vec2i_t<sint32>:
.size:8
 sint32 X;//Offset 0
 sint32 Y;//Offset 4

 |(&_new&)[this&] -> void;//ULang:Vec2i_t<sint32>:(&_new&)^ULang:Vec2i_t<sint32>&
 |(&_new&)[this&, sint32, sint32] -> void;//ULang:Vec2i_t<sint32>:(&_new&)^ULang:Vec2i_t<sint32>&,i32,i32
 |(&equal&)[umut this&, imut ULang:Vec2i_t<sint32>&] -> bool;//ULang:Vec2i_t<sint32>:(&equal&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut
 |(&notequal&)[umut this&, imut ULang:Vec2i_t<sint32>&] -> bool;//ULang:Vec2i_t<sint32>:(&notequal&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut
 |(&Compound_Plus&)[this&, imut ULang:Vec2i_t<sint32>&] -> void;//ULang:Vec2i_t<sint32>:(&Compound_Plus&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut
 |(&Compound_Sub&)[this&, imut ULang:Vec2i_t<sint32>&] -> void;//ULang:Vec2i_t<sint32>:(&Compound_Sub&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut
 |(&Plus&)[umut this&, imut ULang:Vec2i_t<sint32>&] -> ULang:Vec2i_t<sint32>;//ULang:Vec2i_t<sint32>:(&Plus&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut
 |(&Minus&)[umut this&, imut ULang:Vec2i_t<sint32>&] -> ULang:Vec2i_t<sint32>;//ULang:Vec2i_t<sint32>:(&Minus&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut


$ULang:IPar<ULang:Vec2f_t<float32>> = imut ULang:Vec2f_t<float32>&;

$ULang:Vec3f_t<float32>:
.size:12
 float32 X;//Offset 0
 float32 Y;//Offset 4
 float32 Z;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&
 |(&_new&)[this&, float32, float32, float32] -> void;//ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&,f32,f32,f32
 |(&_new&)[this&, imut ULang:Vec2f_t<float32>&, float32] -> void;//ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&,ULang:Vec2f_t<float32>&imut,f32
 |(&equal&)[umut this&, ULang:Vec3f_t<float32>&] -> bool;//ULang:Vec3f_t<float32>:(&equal&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&
 |(&notequal&)[umut this&, ULang:Vec3f_t<float32>&] -> bool;//ULang:Vec3f_t<float32>:(&notequal&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&
 |(&Compound_Plus&)[this&, imut ULang:Vec3f_t<float32>&] -> void;//ULang:Vec3f_t<float32>:(&Compound_Plus&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut
 |(&Compound_Sub&)[this&, imut ULang:Vec3f_t<float32>&] -> void;//ULang:Vec3f_t<float32>:(&Compound_Sub&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut
 |(&Plus&)[umut this&, imut ULang:Vec3f_t<float32>&] -> ULang:Vec3f_t<float32>;//ULang:Vec3f_t<float32>:(&Plus&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&imut
 |(&Minus&)[umut this&, imut ULang:Vec3f_t<float32>&] -> ULang:Vec3f_t<float32>;//ULang:Vec3f_t<float32>:(&Minus&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&imut


$ULang:Vec3f_t<float32>:MyVec2f = ULang:Vec2f_t<float32>;

$ULang:Vec2f_t<sint32>:
.size:8
 sint32 X;//Offset 0
 sint32 Y;//Offset 4

 |(&_new&)[this&] -> void;//ULang:Vec2f_t<sint32>:(&_new&)^ULang:Vec2f_t<sint32>&
 |(&_new&)[this&, sint32, sint32] -> void;//ULang:Vec2f_t<sint32>:(&_new&)^ULang:Vec2f_t<sint32>&,i32,i32
 |(&equal&)[umut this&, imut ULang:Vec2f_t<sint32>&] -> bool;//ULang:Vec2f_t<sint32>:(&equal&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut
 |(&notequal&)[umut this&, imut ULang:Vec2f_t<sint32>&] -> bool;//ULang:Vec2f_t<sint32>:(&notequal&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut
 |(&Compound_Plus&)[this&, imut ULang:Vec2f_t<sint32>&] -> void;//ULang:Vec2f_t<sint32>:(&Compound_Plus&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut
 |(&Compound_Sub&)[this&, imut ULang:Vec2f_t<sint32>&] -> void;//ULang:Vec2f_t<sint32>:(&Compound_Sub&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut
 |(&Plus&)[umut this&, imut ULang:Vec2f_t<sint32>&] -> ULang:Vec2f_t<sint32>;//ULang:Vec2f_t<sint32>:(&Plus&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut
 |(&Minus&)[umut this&, imut ULang:Vec2f_t<sint32>&] -> ULang:Vec2f_t<sint32>;//ULang:Vec2f_t<sint32>:(&Minus&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut


$ULang:IPar<ULang:Vec2f_t<sint32>> = imut ULang:Vec2f_t<sint32>&;

$ULang:Vec3f_t<sint32>:
.size:12
 sint32 X;//Offset 0
 sint32 Y;//Offset 4
 sint32 Z;//Offset 8

 |(&_new&)[this&] -> void;//ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&
 |(&_new&)[this&, sint32, sint32, sint32] -> void;//ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&,i32,i32,i32
 |(&_new&)[this&, imut ULang:Vec2f_t<sint32>&, sint32] -> void;//ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&,ULang:Vec2f_t<sint32>&imut,i32
 |(&equal&)[umut this&, ULang:Vec3f_t<sint32>&] -> bool;//ULang:Vec3f_t<sint32>:(&equal&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&
 |(&notequal&)[umut this&, ULang:Vec3f_t<sint32>&] -> bool;//ULang:Vec3f_t<sint32>:(&notequal&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&
 |(&Compound_Plus&)[this&, imut ULang:Vec3f_t<sint32>&] -> void;//ULang:Vec3f_t<sint32>:(&Compound_Plus&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut
 |(&Compound_Sub&)[this&, imut ULang:Vec3f_t<sint32>&] -> void;//ULang:Vec3f_t<sint32>:(&Compound_Sub&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut
 |(&Plus&)[umut this&, imut ULang:Vec3f_t<sint32>&] -> ULang:Vec3f_t<sint32>;//ULang:Vec3f_t<sint32>:(&Plus&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&imut
 |(&Minus&)[umut this&, imut ULang:Vec3f_t<sint32>&] -> ULang:Vec3f_t<sint32>;//ULang:Vec3f_t<sint32>:(&Minus&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&imut


$ULang:Vec3f_t<sint32>:MyVec2f = ULang:Vec2f_t<sint32>;

$ULang:Vec4f_t<float32>:
.size:16
 float32 X;//Offset 0
 float32 Y;//Offset 4
 float32 Z;//Offset 8
 float32 W;//Offset 12

 |(&_new&)[ULang:Vec4f_t<float32>&] -> void;//ULang:Vec4f_t<float32>:(&_new&)^ULang:Vec4f_t<float32>&



[Instructions:UCodeVm]-- 
---ULang:ColorRGB:(&_init&): 
   0 :Debug_FuncStart 
   1 :Debug_LineEnter 
   2 :Storef32 [A], 1.000000
   4 :StoreRegToPtr32 [A],[D]
   5 :Debug_LineEnter 
   6 :Storef32 [B], 1.000000
   8 :Load32 [D],[B],4
   9 :Debug_LineEnter 
   10 :Storef32 [C], 1.000000
   12 :Load32 [D],[C],8
   13 :Debug_FuncEnd 
   14 :Ret 
---ULang:ColorRGB:(&_new&)^ULang:ColorRGB&: 
   15 :Debug_FuncStart 
   16 :StoreRegToReg64 [D],[A]
   17 :StoreRegToReg64 [A],[D]
   18 :Call {ULang:ColorRGB:(&_init&)}
   22 :Debug_FuncEnd 
   23 :Ret 
---ULang:ColorRGB:(&_new&)^ULang:ColorRGB&,f32,f32,f32: 
   24 :Debug_FuncStart 
   25 :StoreRegToReg64 [D],[A]
   26 :StoreRegToReg64 [D],[B]
   27 :StoreRegToReg64 [A],[D]
   28 :Push64 [B]
   29 :Push32 [E]
   30 :Push32 [F]
   31 :Call {ULang:ColorRGB:(&_init&)}
   35 :Pop32 [F]
   36 :Pop32 [E]
   37 :Pop64 [B]
   38 :Debug_LineEnter 
   39 :StoreRegToReg32 [E],[A]
   40 :StoreRegToReg64 [B],[C]
   41 :StoreRegToPtr32 [A],[C]
   42 :Debug_LineEnter 
   43 :StoreRegToReg32 [F],[D]
   44 :StoreRegToReg64 [B],[A]
   45 :Load32 [A],[D],4
   46 :Debug_LineEnter 
   47 :GetFromStackSub32 [A],12
   48 :StoreRegOnStackSub32 [A],12
   49 :StoreRegToReg64 [B],[A]
   50 :GetFromStackSub32 [C],12
   51 :Load32 [A],[C],8
   52 :Debug_FuncEnd 
   53 :Ret 
---ULang:ColorRGB:(&equal&)^ULang:ColorRGB&,ULang:ColorRGB&imut: 
   54 :Store64 [A], 4
   58 :IncrementStackPointer [A]
   59 :Debug_FuncStart 
   60 :StoreRegToReg64 [D],[A]
   61 :Debug_LineEnter 
   62 :Read32 [A],[B],8
   63 :Read32 [E],[C],8
   64 :equaltof32 [B],[C],[F]
   65 :StoreRegToReg64 [D],[A]
   66 :Read32 [A],[B],4
   67 :Read32 [E],[A],4
   68 :StoreRegOnStackSub8 [F],4
   69 :equaltof32 [B],[A],[F]
   70 :StoreRegOnStackSub8 [F],3
   71 :GetFromStackSub8 [F],4
   72 :GetFromStackSub8 [A],3
   73 :LAnd8 [F],[A],[F]
   74 :StoreRegToReg64 [D],[A]
   75 :StoreFromPtrToReg32 [A],[B]
   76 :StoreFromPtrToReg32 [E],[A]
   77 :StoreRegOnStackSub8 [F],2
   78 :equaltof32 [B],[A],[F]
   79 :StoreRegOnStackSub8 [F],1
   80 :GetFromStackSub8 [F],2
   81 :GetFromStackSub8 [A],1
   82 :LAnd8 [F],[A],[F]
   83 :Store64 [A], 4
   87 :DecrementStackPointer [A]
   88 :Debug_FuncEnd 
   89 :Ret 
---ULang:ColorRGB:(&notequal&)^ULang:ColorRGB&,ULang:ColorRGB&imut: 
   90 :Debug_FuncStart 
   91 :Debug_LineEnter 
   92 :StoreRegToReg64 [D],[A]
   93 :StoreRegToReg64 [A],[B]
   94 :StoreRegToReg64 [E],[C]
   95 :StoreRegToReg64 [A],[D]
   96 :StoreRegToReg64 [C],[E]
   97 :Call {ULang:ColorRGB:(&equal&)^ULang:ColorRGB&,ULang:ColorRGB&imut}
   101 :LNot8 [F],[A]
   102 :StoreRegToReg8 [A],[F]
   103 :Debug_FuncEnd 
   104 :Ret 
---ULang:ColorRGB:(&Cast&)^ULang:ColorRGB&imut: 
   105 :Store64 [A], 5
   109 :IncrementStackPointer [A]
   110 :Debug_FuncStart 
   111 :Debug_LineEnter 
   112 :GetPointerOfStackSub [A],5
   113 :Debug_LineEnter 
   114 :StoreFromPtrToReg32 [D],[B]
   115 :Storef32 [C], 255.000000
   117 :Multf32 [B],[C],[F]
   118 :float32ToInt32 [F],[E]
   119 :SInt32ToSInt16 [E],[B]
   120 :SInt16ToSInt8 [B],[B]
   121 :Read32 [D],[C],4
   122 :Storef32 [E], 255.000000
   124 :Multf32 [C],[E],[F]
   125 :float32ToInt32 [F],[C]
   126 :SInt32ToSInt16 [C],[E]
   127 :SInt16ToSInt8 [E],[E]
   128 :Read32 [D],[C],8
   129 :Storef32 [D], 255.000000
   131 :Multf32 [C],[D],[F]
   132 :float32ToInt32 [F],[C]
   133 :SInt32ToSInt16 [C],[D]
   134 :SInt16ToSInt8 [D],[D]
   135 :StoreRegOnStackSub8 [D],2
   136 :StoreRegToReg64 [A],[D]
   137 :StoreRegOnStackSub8 [E],1
   138 :StoreRegToReg8 [B],[E]
   139 :GetFromStackSub8 [F],1
   140 :GetFromStackSub8 [A],2
   141 :Push8 [A]
   142 :Call {ULang:Color24:(&_new&)^ULang:Color24&,u8,u8,u8}
   146 :Pop8 [A]
   147 :GetFromStackSub32 [F],5
   148 :Store64 [A], 5
   152 :DecrementStackPointer [A]
   153 :Debug_FuncEnd 
   154 :Ret 
---ULang:Color:(&_init&): 
   155 :Debug_FuncStart 
   156 :Debug_LineEnter 
   157 :Storef32 [A], 1.000000
   159 :StoreRegToPtr32 [A],[D]
   160 :Debug_LineEnter 
   161 :Storef32 [B], 1.000000
   163 :Load32 [D],[B],4
   164 :Debug_LineEnter 
   165 :Storef32 [C], 1.000000
   167 :Load32 [D],[C],8
   168 :Debug_LineEnter 
   169 :Storef32 [E], 1.000000
   171 :Load32 [D],[E],12
   172 :Debug_FuncEnd 
   173 :Ret 
---ULang:Color:(&_new&)^ULang:Color&: 
   174 :Debug_FuncStart 
   175 :StoreRegToReg64 [D],[A]
   176 :StoreRegToReg64 [A],[D]
   177 :Call {ULang:Color:(&_init&)}
   181 :Debug_FuncEnd 
   182 :Ret 
---ULang:Color:(&_new&)^ULang:Color&,f32,f32,f32,f32: 
   183 :Debug_FuncStart 
   184 :StoreRegToReg64 [D],[A]
   185 :StoreRegToReg64 [D],[B]
   186 :StoreRegToReg64 [A],[D]
   187 :Push64 [B]
   188 :Push32 [E]
   189 :Push32 [F]
   190 :Call {ULang:Color:(&_init&)}
   194 :Pop32 [F]
   195 :Pop32 [E]
   196 :Pop64 [B]
   197 :Debug_LineEnter 
   198 :StoreRegToReg32 [E],[A]
   199 :StoreRegToReg64 [B],[C]
   200 :StoreRegToPtr32 [A],[C]
   201 :Debug_LineEnter 
   202 :StoreRegToReg32 [F],[D]
   203 :StoreRegToReg64 [B],[A]
   204 :Load32 [A],[D],4
   205 :Debug_LineEnter 
   206 :GetFromStackSub32 [A],16
   207 :StoreRegOnStackSub32 [A],16
   208 :StoreRegToReg64 [B],[A]
   209 :GetFromStackSub32 [C],16
   210 :Load32 [A],[C],8
   211 :Debug_LineEnter 
   212 :GetFromStackSub32 [A],12
   213 :StoreRegOnStackSub32 [A],12
   214 :StoreRegToReg64 [B],[A]
   215 :GetFromStackSub32 [C],12
   216 :Load32 [A],[C],12
   217 :Debug_FuncEnd 
   218 :Ret 
---ULang:Color:(&_new&)^ULang:Color&,ULang:ColorRGB&imut,f32: 
   219 :Debug_FuncStart 
   220 :StoreRegToReg64 [D],[A]
   221 :StoreRegToReg64 [D],[B]
   222 :StoreRegToReg64 [A],[D]
   223 :Push64 [B]
   224 :Push64 [E]
   225 :Push32 [F]
   226 :Call {ULang:Color:(&_init&)}
   230 :Pop32 [F]
   231 :Pop64 [E]
   232 :Pop64 [B]
   233 :Debug_LineEnter 
   234 :StoreFromPtrToReg32 [E],[A]
   235 :StoreRegToReg64 [B],[C]
   236 :StoreRegToPtr32 [A],[C]
   237 :Debug_LineEnter 
   238 :Read32 [E],[D],4
   239 :StoreRegToReg64 [B],[A]
   240 :Load32 [A],[D],4
   241 :Debug_LineEnter 
   242 :Read32 [E],[A],8
   243 :StoreRegToReg64 [B],[C]
   244 :Load32 [C],[A],8
   245 :Debug_LineEnter 
   246 :StoreRegToReg32 [F],[A]
   247 :StoreRegToReg64 [B],[C]
   248 :Load32 [C],[A],12
   249 :Debug_FuncEnd 
   250 :Ret 
---ULang:Color:WithOutOpacity^ULang:Color&: 
   251 :Store64 [A], 16
   255 :IncrementStackPointer [A]
   256 :Debug_FuncStart 
   257 :Debug_LineEnter 
   258 :GetPointerOfStackSub [A],16
   259 :Debug_LineEnter 
   260 :StoreFromPtrToReg32 [D],[B]
   261 :Read32 [D],[C],4
   262 :Read32 [D],[E],8
   263 :StoreRegToReg64 [A],[D]
   264 :StoreRegToReg32 [E],[F]
   265 :StoreRegToReg32 [B],[E]
   266 :StoreRegOnStackSub32 [F],4
   267 :StoreRegToReg32 [C],[F]
   268 :GetFromStackSub32 [A],4
   269 :Push32 [A]
   270 :Call {ULang:ColorRGB:(&_new&)^ULang:ColorRGB&,f32,f32,f32}
   274 :Pop32 [A]
   275 :GetPointerOfStackSub [A],16
   276 :StoreRegToReg64 [A],[F]
   277 :Store64 [A], 16
   281 :DecrementStackPointer [A]
   282 :Debug_FuncEnd 
   283 :Ret 
---ULang:Color:(&equal&)^ULang:Color&,ULang:Color&imut: 
   284 :Store64 [A], 6
   288 :IncrementStackPointer [A]
   289 :Debug_FuncStart 
   290 :StoreRegToReg64 [D],[A]
   291 :Debug_LineEnter 
   292 :Read32 [A],[B],12
   293 :Read32 [E],[C],12
   294 :equaltof32 [B],[C],[F]
   295 :StoreRegToReg64 [D],[A]
   296 :Read32 [A],[B],8
   297 :Read32 [E],[A],8
   298 :StoreRegOnStackSub8 [F],6
   299 :equaltof32 [B],[A],[F]
   300 :StoreRegOnStackSub8 [F],5
   301 :GetFromStackSub8 [F],6
   302 :GetFromStackSub8 [A],5
   303 :LAnd8 [F],[A],[F]
   304 :StoreRegToReg64 [D],[A]
   305 :Read32 [A],[B],4
   306 :Read32 [E],[A],4
   307 :StoreRegOnStackSub8 [F],4
   308 :equaltof32 [B],[A],[F]
   309 :StoreRegOnStackSub8 [F],3
   310 :GetFromStackSub8 [F],4
   311 :GetFromStackSub8 [A],3
   312 :LAnd8 [F],[A],[F]
   313 :StoreRegToReg64 [D],[A]
   314 :StoreFromPtrToReg32 [A],[B]
   315 :StoreFromPtrToReg32 [E],[A]
   316 :StoreRegOnStackSub8 [F],2
   317 :equaltof32 [B],[A],[F]
   318 :StoreRegOnStackSub8 [F],1
   319 :GetFromStackSub8 [F],2
   320 :GetFromStackSub8 [A],1
   321 :LAnd8 [F],[A],[F]
   322 :Store64 [A], 6
   326 :DecrementStackPointer [A]
   327 :Debug_FuncEnd 
   328 :Ret 
---ULang:Color:(&notequal&)^ULang:Color&,ULang:Color&imut: 
   329 :Debug_FuncStart 
   330 :Debug_LineEnter 
   331 :StoreRegToReg64 [D],[A]
   332 :StoreRegToReg64 [A],[B]
   333 :StoreRegToReg64 [E],[C]
   334 :StoreRegToReg64 [A],[D]
   335 :StoreRegToReg64 [C],[E]
   336 :Call {ULang:Color:(&equal&)^ULang:Color&,ULang:Color&imut}
   340 :LNot8 [F],[A]
   341 :StoreRegToReg8 [A],[F]
   342 :Debug_FuncEnd 
   343 :Ret 
---ULang:Color:(&Cast&)^ULang:Color&imut: 
   344 :Store64 [A], 19
   348 :IncrementStackPointer [A]
   349 :Debug_FuncStart 
   350 :Debug_LineEnter 
   351 :GetPointerOfStackSub [A],19
   352 :Debug_LineEnter 
   353 :StoreFromPtrToReg32 [D],[B]
   354 :Storef32 [C], 255.000000
   356 :Multf32 [B],[C],[F]
   357 :float32ToInt32 [F],[E]
   358 :SInt32ToSInt16 [E],[B]
   359 :SInt16ToSInt8 [B],[B]
   360 :Read32 [D],[C],4
   361 :Storef32 [E], 255.000000
   363 :Multf32 [C],[E],[F]
   364 :float32ToInt32 [F],[C]
   365 :SInt32ToSInt16 [C],[E]
   366 :SInt16ToSInt8 [E],[E]
   367 :Read32 [D],[C],8
   368 :StoreRegOnStackSub64 [D],15
   369 :Storef32 [D], 255.000000
   371 :Multf32 [C],[D],[F]
   372 :float32ToInt32 [F],[C]
   373 :SInt32ToSInt16 [C],[D]
   374 :SInt16ToSInt8 [D],[D]
   375 :GetFromStackSub64 [C],15
   376 :Read32 [C],[C],12
   377 :StoreRegOnStackSub32 [C],7
   378 :StoreRegOnStackSub8 [D],3
   379 :Storef32 [D], 255.000000
   381 :Multf32 [C],[D],[F]
   382 :float32ToInt32 [F],[C]
   383 :SInt32ToSInt16 [C],[D]
   384 :SInt16ToSInt8 [D],[D]
   385 :StoreRegOnStackSub8 [D],2
   386 :StoreRegToReg64 [A],[D]
   387 :StoreRegOnStackSub8 [E],1
   388 :StoreRegToReg8 [B],[E]
   389 :GetFromStackSub8 [F],1
   390 :GetFromStackSub8 [A],3
   391 :Push8 [A]
   392 :GetFromStackSub8 [A],3
   393 :Push8 [A]
   394 :Call {ULang:Color32:(&_new&)^ULang:Color32&,u8,u8,u8,u8}
   398 :Pop16 [A]
   399 :GetFromStackSub32 [F],19
   400 :Store64 [A], 19
   404 :DecrementStackPointer [A]
   405 :Debug_FuncEnd 
   406 :Ret 
---ULang:Color24:(&_init&): 
   407 :Debug_FuncStart 
   408 :Debug_LineEnter 
   409 :Store8 [A],255|-1
   410 :StoreRegToPtr8 [A],[D]
   411 :Debug_LineEnter 
   412 :Store8 [B],255|-1
   413 :Load8 [D],[B],1
   414 :Debug_LineEnter 
   415 :Store8 [C],255|-1
   416 :Load8 [D],[C],2
   417 :Debug_FuncEnd 
   418 :Ret 
---ULang:Color24:(&_new&)^ULang:Color24&: 
   419 :Debug_FuncStart 
   420 :StoreRegToReg64 [D],[A]
   421 :StoreRegToReg64 [A],[D]
   422 :Call {ULang:Color24:(&_init&)}
   426 :Debug_FuncEnd 
   427 :Ret 
---ULang:Color24:(&_new&)^ULang:Color24&,u8,u8,u8: 
   428 :Debug_FuncStart 
   429 :StoreRegToReg64 [D],[A]
   430 :StoreRegToReg64 [D],[B]
   431 :StoreRegToReg64 [A],[D]
   432 :Push64 [B]
   433 :Push8 [E]
   434 :Push8 [F]
   435 :Call {ULang:Color24:(&_init&)}
   439 :Pop8 [F]
   440 :Pop8 [E]
   441 :Pop64 [B]
   442 :Debug_LineEnter 
   443 :StoreRegToReg8 [E],[A]
   444 :StoreRegToReg64 [B],[C]
   445 :StoreRegToPtr8 [A],[C]
   446 :Debug_LineEnter 
   447 :StoreRegToReg8 [F],[D]
   448 :StoreRegToReg64 [B],[A]
   449 :Load8 [A],[D],1
   450 :Debug_LineEnter 
   451 :GetFromStackSub8 [A],9
   452 :StoreRegOnStackSub8 [A],9
   453 :StoreRegToReg64 [B],[A]
   454 :GetFromStackSub8 [C],9
   455 :Load8 [A],[C],2
   456 :Debug_FuncEnd 
   457 :Ret 
---ULang:Color24:(&equal&)^ULang:Color24&,ULang:Color24&imut: 
   458 :Store64 [A], 4
   462 :IncrementStackPointer [A]
   463 :Debug_FuncStart 
   464 :StoreRegToReg64 [D],[A]
   465 :Debug_LineEnter 
   466 :Read8 [A],[B],2
   467 :Read8 [E],[C],2
   468 :equalto8 [B],[C],[F]
   469 :StoreRegToReg64 [D],[A]
   470 :Read8 [A],[B],1
   471 :Read8 [E],[A],1
   472 :StoreRegOnStackSub8 [F],4
   473 :equalto8 [B],[A],[F]
   474 :StoreRegOnStackSub8 [F],3
   475 :GetFromStackSub8 [F],4
   476 :GetFromStackSub8 [A],3
   477 :LAnd8 [F],[A],[F]
   478 :StoreRegToReg64 [D],[A]
   479 :StoreFromPtrToReg8 [A],[B]
   480 :StoreFromPtrToReg8 [E],[A]
   481 :StoreRegOnStackSub8 [F],2
   482 :equalto8 [B],[A],[F]
   483 :StoreRegOnStackSub8 [F],1
   484 :GetFromStackSub8 [F],2
   485 :GetFromStackSub8 [A],1
   486 :LAnd8 [F],[A],[F]

   //File:/Graphics/Color.uc
   //Line:4

   487 :Store64 [A], 4

   //Line:5

   491 :DecrementStackPointer [A]
   492 :Debug_FuncEnd 
   493 :Ret 
---ULang:Color24:(&notequal&)^ULang:Color24&,ULang:Color24&imut: 
   494 :Debug_FuncStart 

   //Line:6

   495 :Debug_LineEnter 
   496 :StoreRegToReg64 [D],[A]
   497 :StoreRegToReg64 [A],[B]
   498 :StoreRegToReg64 [E],[C]
   499 :StoreRegToReg64 [A],[D]
   500 :StoreRegToReg64 [C],[E]
   501 :Call {ULang:Color24:(&equal&)^ULang:Color24&,ULang:Color24&imut}
   505 :LNot8 [F],[A]
   506 :StoreRegToReg8 [A],[F]
   507 :Debug_FuncEnd 
   508 :Ret 
---ULang:Color24:(&Cast&)^ULang:Color24&imut: 
   509 :Store64 [A], 28
   513 :IncrementStackPointer [A]
   514 :Debug_FuncStart 
   515 :Debug_LineEnter 
   516 :GetPointerOfStackSub [A],28
   517 :Debug_LineEnter 
   518 :StoreFromPtrToReg8 [D],[B]
   519 :UInt8ToUInt16 [B],[C]
   520 :UInt16ToUInt32 [C],[C]
   521 :SInt32Tofloat32 [C],[E]
   522 :Storef32 [F], 255.000000

   //File:/Graphics/Color.uc
   //Line:10

   524 :StoreRegOnStackSub32 [F],16
   525 :GetFromStackSub32 [F],16
   526 :Divf32 [E],[F],[F]
   527 :Read8 [D],[B],1

   //Line:11

   528 :UInt8ToUInt16 [B],[C]
   529 :UInt16ToUInt32 [C],[C]
   530 :SInt32Tofloat32 [C],[B]
   531 :Storef32 [C], 255.000000
   533 :StoreRegOnStackSub32 [F],12
   534 :Divf32 [B],[C],[F]
   535 :Read8 [D],[B],2
   536 :UInt8ToUInt16 [B],[C]
   537 :UInt16ToUInt32 [C],[C]

   //StackFrameSize:4

   538 :SInt32Tofloat32 [C],[B]
   539 :Storef32 [C], 255.000000
   541 :StoreRegOnStackSub32 [F],8

   //File:/Graphics/Color.uc
   //Line:15

   542 :Divf32 [B],[C],[F]
   543 :StoreRegToReg64 [A],[D]
   544 :GetFromStackSub32 [E],12
   545 :StoreRegOnStackSub32 [F],4
   546 :GetFromStackSub32 [F],8
   547 :GetFromStackSub32 [A],4
   548 :Push32 [A]
   549 :Call {ULang:ColorRGB:(&_new&)^ULang:ColorRGB&,f32,f32,f32}
   553 :Pop32 [A]
   554 :GetPointerOfStackSub [A],28
   555 :StoreRegToReg64 [A],[F]
   556 :Store64 [A], 28
   560 :DecrementStackPointer [A]
   561 :Debug_FuncEnd 
   562 :Ret 
---ULang:Color32:(&_init&): 
   563 :Debug_FuncStart 
   564 :Debug_LineEnter 
   565 :Store8 [A],255|-1
   566 :StoreRegToPtr8 [A],[D]
   567 :Debug_LineEnter 
   568 :Store8 [B],255|-1
   569 :Load8 [D],[B],1
   570 :Debug_LineEnter 
   571 :Store8 [C],255|-1
   572 :Load8 [D],[C],2
   573 :Debug_LineEnter 
   574 :Store8 [E],255|-1

   //File:/Graphics/Color.uc
   //Line:18

   575 :Load8 [D],[E],3
   576 :Debug_FuncEnd 
   577 :Ret 
---ULang:Color32:(&_new&)^ULang:Color32&: 
   578 :Debug_FuncStart 
   579 :StoreRegToReg64 [D],[A]
   580 :StoreRegToReg64 [A],[D]
   581 :Call {ULang:Color32:(&_init&)}
   585 :Debug_FuncEnd 
   586 :Ret 
---ULang:Color32:(&_new&)^ULang:Color32&,u8,u8,u8,u8: 

   //StackFrameSize:5

   587 :Debug_FuncStart 
   588 :StoreRegToReg64 [D],[A]
   589 :StoreRegToReg64 [D],[B]

   //File:/Graphics/Color.uc
   //Line:0

   590 :StoreRegToReg64 [A],[D]
   591 :Push64 [B]

   //Line:21

   592 :Push8 [E]
   593 :Push8 [F]
   594 :Call {ULang:Color32:(&_init&)}
   598 :Pop8 [F]
   599 :Pop8 [E]
   600 :Pop64 [B]
   601 :Debug_LineEnter 
   602 :StoreRegToReg8 [E],[A]
   603 :StoreRegToReg64 [B],[C]
   604 :StoreRegToPtr8 [A],[C]
   605 :Debug_LineEnter 
   606 :StoreRegToReg8 [F],[D]
   607 :StoreRegToReg64 [B],[A]
   608 :Load8 [A],[D],1
   609 :Debug_LineEnter 
   610 :GetFromStackSub8 [A],10
   611 :StoreRegOnStackSub8 [A],10
   612 :StoreRegToReg64 [B],[A]
   613 :GetFromStackSub8 [C],10
   614 :Load8 [A],[C],2
   615 :Debug_LineEnter 
   616 :GetFromStackSub8 [A],9
   617 :StoreRegOnStackSub8 [A],9
   618 :StoreRegToReg64 [B],[A]
   619 :GetFromStackSub8 [C],9
   620 :Load8 [A],[C],3
   621 :Debug_FuncEnd 
   622 :Ret 
---ULang:Color32:(&_new&)^ULang:Color32&,ULang:Color24&imut,u8: 
   623 :Debug_FuncStart 
   624 :StoreRegToReg64 [D],[A]
   625 :StoreRegToReg64 [D],[B]
   626 :StoreRegToReg64 [A],[D]
   627 :Push64 [B]
   628 :Push64 [E]
   629 :Push8 [F]
   630 :Call {ULang:Color32:(&_init&)}
   634 :Pop8 [F]
   635 :Pop64 [E]
   636 :Pop64 [B]
   637 :Debug_LineEnter 

   //File:/Graphics/Color.uc
   //Line:24

   638 :StoreFromPtrToReg8 [E],[A]
   639 :StoreRegToReg64 [B],[C]
   640 :StoreRegToPtr8 [A],[C]
   641 :Debug_LineEnter 

   //Line:25

   642 :Read8 [E],[D],1
   643 :StoreRegToReg64 [B],[A]
   644 :Load8 [A],[D],1
   645 :Debug_LineEnter 

   //Line:26

   646 :Read8 [E],[A],2
   647 :StoreRegToReg64 [B],[C]
   648 :Load8 [C],[A],2
   649 :Debug_LineEnter 

   //Line:27

   650 :StoreRegToReg8 [F],[A]
   651 :StoreRegToReg64 [B],[C]
   652 :Load8 [C],[A],3
   653 :Debug_FuncEnd 
   654 :Ret 
---ULang:Color32:WithOutOpacity^ULang:Color32&: 
   655 :Store64 [A], 4
   659 :IncrementStackPointer [A]
   660 :Debug_FuncStart 
   661 :Debug_LineEnter 
   662 :GetPointerOfStackSub [A],4
   663 :Debug_LineEnter 
   664 :StoreFromPtrToReg8 [D],[B]
   665 :Read8 [D],[C],1
   666 :Read8 [D],[E],2
   667 :StoreRegToReg64 [A],[D]
   668 :StoreRegToReg8 [E],[F]
   669 :StoreRegToReg8 [B],[E]
   670 :StoreRegOnStackSub8 [F],1
   671 :StoreRegToReg8 [C],[F]
   672 :GetFromStackSub8 [A],1
   673 :Push8 [A]
   674 :Call {ULang:Color24:(&_new&)^ULang:Color24&,u8,u8,u8}
   678 :Pop8 [A]

   //File:/Graphics/Color.uc
   //Line:31

   679 :GetFromStackSub32 [F],4
   680 :Store64 [A], 4
   684 :DecrementStackPointer [A]
   685 :Debug_FuncEnd 
   686 :Ret 
---ULang:Color32:(&equal&)^ULang:Color32&,ULang:Color32&imut: 

   //Line:33

   687 :Store64 [A], 6
   691 :IncrementStackPointer [A]
   692 :Debug_FuncStart 

   //Line:34

   693 :StoreRegToReg64 [D],[A]
   694 :Debug_LineEnter 
   695 :Read8 [A],[B],3
   696 :Read8 [E],[C],3
   697 :equalto8 [B],[C],[F]
   698 :StoreRegToReg64 [D],[A]
   699 :Read8 [A],[B],2
   700 :Read8 [E],[A],2
   701 :StoreRegOnStackSub8 [F],6
   702 :equalto8 [B],[A],[F]
   703 :StoreRegOnStackSub8 [F],5
   704 :GetFromStackSub8 [F],6
   705 :GetFromStackSub8 [A],5
   706 :LAnd8 [F],[A],[F]
   707 :StoreRegToReg64 [D],[A]
   708 :Read8 [A],[B],1
   709 :Read8 [E],[A],1
   710 :StoreRegOnStackSub8 [F],4
   711 :equalto8 [B],[A],[F]
   712 :StoreRegOnStackSub8 [F],3
   713 :GetFromStackSub8 [F],4
   714 :GetFromStackSub8 [A],3

   //File:/Graphics/Color.uc
   //Line:37

   715 :LAnd8 [F],[A],[F]
   716 :StoreRegToReg64 [D],[A]
   717 :StoreFromPtrToReg8 [A],[B]
   718 :StoreFromPtrToReg8 [E],[A]

   //Line:38

   719 :StoreRegOnStackSub8 [F],2
   720 :equalto8 [B],[A],[F]
   721 :StoreRegOnStackSub8 [F],1
   722 :GetFromStackSub8 [F],2

   //Line:39

   723 :GetFromStackSub8 [A],1
   724 :LAnd8 [F],[A],[F]
   725 :Store64 [A], 6
   729 :DecrementStackPointer [A]
   730 :Debug_FuncEnd 

   //StackFrameSize:16

   731 :Ret 
---ULang:Color32:(&notequal&)^ULang:Color32&,ULang:Color32&imut: 
   732 :Debug_FuncStart 
   733 :Debug_LineEnter 

   //File:/Graphics/Color.uc
   //Line:0

   734 :StoreRegToReg64 [D],[A]
   735 :StoreRegToReg64 [A],[B]

   //Line:43

   736 :StoreRegToReg64 [E],[C]
   737 :StoreRegToReg64 [A],[D]
   738 :StoreRegToReg64 [C],[E]
   739 :Call {ULang:Color32:(&equal&)^ULang:Color32&,ULang:Color32&imut}
   743 :LNot8 [F],[A]
   744 :StoreRegToReg8 [A],[F]
   745 :Debug_FuncEnd 
   746 :Ret 
---ULang:Color32:(&Cast&)^ULang:Color32&imut: 
   747 :Store64 [A], 36
   751 :IncrementStackPointer [A]
   752 :Debug_FuncStart 
   753 :Debug_LineEnter 
   754 :GetPointerOfStackSub [A],36
   755 :Debug_LineEnter 
   756 :StoreFromPtrToReg8 [D],[B]
   757 :UInt8ToUInt16 [B],[C]
   758 :UInt16ToUInt32 [C],[C]
   759 :SInt32Tofloat32 [C],[E]
   760 :Storef32 [F], 255.000000

   //StackFrameSize:6

   762 :StoreRegOnStackSub32 [F],20
   763 :GetFromStackSub32 [F],20
   764 :Divf32 [E],[F],[F]
   765 :Read8 [D],[B],1

   //File:/Graphics/Color.uc
   //Line:46

   766 :UInt8ToUInt16 [B],[C]
   767 :UInt16ToUInt32 [C],[C]
   768 :SInt32Tofloat32 [C],[B]
   769 :Storef32 [C], 255.000000
   771 :StoreRegOnStackSub32 [F],16
   772 :Divf32 [B],[C],[F]
   773 :Read8 [D],[B],2
   774 :UInt8ToUInt16 [B],[C]
   775 :UInt16ToUInt32 [C],[C]
   776 :SInt32Tofloat32 [C],[B]
   777 :Storef32 [C], 255.000000
   779 :StoreRegOnStackSub32 [F],12
   780 :Divf32 [B],[C],[F]
   781 :Read8 [D],[B],3
   782 :UInt8ToUInt16 [B],[C]
   783 :UInt16ToUInt32 [C],[C]
   784 :SInt32Tofloat32 [C],[B]
   785 :Storef32 [C], 255.000000
   787 :StoreRegOnStackSub32 [F],8
   788 :Divf32 [B],[C],[F]
   789 :StoreRegToReg64 [A],[D]
   790 :GetFromStackSub32 [E],16
   791 :StoreRegOnStackSub32 [F],4
   792 :GetFromStackSub32 [F],12
   793 :GetFromStackSub32 [A],8
   794 :Push32 [A]
   795 :GetFromStackSub32 [A],8
   796 :Push32 [A]
   797 :Call {ULang:Color:(&_new&)^ULang:Color&,f32,f32,f32,f32}
   801 :Pop64 [A]
   802 :GetPointerOfStackSub [A],36
   803 :StoreRegToReg64 [A],[F]
   804 :Store64 [A], 36

   //File:/Graphics/Color.uc
   //Line:49

   808 :DecrementStackPointer [A]
   809 :Debug_FuncEnd 
   810 :Ret 
---ULang:Compiler:Is64Bit: 
   811 :Debug_FuncStart 
   812 :Debug_LineEnter 
   813 :Store8 [A],1
   814 :StoreRegToReg8 [A],[F]
   815 :Debug_FuncEnd 
   816 :Ret 
---ULang:Compiler:Is32Bit: 
   817 :Debug_FuncStart 
   818 :Debug_LineEnter 
   819 :Store8 [A],1

   //StackFrameSize:19

   820 :StoreRegToReg8 [A],[F]
   821 :Debug_FuncEnd 
   822 :Ret 
---ULang:Compiler:IsBackendC89: 

   //File:/Graphics/Color.uc
   //Line:0

   823 :Debug_FuncStart 
   824 :Debug_LineEnter 

   //Line:52

   825 :Store8 [A],1
   826 :StoreRegToReg8 [A],[F]
   827 :Debug_FuncEnd 
   828 :Ret 
---ULang:Compiler:IsBackendUCodeVM: 
   829 :Debug_FuncStart 
   830 :Debug_LineEnter 
   831 :Store8 [A],1
   832 :StoreRegToReg8 [A],[F]
   833 :Debug_FuncEnd 
   834 :Ret 
---ULang:Compiler:IsBackendWasm: 
   835 :Debug_FuncStart 
   836 :Debug_LineEnter 
   837 :Store8 [A],1
   838 :StoreRegToReg8 [A],[F]
   839 :Debug_FuncEnd 
   840 :Ret 
---ULang:Compiler:IsBackendVM: 
   841 :Debug_FuncStart 
   842 :Debug_LineEnter 
   843 :Store8 [A],1
   844 :StoreRegToReg8 [A],[F]
   845 :Debug_FuncEnd 
   846 :Ret 
---ULang:Compiler:(&_new&)^ULang:Compiler&: 
   847 :Debug_FuncStart 
   848 :Debug_FuncEnd 
   849 :Ret 
---ULang:Empty:(&_new&)^ULang:Empty&: 
   850 :Debug_FuncStart 
   851 :Debug_FuncEnd 
   852 :Ret 
---ULang:LowLevel:Malloc^uptr: 
   853 :Debug_FuncStart 
   854 :Debug_LineEnter 
   855 :StoreRegToReg64 [D],[A]
   856 :StoreRegToReg64 [A],[D]
   857 :Call {ULang:Native:OS_Malloc^uptr}
   861 :Debug_FuncEnd 
   862 :Ret 
---ULang:LowLevel:Free^u8[&]: 
   863 :Debug_FuncStart 
   864 :Debug_LineEnter 
   865 :StoreRegToReg64 [D],[A]
   866 :StoreRegToReg64 [A],[D]
   867 :Call {ULang:Native:OS_Free^u8[&]}
   871 :Debug_FuncEnd 
   872 :Ret 
---ULang:LowLevel:Memcopy^u8[&],u8[&],uptr: 
   873 :Debug_FuncStart 
   874 :Debug_FuncEnd 
   875 :Ret 
---ULang:LowLevel:Memmove^u8[&],u8[&],uptr: 
   876 :Debug_FuncStart 
   877 :Debug_FuncEnd 
   878 :Ret 
---ULang:LowLevel:(&_new&)^ULang:LowLevel&: 
   879 :Debug_FuncStart 
   880 :Debug_FuncEnd 
   881 :Ret 
---ULang:Math:(&_new&)^ULang:Math&: 
   882 :Debug_FuncStart 
   883 :Debug_FuncEnd 

   //File:/Graphics/Color32.uc
   //Line:3

   884 :Ret 
---ULang:Fmt:Print^c: 
   885 :Debug_FuncStart 
   886 :Debug_LineEnter 

   //Line:4

   887 :StoreRegToReg8 [D],[A]
   888 :StoreRegToReg8 [A],[D]
   889 :Call {ULang:Native:OS_PrintChar^c}
   893 :Debug_FuncEnd 
   894 :Ret 
---ULang:Fmt:Print^ULang:StringSpan_t<char>imut: 
   895 :Debug_FuncStart 
   896 :Debug_LineEnter 
   897 :GetPointerOfStackSub [A],24
   898 :StoreRegToReg64 [A],[D]
   899 :Call {ULang:StringSpan_t<char>:Data^ULang:StringSpan_t<char>&}
   903 :GetPointerOfStackSub [A],24
   904 :StoreRegToReg64 [A],[D]
   905 :StoreRegToReg64 [F],[B]
   906 :Push64 [B]
   907 :Call {ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut}
   911 :Pop64 [B]
   912 :StoreRegToReg64 [B],[D]
   913 :StoreRegToReg64 [F],[E]
   914 :Call {ULang:Native:OS_PrintSpan^c[&]imut,uptr}

   //File:/Graphics/Color32.uc
   //Line:9

   918 :Debug_FuncEnd 
   919 :Ret 
---ULang:Fmt:Print^ULang:String_t<char>&imut: 
   920 :Store64 [A], 16
   924 :IncrementStackPointer [A]
   925 :Debug_FuncStart 

   //Line:11

   926 :Debug_LineEnter 
   927 :StoreRegToReg64 [D],[A]
   928 :StoreRegToReg64 [A],[D]
   929 :Call {ULang:String_t<char>:iStr^ULang:String_t<char>&imut}
   933 :StoreFromPtrToReg64 [F],[A]
   934 :StoreRegOnStackSub64 [A],16
   935 :Read64 [F],[A],8

   //File:/Graphics/Color32.uc
   //Line:14

   936 :StoreRegOnStackSub64 [A],8
   937 :GetFromStackSub64 [A],16
   938 :Push64 [A]
   939 :GetFromStackSub64 [A],16
   940 :Push64 [A]
   941 :Call {ULang:Fmt:Print^ULang:StringSpan_t<char>imut}
   945 :Pop64 [A]
   946 :Pop64 [A]
   947 :Store64 [A], 16
   951 :DecrementStackPointer [A]
   952 :Debug_FuncEnd 
   953 :Ret 
---ULang:Fmt:Println^c: 
   954 :Debug_FuncStart 
   955 :Debug_LineEnter 
   956 :StoreRegToReg8 [D],[A]
   957 :StoreRegToReg8 [A],[D]
   958 :Call {ULang:Fmt:Print^c}
   962 :Debug_LineEnter 
   963 :Store8 [A],10
   964 :StoreRegToReg8 [A],[D]
   965 :Call {ULang:Fmt:Print^c}

   //File:/Graphics/Color32.uc
   //Line:17

   969 :Debug_FuncEnd 
   970 :Ret 
---ULang:Fmt:Println^ULang:StringSpan_t<char>imut: 
   971 :Debug_FuncStart 
   972 :Debug_LineEnter 
   973 :GetFromStackSub64 [A],16
   974 :StoreRegOnStackSub64 [A],16
   975 :GetFromStackSub64 [A],24
   976 :StoreRegOnStackSub64 [A],24
   977 :GetFromStackSub64 [A],16
   978 :Push64 [A]
   979 :GetFromStackSub64 [A],16
   980 :Push64 [A]

   //StackFrameSize:28

   981 :Call {ULang:Fmt:Print^ULang:StringSpan_t<char>imut}
   985 :Pop64 [A]

   //Line:20

   986 :Pop64 [A]
   987 :Debug_LineEnter 
   988 :Store8 [A],10
   989 :StoreRegToReg8 [A],[D]
   990 :Call {ULang:Fmt:Print^c}
   994 :Debug_FuncEnd 
   995 :Ret 
---ULang:Fmt:Println^ULang:String_t<char>&imut: 
   996 :Debug_FuncStart 
   997 :Debug_LineEnter 
   998 :StoreRegToReg64 [D],[A]
   999 :StoreRegToReg64 [A],[D]
   1000 :Call {ULang:Fmt:Print^ULang:String_t<char>&imut}
   1004 :Debug_LineEnter 
   1005 :Store8 [A],10
   1006 :StoreRegToReg8 [A],[D]
   1007 :Call {ULang:Fmt:Print^c}
   1011 :Debug_FuncEnd 
   1012 :Ret 
---ULang:Fmt:(&_new&)^ULang:Fmt&: 
   1013 :Debug_FuncStart 
   1014 :Debug_FuncEnd 
   1015 :Ret 
---ULang:OpenedFile:(&_new&)^ULang:OpenedFile&: 
   1016 :Debug_FuncStart 
   1017 :Debug_FuncEnd 
   1018 :Ret 
---ULang:OpenFileError:(&_new&)^ULang:OpenFileError&: 
   1019 :Debug_FuncStart 
   1020 :Debug_FuncEnd 
   1021 :Ret 
---ULang:File:Open^ULang:StringSpan_t<char>: 
   1022 :Debug_FuncStart 
   1023 :Debug_FuncEnd 
   1024 :Ret 
---ULang:File:Open^ULang:String_t<char>&imut: 
   1025 :Debug_FuncStart 
   1026 :Debug_FuncEnd 
   1027 :Ret 
---ULang:File:GetString^ULang:StringSpan_t<char>: 
   1028 :Debug_FuncStart 
   1029 :Debug_FuncEnd 
   1030 :Ret 
---ULang:File:GetString^ULang:String_t<char>&imut: 
   1031 :Debug_FuncStart 
   1032 :Debug_FuncEnd 
   1033 :Ret 
---ULang:File:GetBytes^ULang:StringSpan_t<char>: 
   1034 :Debug_FuncStart 
   1035 :Debug_FuncEnd 

   //File:/Graphics/Color32.uc
   //Line:23

   1036 :Ret 
---ULang:File:GetBytes^ULang:String_t<char>&imut: 
   1037 :Debug_FuncStart 
   1038 :Debug_FuncEnd 

   //Line:24

   1039 :Ret 
---ULang:File:(&_new&)^ULang:File&: 
   1040 :Debug_FuncStart 
   1041 :Debug_FuncEnd 

   //Line:25

   1042 :Ret 
---ULang:Writer:(&_new&)^ULang:Writer&: 
   1043 :Debug_FuncStart 
   1044 :Debug_FuncEnd 

   //Line:26

   1045 :Ret 
---ULang:Tests:Color1: 
   1046 :Store64 [A], 24
   1050 :IncrementStackPointer [A]
   1051 :Debug_FuncStart 
   1052 :Debug_LineEnter 
   1053 :Debug_LineEnter 
   1054 :GetPointerOfStackSub [A],24
   1055 :StoreRegToReg64 [A],[D]
   1056 :Call {ULang:Color:(&_new&)^ULang:Color&}
   1060 :Debug_LineEnter 
   1061 :Debug_LineEnter 
   1062 :GetPointerOfStackSub [A],24
   1063 :StoreRegToReg64 [A],[D]
   1064 :Call {ULang:Color:(&Cast&)^ULang:Color&imut}
   1068 :StoreRegToReg32 [F],[A]
   1069 :StoreRegOnStackSub32 [A],8
   1070 :Debug_LineEnter 
   1071 :GetPointerOfStackSub [A],8
   1072 :GetPointerOfStackSub [B],4

   //File:/Graphics/Color32.uc
   //Line:30

   1073 :StoreRegToReg64 [B],[D]
   1074 :Push64 [A]
   1075 :Call {ULang:Color32:(&_new&)^ULang:Color32&}
   1079 :Pop64 [A]
   1080 :GetPointerOfStackSub [B],4

   //Line:32

   1081 :StoreRegToReg64 [A],[D]
   1082 :StoreRegToReg64 [B],[E]
   1083 :Call {ULang:Color32:(&equal&)^ULang:Color32&,ULang:Color32&imut}

   //Line:33

   1087 :Store64 [A], 24
   1091 :DecrementStackPointer [A]
   1092 :Debug_FuncEnd 
   1093 :Ret 
---ULang:Tests:Color2: 
   1094 :Store64 [A], 52
   1098 :IncrementStackPointer [A]
   1099 :Debug_FuncStart 
   1100 :Debug_LineEnter 
   1101 :Debug_LineEnter 
   1102 :GetPointerOfStackSub [A],52
   1103 :StoreRegToReg64 [A],[D]
   1104 :Call {ULang:Color32:(&_new&)^ULang:Color32&}
   1108 :Debug_LineEnter 

   //File:/Graphics/Color32.uc
   //Line:36

   1109 :Debug_LineEnter 
   1110 :GetPointerOfStackSub [A],52
   1111 :StoreRegToReg64 [A],[D]
   1112 :Call {ULang:Color32:(&Cast&)^ULang:Color32&imut}
   1116 :StoreFromPtrToReg64 [F],[A]

   //Line:38

   1117 :StoreRegOnStackSub64 [A],48
   1118 :Read64 [F],[A],8
   1119 :StoreRegOnStackSub64 [A],40
   1120 :GetFromStackSub64 [A],48

   //Line:39

   1121 :StoreRegOnStackSub64 [A],32
   1122 :GetFromStackSub64 [A],40
   1123 :StoreRegOnStackSub64 [A],24
   1124 :Debug_LineEnter 

   //StackFrameSize:4

   1125 :GetPointerOfStackSub [A],32
   1126 :GetPointerOfStackSub [B],16
   1127 :StoreRegToReg64 [B],[D]

   //File:/Graphics/Color32.uc
   //Line:0

   1128 :Push64 [A]
   1129 :Call {ULang:Color:(&_new&)^ULang:Color&}
   1133 :Pop64 [A]
   1134 :GetPointerOfStackSub [B],16
   1135 :StoreRegToReg64 [A],[D]
   1136 :StoreRegToReg64 [B],[E]
   1137 :Call {ULang:Color:(&equal&)^ULang:Color&,ULang:Color&imut}
   1141 :Store64 [A], 52
   1145 :DecrementStackPointer [A]
   1146 :Debug_FuncEnd 
   1147 :Ret 
---ULang:Tests:Print1: 
   1148 :Store64 [A], 16
   1152 :IncrementStackPointer [A]
   1153 :Debug_FuncStart 
   1154 :Debug_LineEnter 

   //StackFrameSize:6

   1155 :GetPointerOfStaticMem [A],0
   1156 :Store64 [B], 11
   1160 :GetPointerOfStackSub [C],16
   1161 :StoreRegToReg64 [C],[D]
   1162 :StoreRegToReg64 [A],[E]
   1163 :StoreRegToReg64 [B],[F]
   1164 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1168 :GetFromStackSub64 [A],16
   1169 :Push64 [A]
   1170 :GetFromStackSub64 [A],16
   1171 :Push64 [A]
   1172 :Call {ULang:Fmt:Println^ULang:StringSpan_t<char>imut}
   1176 :Pop64 [A]
   1177 :Pop64 [A]
   1178 :Debug_LineEnter 
   1179 :Store8 [A],1
   1180 :StoreRegToReg8 [A],[F]
   1181 :Store64 [B], 16
   1185 :DecrementStackPointer [B]
   1186 :Debug_FuncEnd 
   1187 :Ret 
---ULang:Tests:Print2: 
   1188 :Debug_FuncStart 
   1189 :Debug_LineEnter 
   1190 :Store8 [A],72
   1191 :StoreRegToReg8 [A],[D]
   1192 :Call {ULang:Fmt:Print^c}
   1196 :Debug_LineEnter 
   1197 :Store8 [A],105
   1198 :StoreRegToReg8 [A],[D]
   1199 :Call {ULang:Fmt:Println^c}
   1203 :Debug_LineEnter 
   1204 :Store8 [A],1
   1205 :StoreRegToReg8 [A],[F]
   1206 :Debug_FuncEnd 
   1207 :Ret 
---ULang:Tests:Max_1: 
   1208 :Debug_FuncStart 
   1209 :Debug_LineEnter 
   1210 :Store32 [A], 5
   1212 :Store32 [B], 2
   1214 :StoreRegToReg32 [A],[D]
   1215 :StoreRegToReg32 [B],[E]

   //File:/Graphics/Color32.uc
   //Line:0

   1216 :Call {ULang:Math:Max<sint32>^i32,i32}
   1220 :Store32 [A], 5
   1222 :StoreRegToReg32 [F],[B]
   1223 :equalto32 [B],[A],[F]
   1224 :Debug_FuncEnd 
   1225 :Ret 
---ULang:Tests:Max_2: 
   1226 :Debug_FuncStart 
   1227 :Debug_LineEnter 
   1228 :Store32 [A], 2
   1230 :Store32 [B], 5
   1232 :StoreRegToReg32 [A],[D]
   1233 :StoreRegToReg32 [B],[E]
   1234 :Call {ULang:Math:Max<sint32>^i32,i32}
   1238 :Store32 [A], 5
   1240 :StoreRegToReg32 [F],[B]
   1241 :equalto32 [B],[A],[F]
   1242 :Debug_FuncEnd 
   1243 :Ret 
---ULang:Tests:Min_1: 
   1244 :Debug_FuncStart 
   1245 :Debug_LineEnter 
   1246 :Store32 [A], 5
   1248 :Store32 [B], 2
   1250 :StoreRegToReg32 [A],[D]
   1251 :StoreRegToReg32 [B],[E]
   1252 :Call {ULang:Math:Min<sint32>^i32,i32}
   1256 :Store32 [A], 2
   1258 :StoreRegToReg32 [F],[B]
   1259 :equalto32 [B],[A],[F]
   1260 :Debug_FuncEnd 
   1261 :Ret 
---ULang:Tests:Min_2: 
   1262 :Debug_FuncStart 
   1263 :Debug_LineEnter 
   1264 :Store32 [A], 2
   1266 :Store32 [B], 5
   1268 :StoreRegToReg32 [A],[D]
   1269 :StoreRegToReg32 [B],[E]
   1270 :Call {ULang:Math:Min<sint32>^i32,i32}
   1274 :Store32 [A], 2
   1276 :StoreRegToReg32 [F],[B]
   1277 :equalto32 [B],[A],[F]

   //File:/Helper/Compiler.uc
   //Line:3

   1278 :Debug_FuncEnd 
   1279 :Ret 
---ULang:Tests:Ptr_1: 
   1280 :Store64 [A], 12

   //File:/Helper/Compiler.uc
   //Line:4

   1284 :IncrementStackPointer [A]
   1285 :Debug_FuncStart 
   1286 :Debug_LineEnter 
   1287 :Store32 [A], 5
   1289 :StoreRegToReg32 [A],[C]

   //File:/Helper/Compiler.uc
   //Line:6

   1290 :StoreRegToReg32 [C],[B]
   1291 :Debug_LineEnter 
   1292 :StoreRegToReg32 [B],[C]
   1293 :StoreRegOnStackSub32 [C],12
   1294 :GetPointerOfStackSub [C],12
   1295 :StoreRegToReg64 [C],[D]

   //File:/Helper/Compiler.uc
   //Line:7

   1296 :Call {ULang:ptr<sint32>^i32&}
   1300 :StoreRegToReg64 [F],[A]
   1301 :StoreRegOnStackSub64 [A],8

   //File:/Helper/Compiler.uc
   //Line:8

   1302 :Debug_LineEnter 
   1303 :Store32 [A], 10
   1305 :GetPointerOfStackSub [B],8
   1306 :StoreRegToReg64 [B],[D]
   1307 :Push32 [A]

   //File:/Helper/Compiler.uc
   //Line:10

   1308 :Call {ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&}
   1312 :Pop32 [A]
   1313 :StoreRegToPtr32 [A],[F]
   1314 :Debug_LineEnter 
   1315 :GetFromStackSub32 [B],12
   1316 :StoreRegOnStackSub32 [B],12
   1317 :Store32 [B], 10
   1319 :GetFromStackSub32 [C],12

   //File:/Helper/LowLevel.uc
   //Line:3

   1320 :equalto32 [C],[B],[F]
   1321 :Store64 [C], 12
   1325 :DecrementStackPointer [C]
   1326 :Debug_FuncEnd 
   1327 :Ret 
---ULang:Tests:Ptr_2: 
   1328 :Store64 [A], 16
   1332 :IncrementStackPointer [A]
   1333 :Debug_FuncStart 
   1334 :Debug_LineEnter 
   1335 :Store32 [A], 5
   1337 :StoreRegToReg32 [A],[C]
   1338 :StoreRegToReg32 [C],[B]
   1339 :Debug_LineEnter 
   1340 :StoreRegToReg32 [B],[C]
   1341 :StoreRegOnStackSub32 [C],16
   1342 :GetPointerOfStackSub [C],16
   1343 :StoreRegToReg64 [C],[D]
   1344 :Call {ULang:ptr<sint32>^i32&}
   1348 :StoreRegToReg64 [F],[A]
   1349 :StoreRegOnStackSub64 [A],12
   1350 :Debug_LineEnter 
   1351 :GetPointerOfStackSub [A],12

   //File:/IO/Console/Fmt.uc
   //Line:5

   1352 :Store32 [B], 10
   1354 :StoreRegToReg32 [B],[C]
   1355 :StoreRegOnStackSub32 [C],4
   1356 :GetPointerOfStackSub [C],4
   1357 :StoreRegToReg64 [A],[D]
   1358 :StoreRegToReg64 [C],[E]
   1359 :Call {ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32&imut}
   1363 :Debug_LineEnter 
   1364 :GetFromStackSub32 [A],16
   1365 :StoreRegOnStackSub32 [A],16
   1366 :Store32 [A], 10
   1368 :GetFromStackSub32 [B],16
   1369 :equalto32 [B],[A],[F]
   1370 :Store64 [B], 16
   1374 :DecrementStackPointer [B]
   1375 :Debug_FuncEnd 
   1376 :Ret 
---ULang:Tests:Ptr_3: 
   1377 :Store64 [A], 20
   1381 :IncrementStackPointer [A]
   1382 :Debug_FuncStart 
   1383 :Debug_LineEnter 

   //StackFrameSize:16

   1384 :Store32 [A], 5
   1386 :StoreRegToReg32 [A],[C]

   //File:/IO/Console/Fmt.uc
   //Line:12

   1387 :StoreRegToReg32 [C],[B]
   1388 :Debug_LineEnter 
   1389 :Store32 [C], 8
   1391 :StoreRegToReg32 [C],[E]
   1392 :StoreRegToReg32 [E],[D]
   1393 :Debug_LineEnter 
   1394 :StoreRegToReg32 [B],[E]
   1395 :StoreRegOnStackSub32 [E],20
   1396 :GetPointerOfStackSub [E],20
   1397 :StoreRegToReg32 [D],[B]
   1398 :StoreRegToReg64 [E],[D]
   1399 :Push32 [B]
   1400 :Call {ULang:ptr<sint32>^i32&}
   1404 :Pop32 [B]
   1405 :StoreRegToReg64 [F],[A]
   1406 :StoreRegOnStackSub64 [A],16
   1407 :Debug_LineEnter 
   1408 :GetPointerOfStackSub [A],16
   1409 :StoreRegToReg32 [B],[C]
   1410 :StoreRegOnStackSub32 [C],8
   1411 :GetPointerOfStackSub [C],8
   1412 :StoreRegToReg64 [A],[D]
   1413 :StoreRegToReg64 [C],[E]
   1414 :Call {ULang:Ptr<sint32>:ReassignTo^ULang:Ptr<sint32>&,i32&}
   1418 :Debug_LineEnter 

   //File:/IO/Console/Fmt.uc
   //Line:15

   1419 :GetPointerOfStackSub [A],16
   1420 :Store32 [B], 7
   1422 :StoreRegToReg32 [B],[C]
   1423 :StoreRegOnStackSub32 [C],4
   1424 :GetPointerOfStackSub [C],4
   1425 :StoreRegToReg64 [A],[D]

   //Line:16

   1426 :StoreRegToReg64 [C],[E]
   1427 :Call {ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32&imut}
   1431 :Debug_LineEnter 
   1432 :GetFromStackSub32 [A],8
   1433 :StoreRegOnStackSub32 [A],8
   1434 :Store32 [A], 7

   //File:/IO/Console/Fmt.uc
   //Line:19

   1436 :GetFromStackSub32 [B],8
   1437 :equalto32 [B],[A],[F]
   1438 :Store64 [B], 20
   1442 :DecrementStackPointer [B]
   1443 :Debug_FuncEnd 
   1444 :Ret 
---ULang:Tests:Ptr_4: 
   1445 :Store64 [A], 12
   1449 :IncrementStackPointer [A]
   1450 :Debug_FuncStart 

   //Line:20

   1451 :Debug_LineEnter 
   1452 :Store32 [A], 5
   1454 :StoreRegToReg32 [A],[C]
   1455 :StoreRegToReg32 [C],[B]
   1456 :Debug_LineEnter 
   1457 :StoreRegToReg32 [B],[C]
   1458 :StoreRegOnStackSub32 [C],12
   1459 :GetPointerOfStackSub [C],12
   1460 :StoreRegToReg64 [C],[D]

   //File:/IO/Console/Fmt.uc
   //Line:23

   1461 :Call {ULang:ptr<sint32>^i32&}
   1465 :StoreRegToReg64 [F],[A]
   1466 :StoreRegOnStackSub64 [A],8
   1467 :Debug_LineEnter 

   //Line:24

   1468 :GetFromStackSub32 [A],12
   1469 :StoreRegOnStackSub32 [A],12
   1470 :Store32 [A], 5
   1472 :GetFromStackSub32 [B],12
   1473 :Add32 [B],[A],[F]
   1474 :StoreRegToReg32 [F],[B]
   1475 :StoreRegOnStackSub32 [B],12
   1476 :Debug_LineEnter 
   1477 :GetPointerOfStackSub [B],8
   1478 :StoreRegToReg64 [B],[D]
   1479 :Call {ULang:Ptr<sint32>:ReadPtr^ULang:Ptr<sint32>&imut}
   1483 :StoreFromPtrToReg64 [F],[A]
   1484 :Store32 [B], 10
   1486 :equalto32 [A],[B],[F]
   1487 :Store64 [C], 12
   1491 :DecrementStackPointer [C]
   1492 :Debug_FuncEnd 
   1493 :Ret 
---ULang:Tests:Ptr_5: 
   1494 :Store64 [A], 32
   1498 :IncrementStackPointer [A]
   1499 :Debug_FuncStart 
   1500 :Debug_LineEnter 
   1501 :Debug_LineEnter 
   1502 :GetPointerOfStackSub [A],32
   1503 :Debug_LineEnter 
   1504 :Storef32 [B], 8.000000
   1506 :Storef32 [C], 6.000000

   //StackFrameSize:24

   1508 :StoreRegToReg64 [A],[D]
   1509 :StoreRegToReg32 [B],[E]
   1510 :StoreRegToReg32 [C],[F]

   //File:/Tests/Color.uc
   //Line:4

   1511 :Call {ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&,f32,f32}
   1515 :Debug_LineEnter 
   1516 :GetPointerOfStackSub [A],32
   1517 :StoreRegToReg64 [A],[D]
   1518 :Call {ULang:ptr<ULang:Vec2f_t<float32>>^ULang:Vec2f_t<float32>&}
   1522 :StoreRegToReg64 [F],[A]
   1523 :StoreRegOnStackSub64 [A],24
   1524 :Debug_LineEnter 
   1525 :Storef32 [A], 5.000000
   1527 :GetPointerOfStackSub [B],24
   1528 :Debug_LineEnter 

   //Line:6

   1529 :StoreRegToReg64 [B],[D]
   1530 :Push32 [A]
   1531 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&}
   1535 :Pop32 [A]
   1536 :StoreRegToPtr32 [A],[F]
   1537 :Debug_LineEnter 
   1538 :Storef32 [B], 8.000000
   1540 :GetPointerOfStackSub [C],24
   1541 :Debug_LineEnter 
   1542 :StoreRegToReg64 [C],[D]
   1543 :Push32 [B]
   1544 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&}
   1548 :Pop32 [B]
   1549 :Load32 [F],[B],4
   1550 :Debug_LineEnter 
   1551 :GetPointerOfStackSub [A],32
   1552 :GetPointerOfStackSub [C],16
   1553 :Storef32 [D], 5.000000
   1555 :Storef32 [E], 8.000000

   //File:/Tests/Color.uc
   //Line:10

   1557 :StoreRegOnStackSub32 [D],8

   //Line:0

   1558 :StoreRegToReg64 [C],[D]
   1559 :StoreRegOnStackSub32 [E],4
   1560 :GetFromStackSub32 [E],8
   1561 :GetFromStackSub32 [F],4
   1562 :Push64 [A]
   1563 :Call {ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&,f32,f32}
   1567 :Pop64 [A]
   1568 :GetPointerOfStackSub [B],16
   1569 :StoreRegToReg64 [A],[D]
   1570 :StoreRegToReg64 [B],[E]
   1571 :Call {ULang:Vec2f_t<float32>:(&equal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut}
   1575 :Store64 [A], 32
   1579 :DecrementStackPointer [A]
   1580 :Debug_FuncEnd 

   //Line:12

   1581 :Ret 
---ULang:Tests:StringSpan_1: 
   1582 :Store64 [A], 16
   1586 :IncrementStackPointer [A]
   1587 :Debug_FuncStart 
   1588 :Debug_LineEnter 
   1589 :GetPointerOfStaticMem [A],11
   1590 :Store64 [B], 5
   1594 :GetPointerOfStackSub [C],16
   1595 :StoreRegToReg64 [C],[D]
   1596 :StoreRegToReg64 [A],[E]
   1597 :StoreRegToReg64 [B],[F]
   1598 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1602 :GetPointerOfStackSub [A],16
   1603 :StoreRegToReg64 [A],[D]
   1604 :Call {ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut}
   1608 :Store64 [A], 5
   1612 :StoreRegToReg64 [F],[B]
   1613 :equalto64 [B],[A],[F]
   1614 :Store64 [C], 16
   1618 :DecrementStackPointer [C]
   1619 :Debug_FuncEnd 
   1620 :Ret 
---ULang:Tests:StringSpan_2: 
   1621 :Store64 [A], 32
   1625 :IncrementStackPointer [A]
   1626 :Debug_FuncStart 
   1627 :Debug_LineEnter 
   1628 :GetPointerOfStaticMem [A],11
   1629 :Store64 [B], 5

   //Line:8

   1633 :GetPointerOfStackSub [C],32
   1634 :StoreRegToReg64 [C],[D]
   1635 :StoreRegToReg64 [A],[E]
   1636 :StoreRegToReg64 [B],[F]
   1637 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1641 :GetPointerOfStackSub [A],32
   1642 :GetPointerOfStaticMem [B],16
   1643 :Store64 [C], 5

   //File:/Tests/IO.uc
   //Line:12

   1647 :GetPointerOfStackSub [D],16
   1648 :StoreRegToReg64 [D],[E]
   1649 :StoreRegToReg64 [E],[D]
   1650 :StoreRegToReg64 [B],[E]
   1651 :StoreRegToReg64 [C],[F]
   1652 :Push64 [A]
   1653 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1657 :Pop64 [A]
   1658 :GetPointerOfStackSub [B],16
   1659 :StoreRegToReg64 [A],[D]
   1660 :StoreRegToReg64 [B],[E]

   //Line:14

   1661 :Call {ULang:StringSpan_t<char>:(&notequal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut}
   1665 :Store64 [A], 32
   1669 :DecrementStackPointer [A]
   1670 :Debug_FuncEnd 
   1671 :Ret 
---ULang:Tests:StringSpan_3: 
   1672 :Store64 [A], 32
   1676 :IncrementStackPointer [A]
   1677 :Debug_FuncStart 
   1678 :Debug_LineEnter 
   1679 :GetPointerOfStaticMem [A],11
   1680 :Store64 [B], 5
   1684 :GetPointerOfStackSub [C],32

   //File:/Tests/Math.uc
   //Line:11

   1685 :StoreRegToReg64 [C],[D]
   1686 :StoreRegToReg64 [A],[E]
   1687 :StoreRegToReg64 [B],[F]
   1688 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1692 :GetPointerOfStackSub [A],32
   1693 :GetPointerOfStaticMem [B],11
   1694 :Store64 [C], 5
   1698 :GetPointerOfStackSub [D],16
   1699 :StoreRegToReg64 [D],[E]
   1700 :StoreRegToReg64 [E],[D]
   1701 :StoreRegToReg64 [B],[E]
   1702 :StoreRegToReg64 [C],[F]

   //File:/Tests/Math.uc
   //Line:15

   1703 :Push64 [A]
   1704 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1708 :Pop64 [A]
   1709 :GetPointerOfStackSub [B],16
   1710 :StoreRegToReg64 [A],[D]
   1711 :StoreRegToReg64 [B],[E]
   1712 :Call {ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut}
   1716 :Store64 [A], 32
   1720 :DecrementStackPointer [A]

   //File:/Tests/Math.uc
   //Line:19

   1721 :Debug_FuncEnd 
   1722 :Ret 
---ULang:Tests:StringSpan_4: 
   1723 :Store64 [A], 88
   1727 :IncrementStackPointer [A]
   1728 :Debug_FuncStart 
   1729 :Debug_LineEnter 
   1730 :GetPointerOfStaticMem [A],11
   1731 :Store64 [B], 5
   1735 :GetPointerOfStackSub [C],88

   //StackFrameSize:12

   1736 :StoreRegToReg64 [C],[D]
   1737 :StoreRegToReg64 [A],[E]
   1738 :StoreRegToReg64 [B],[F]

   //File:/Tests/Ptr.uc
   //Line:6

   1739 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1743 :GetPointerOfStackSub [A],72

   //Line:7

   1744 :StoreRegToReg64 [A],[D]
   1745 :GetPointerOfStackSub [B],88
   1746 :StoreRegToReg64 [B],[E]
   1747 :Call {ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut}
   1751 :GetFromStackSub64 [A],72
   1752 :StoreRegOnStackSub64 [A],48
   1753 :GetFromStackSub64 [A],64
   1754 :StoreRegOnStackSub64 [A],40

   //Line:9

   1755 :GetFromStackSub64 [A],56
   1756 :StoreRegOnStackSub64 [A],32
   1757 :Debug_LineEnter 
   1758 :GetPointerOfStackSub [A],48
   1759 :GetPointerOfStaticMem [B],11
   1760 :Store64 [C], 5
   1764 :GetPointerOfStackSub [D],24
   1765 :StoreRegToReg64 [D],[E]
   1766 :StoreRegToReg64 [E],[D]

   //Line:12

   1767 :StoreRegToReg64 [B],[E]
   1768 :StoreRegToReg64 [C],[F]
   1769 :Push64 [A]
   1770 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1774 :Pop64 [A]
   1775 :StoreRegToReg64 [B],[C]
   1776 :StoreRegOnStackSub64 [C],8
   1777 :GetPointerOfStackSub [C],8
   1778 :StoreRegToReg64 [C],[B]
   1779 :StoreRegToReg64 [C],[D]
   1780 :GetPointerOfStackSub [E],24
   1781 :StoreRegToReg64 [E],[F]

   //StackFrameSize:16

   1782 :StoreRegToReg64 [F],[E]
   1783 :Push64 [A]
   1784 :Push64 [B]

   //File:/Tests/Ptr.uc
   //Line:16

   1785 :Call {ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut}
   1789 :Pop64 [B]

   //Line:17

   1790 :Pop64 [A]
   1791 :StoreRegToReg64 [A],[D]
   1792 :GetFromStackSub64 [E],8
   1793 :Call {ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut}
   1797 :Store64 [A], 88

   //Line:19

   1801 :DecrementStackPointer [A]
   1802 :Debug_FuncEnd 
   1803 :Ret 
---ULang:Tests:StringSpan_5: 
   1804 :Store64 [A], 88
   1808 :IncrementStackPointer [A]
   1809 :Debug_FuncStart 
   1810 :Debug_LineEnter 
   1811 :GetPointerOfStaticMem [A],16
   1812 :Store64 [B], 5
   1816 :GetPointerOfStackSub [C],88
   1817 :StoreRegToReg64 [C],[D]
   1818 :StoreRegToReg64 [A],[E]
   1819 :StoreRegToReg64 [B],[F]
   1820 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1824 :GetPointerOfStackSub [A],72
   1825 :StoreRegToReg64 [A],[D]
   1826 :GetPointerOfStackSub [B],88
   1827 :StoreRegToReg64 [B],[E]
   1828 :Call {ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut}

   //File:/Tests/Ptr.uc
   //Line:27

   1832 :GetFromStackSub64 [A],72
   1833 :StoreRegOnStackSub64 [A],48
   1834 :GetFromStackSub64 [A],64
   1835 :StoreRegOnStackSub64 [A],40
   1836 :GetFromStackSub64 [A],56

   //Line:28

   1837 :StoreRegOnStackSub64 [A],32
   1838 :Debug_LineEnter 
   1839 :GetPointerOfStackSub [A],48
   1840 :GetPointerOfStaticMem [B],11
   1841 :Store64 [C], 5
   1845 :GetPointerOfStackSub [D],24
   1846 :StoreRegToReg64 [D],[E]
   1847 :StoreRegToReg64 [E],[D]
   1848 :StoreRegToReg64 [B],[E]
   1849 :StoreRegToReg64 [C],[F]
   1850 :Push64 [A]
   1851 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   1855 :Pop64 [A]

   //Line:31

   1856 :StoreRegToReg64 [B],[C]
   1857 :StoreRegOnStackSub64 [C],8
   1858 :GetPointerOfStackSub [C],8
   1859 :StoreRegToReg64 [C],[B]
   1860 :StoreRegToReg64 [C],[D]
   1861 :GetPointerOfStackSub [E],24
   1862 :StoreRegToReg64 [E],[F]
   1863 :StoreRegToReg64 [F],[E]
   1864 :Push64 [A]
   1865 :Push64 [B]
   1866 :Call {ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut}
   1870 :Pop64 [B]
   1871 :Pop64 [A]
   1872 :StoreRegToReg64 [A],[D]
   1873 :GetFromStackSub64 [E],8
   1874 :Call {ULang:String_t<char>:(&notequal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut}
   1878 :Store64 [A], 88
   1882 :DecrementStackPointer [A]
   1883 :Debug_FuncEnd 
   1884 :Ret 
---ULang:Tests:Unique_ptr_1: 
   1885 :Store64 [A], 8
   1889 :IncrementStackPointer [A]
   1890 :Debug_FuncStart 
   1891 :Debug_LineEnter 
   1892 :Call {ULang:Unique_ptr<sint32>:Make}
   1896 :StoreRegToReg64 [F],[A]
   1897 :StoreRegOnStackSub64 [A],8

   //File:/Tests/Ptr.uc
   //Line:39

   1898 :Debug_LineEnter 
   1899 :GetPointerOfStackSub [A],8
   1900 :StoreRegToReg64 [A],[D]
   1901 :Call {ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&}
   1905 :StoreFromPtrToReg64 [F],[A]
   1906 :Store32 [B], 0
   1908 :equalto32 [A],[B],[F]
   1909 :Debug_LineEnter 
   1910 :GetPointerOfStackSub [C],8
   1911 :StoreRegToReg64 [C],[D]
   1912 :Call {ULang:Unique_ptr<sint32>:(&_drop&)^ULang:Unique_ptr<sint32>&}
   1916 :Store64 [A], 8
   1920 :DecrementStackPointer [A]
   1921 :Debug_FuncEnd 
   1922 :Ret 
---ULang:Tests:Unique_ptr_2: 

   //Line:44

   1923 :Debug_FuncStart 
   1924 :Debug_FuncEnd 
   1925 :Ret 
---ULang:Tests:Unique_ptr_3: 
   1926 :Debug_FuncStart 
   1927 :Debug_FuncEnd 
   1928 :Ret 
---ULang:Tests:Unique_ptr_4: 
   1929 :Debug_FuncStart 
   1930 :Debug_FuncEnd 
   1931 :Ret 
---ULang:Tests:Unique_ptr_5: 
   1932 :Debug_FuncStart 
   1933 :Debug_FuncEnd 
   1934 :Ret 
---ULang:Tests:Vector_1: 
   1935 :Store64 [A], 28
   1939 :IncrementStackPointer [A]
   1940 :Debug_FuncStart 
   1941 :Debug_LineEnter 

   //StackFrameSize:32

   1942 :Debug_LineEnter 
   1943 :GetPointerOfStackSub [A],28
   1944 :StoreRegToReg64 [A],[D]

   //File:/Tests/Ptr.uc
   //Line:50

   1945 :Call {ULang:Vector<sint32>:(&_new&)^ULang:Vector<sint32>&}
   1949 :Debug_LineEnter 
   1950 :Debug_LineEnter 
   1951 :GetPointerOfStackSub [A],28
   1952 :Store32 [B], 5
   1954 :StoreRegToReg32 [B],[C]
   1955 :StoreRegOnStackSub32 [C],4
   1956 :GetPointerOfStackSub [C],4
   1957 :StoreRegToReg64 [A],[D]
   1958 :StoreRegToReg64 [C],[E]
   1959 :Call {ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut}
   1963 :Debug_LineEnter 
   1964 :GetPointerOfStackSub [A],28
   1965 :Store64 [B], 0

   //Line:53

   1969 :StoreRegToReg64 [A],[D]
   1970 :StoreRegToReg64 [B],[E]
   1971 :Call {ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr}
   1975 :StoreFromPtrToReg64 [F],[A]
   1976 :Store32 [B], 5
   1978 :equalto32 [A],[B],[F]
   1979 :GetPointerOfStackSub [C],28
   1980 :StoreRegToReg64 [C],[D]
   1981 :StoreRegToReg8 [F],[E]

   //Line:54

   1982 :Push8 [E]
   1983 :Call {ULang:Vector<sint32>:Size^ULang:Vector<sint32>&imut}
   1987 :Pop8 [E]
   1988 :Store64 [A], 1
   1992 :StoreRegToReg64 [F],[B]
   1993 :equalto64 [B],[A],[F]
   1994 :StoreRegToReg8 [F],[C]

   //Line:57

   1995 :LAnd8 [E],[C],[F]
   1996 :Debug_LineEnter 
   1997 :GetPointerOfStackSub [D],28
   1998 :StoreRegToReg64 [D],[E]
   1999 :StoreRegToReg64 [E],[D]
   2000 :Call {ULang:Vector<sint32>:(&_drop&)^ULang:Vector<sint32>&}
   2004 :Store64 [A], 28
   2008 :DecrementStackPointer [A]
   2009 :Debug_FuncEnd 
   2010 :Ret 
---ULang:Tests:Vector_2: 
   2011 :Store64 [A], 80
   2015 :IncrementStackPointer [A]
   2016 :Debug_FuncStart 
   2017 :Debug_LineEnter 
   2018 :Debug_LineEnter 
   2019 :GetPointerOfStackSub [A],80
   2020 :StoreRegToReg64 [A],[D]
   2021 :Call {ULang:Vector<sint32>:(&_new&)^ULang:Vector<sint32>&}
   2025 :Debug_LineEnter 
   2026 :Debug_LineEnter 
   2027 :GetPointerOfStackSub [A],80

   //StackFrameSize:16

   2028 :Store32 [B], 5
   2030 :StoreRegToReg32 [B],[C]

   //File:/Tests/String.uc
   //Line:6

   2031 :StoreRegOnStackSub32 [C],56
   2032 :GetPointerOfStackSub [C],56
   2033 :StoreRegToReg64 [A],[D]
   2034 :StoreRegToReg64 [C],[E]
   2035 :Call {ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut}
   2039 :Debug_LineEnter 
   2040 :GetPointerOfStackSub [A],80
   2041 :Store32 [B], 15
   2043 :StoreRegToReg32 [B],[C]
   2044 :StoreRegOnStackSub32 [C],52
   2045 :GetPointerOfStackSub [C],52
   2046 :StoreRegToReg64 [A],[D]
   2047 :StoreRegToReg64 [C],[E]
   2048 :Call {ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut}
   2052 :Debug_LineEnter 
   2053 :Debug_LineEnter 
   2054 :Debug_LineEnter 
   2055 :GetPointerOfStackSub [A],80
   2056 :Store64 [B], 1
   2060 :Store64 [C], 2
   2064 :StoreRegToReg64 [B],[D]

   //StackFrameSize:32

   2065 :StoreRegToReg64 [C],[E]
   2066 :Push64 [A]
   2067 :Call {ULang:Range<uintptr>^uptr,uptr}
   2071 :Pop64 [A]
   2072 :StoreFromPtrToReg64 [F],[B]
   2073 :StoreRegOnStackSub64 [B],48
   2074 :Read64 [F],[B],8
   2075 :StoreRegOnStackSub64 [B],40
   2076 :StoreRegToReg64 [A],[D]
   2077 :GetFromStackSub64 [B],48
   2078 :Push64 [B]
   2079 :GetFromStackSub64 [B],48
   2080 :Push64 [B]
   2081 :Call {ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,ULang:Range_t<uintptr>}
   2085 :Pop64 [A]
   2086 :Pop64 [A]
   2087 :StoreFromPtrToReg64 [F],[A]
   2088 :StoreRegOnStackSub64 [A],32
   2089 :Read64 [F],[A],8
   2090 :StoreRegOnStackSub64 [A],24
   2091 :GetFromStackSub64 [A],32
   2092 :StoreRegOnStackSub64 [A],16
   2093 :GetFromStackSub64 [A],24
   2094 :StoreRegOnStackSub64 [A],8
   2095 :Debug_LineEnter 
   2096 :GetPointerOfStackSub [A],16
   2097 :Store64 [B], 0
   2101 :StoreRegToReg64 [A],[D]
   2102 :StoreRegToReg64 [B],[E]
   2103 :Call {ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,uptr}
   2107 :StoreFromPtrToReg64 [F],[A]
   2108 :Store32 [B], 15
   2110 :equalto32 [A],[B],[F]
   2111 :GetPointerOfStackSub [C],16
   2112 :StoreRegToReg64 [C],[D]
   2113 :StoreRegToReg8 [F],[E]

   //StackFrameSize:32

   2114 :Push8 [E]
   2115 :Call {ULang:Span<sint32>:Size^ULang:Span<sint32>&imut}
   2119 :Pop8 [E]
   2120 :Store64 [A], 1
   2124 :StoreRegToReg64 [F],[B]
   2125 :equalto64 [B],[A],[F]
   2126 :StoreRegToReg8 [F],[C]
   2127 :LAnd8 [E],[C],[F]
   2128 :Debug_LineEnter 
   2129 :GetPointerOfStackSub [D],80
   2130 :StoreRegToReg64 [D],[E]
   2131 :StoreRegToReg64 [E],[D]
   2132 :Call {ULang:Vector<sint32>:(&_drop&)^ULang:Vector<sint32>&}
   2136 :Store64 [A], 80
   2140 :DecrementStackPointer [A]
   2141 :Debug_FuncEnd 
   2142 :Ret 
---ULang:Future:(&_new&)^ULang:Future&: 
   2143 :Debug_FuncStart 
   2144 :Debug_FuncEnd 
   2145 :Ret 
---ULang:Thread:(&_new&)^ULang:Thread&: 
   2146 :Debug_FuncStart 
   2147 :Debug_FuncEnd 
   2148 :Ret 
---ULang:Path:(&_new&)^ULang:Path&: 
   2149 :Debug_FuncStart 
   2150 :Debug_FuncEnd 
   2151 :Ret 
---ULang:Mat4x4_t<float32>:(&_new&)^ULang:Mat4x4_t<float32>&: 
   2152 :Debug_FuncStart 
   2153 :Debug_FuncEnd 
   2154 :Ret 
---ULang:Range_t<uintptr>:(&_new&)^ULang:Range_t<uintptr>&: 
   2155 :Debug_FuncStart 
   2156 :Debug_LineEnter 
   2157 :Debug_LineEnter 
   2158 :Store64 [A], 0
   2162 :StoreRegToPtr64 [A],[D]

   //StackFrameSize:88

   2163 :Debug_LineEnter 
   2164 :Debug_LineEnter 
   2165 :Store64 [B], 0
   2169 :Load64 [D],[B],8
   2170 :Debug_FuncEnd 
   2171 :Ret 
---ULang:Range_t<uintptr>:(&_new&)^ULang:Range_t<uintptr>&,uptr,uptr: 
   2172 :Debug_FuncStart 
   2173 :Debug_LineEnter 
   2174 :StoreRegToReg64 [E],[A]
   2175 :StoreRegToPtr64 [A],[D]
   2176 :Debug_LineEnter 
   2177 :StoreRegToReg64 [F],[B]
   2178 :Load64 [D],[B],8
   2179 :Debug_FuncEnd 
   2180 :Ret 
---ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut: 
   2181 :Debug_FuncStart 
   2182 :Debug_LineEnter 
   2183 :StoreFromPtrToReg64 [D],[A]
   2184 :StoreRegToReg64 [A],[F]
   2185 :Debug_FuncEnd 
   2186 :Ret 
---ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut: 
   2187 :Debug_FuncStart 
   2188 :Debug_LineEnter 
   2189 :Read64 [D],[A],8
   2190 :StoreRegToReg64 [A],[F]
   2191 :Debug_FuncEnd 
   2192 :Ret 
---ULang:Span<char>:(&_new&)^ULang:Span<char>&: 
   2193 :Debug_FuncStart 

   //Line:19

   2194 :Debug_LineEnter 
   2195 :Store64 [A], 0
   2199 :StoreRegToPtr64 [A],[D]
   2200 :Debug_LineEnter 
   2201 :Store64 [B], 0
   2205 :Load64 [D],[B],8
   2206 :Debug_FuncEnd 
   2207 :Ret 
---ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr: 
   2208 :Debug_FuncStart 
   2209 :Debug_LineEnter 
   2210 :StoreRegToReg64 [E],[A]
   2211 :StoreRegToPtr64 [A],[D]
   2212 :Debug_LineEnter 
   2213 :StoreRegToReg64 [F],[B]
   2214 :Load64 [D],[B],8
   2215 :Debug_FuncEnd 
   2216 :Ret 
---ULang:Span<char>:Size^ULang:Span<char>&imut: 
   2217 :Debug_FuncStart 
   2218 :Debug_LineEnter 
   2219 :Read64 [D],[A],8
   2220 :StoreRegToReg64 [A],[F]
   2221 :Debug_FuncEnd 
   2222 :Ret 
---ULang:Span<char>:Data^ULang:Span<char>&: 
   2223 :Debug_FuncStart 
   2224 :Debug_LineEnter 
   2225 :StoreFromPtrToReg64 [D],[A]
   2226 :StoreRegToReg64 [A],[F]
   2227 :Debug_FuncEnd 
   2228 :Ret 
---ULang:Span<char>:iData^ULang:Span<char>&imut: 
   2229 :Debug_FuncStart 
   2230 :Debug_LineEnter 
   2231 :StoreFromPtrToReg64 [D],[A]
   2232 :StoreRegToReg64 [A],[F]
   2233 :Debug_FuncEnd 
   2234 :Ret 
---ULang:Span<char>:(&Index&)^ULang:Span<char>&,uptr: 
   2235 :Store64 [A], 8
   2239 :IncrementStackPointer [A]
   2240 :Debug_FuncStart 
   2241 :Debug_LineEnter 

   //StackFrameSize:88

   2242 :StoreFromPtrToReg64 [D],[A]
   2243 :StoreRegToReg64 [E],[B]
   2244 :Store64 [C], 1
   2248 :MultU64 [B],[C],[F]
   2249 :StoreRegOnStackSub64 [F],8
   2250 :GetFromStackSub64 [F],8
   2251 :Add64 [A],[F],[F]
   2252 :Store64 [A], 8
   2256 :DecrementStackPointer [A]
   2257 :Debug_FuncEnd 
   2258 :Ret 
---ULang:Span<char>:(&Index&)^ULang:Span<char>&imut,uptr: 
   2259 :Store64 [A], 8
   2263 :IncrementStackPointer [A]
   2264 :Debug_FuncStart 
   2265 :Debug_LineEnter 
   2266 :StoreFromPtrToReg64 [D],[A]
   2267 :StoreRegToReg64 [E],[B]
   2268 :Store64 [C], 1
   2272 :MultU64 [B],[C],[F]

   //Line:24

   2273 :StoreRegOnStackSub64 [F],8
   2274 :GetFromStackSub64 [F],8
   2275 :Add64 [A],[F],[F]
   2276 :Store64 [A], 8
   2280 :DecrementStackPointer [A]
   2281 :Debug_FuncEnd 
   2282 :Ret 
---ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>: 
   2283 :Store64 [A], 32
   2287 :IncrementStackPointer [A]
   2288 :Debug_FuncStart 
   2289 :Debug_LineEnter 
   2290 :GetPointerOfStackSub [A],32
   2291 :Debug_LineEnter 
   2292 :StoreFromPtrToReg64 [D],[B]
   2293 :GetPointerOfStackSub [C],56
   2294 :StoreRegToReg64 [C],[D]
   2295 :Push64 [A]
   2296 :Push64 [B]
   2297 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   2301 :Pop64 [B]
   2302 :Pop64 [A]
   2303 :Store64 [C], 1
   2307 :StoreRegToReg64 [F],[D]
   2308 :MultU64 [D],[C],[F]
   2309 :StoreRegToReg64 [F],[E]
   2310 :Add64 [B],[E],[F]
   2311 :GetPointerOfStackSub [B],56
   2312 :StoreRegToReg64 [B],[D]
   2313 :StoreRegOnStackSub64 [F],16
   2314 :Push64 [A]
   2315 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   2319 :Pop64 [A]
   2320 :GetPointerOfStackSub [B],56

   //StackFrameSize:8

   2321 :StoreRegToReg64 [B],[D]
   2322 :StoreRegToReg64 [F],[C]
   2323 :Push64 [A]

   //File:/Tests/Unique_ptr.uc
   //Line:7

   2324 :Push64 [C]
   2325 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   2329 :Pop64 [C]
   2330 :Pop64 [A]

   //Line:8

   2331 :StoreRegToReg64 [F],[B]
   2332 :Sub64 [C],[B],[F]
   2333 :StoreRegToReg64 [A],[D]
   2334 :GetFromStackSub64 [E],16
   2335 :StoreRegOnStackSub64 [F],8
   2336 :GetFromStackSub64 [F],8
   2337 :Call {ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr}
   2341 :GetPointerOfStackSub [A],32

   //Line:0

   2342 :StoreRegToReg64 [A],[F]
   2343 :Store64 [A], 32
   2347 :DecrementStackPointer [A]
   2348 :Debug_FuncEnd 
   2349 :Ret 
---ULang:Span<char>:(&Index&)^ULang:Span<char>&imut,ULang:Range_t<uintptr>: 
   2350 :Store64 [A], 32
   2354 :IncrementStackPointer [A]
   2355 :Debug_FuncStart 
   2356 :Debug_LineEnter 
   2357 :GetPointerOfStackSub [A],32
   2358 :Debug_LineEnter 
   2359 :StoreFromPtrToReg64 [D],[B]
   2360 :GetPointerOfStackSub [C],56
   2361 :StoreRegToReg64 [C],[D]
   2362 :Push64 [A]
   2363 :Push64 [B]
   2364 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   2368 :Pop64 [B]

   //StackFrameSize:28

   2369 :Pop64 [A]
   2370 :Store64 [C], 1
   2374 :StoreRegToReg64 [F],[D]
   2375 :MultU64 [D],[C],[F]
   2376 :StoreRegToReg64 [F],[E]
   2377 :Add64 [B],[E],[F]
   2378 :GetPointerOfStackSub [B],56
   2379 :StoreRegToReg64 [B],[D]

   //Line:6
   //Line:7

   2380 :StoreRegOnStackSub64 [F],16
   2381 :Push64 [A]
   2382 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   2386 :Pop64 [A]
   2387 :GetPointerOfStackSub [B],56
   2388 :StoreRegToReg64 [B],[D]
   2389 :StoreRegToReg64 [F],[C]
   2390 :Push64 [A]
   2391 :Push64 [C]
   2392 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   2396 :Pop64 [C]
   2397 :Pop64 [A]
   2398 :StoreRegToReg64 [F],[B]
   2399 :Sub64 [C],[B],[F]
   2400 :StoreRegToReg64 [A],[D]
   2401 :GetFromStackSub64 [E],16
   2402 :StoreRegOnStackSub64 [F],8
   2403 :GetFromStackSub64 [F],8
   2404 :Call {ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr}
   2408 :GetPointerOfStackSub [A],32
   2409 :StoreRegToReg64 [A],[F]
   2410 :Store64 [A], 32
   2414 :DecrementStackPointer [A]
   2415 :Debug_FuncEnd 
   2416 :Ret 
---ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&: 
   2417 :Debug_FuncStart 
   2418 :Debug_LineEnter 
   2419 :Store64 [A], 0
   2423 :StoreRegToPtr64 [A],[D]
   2424 :Debug_LineEnter 
   2425 :Store64 [B], 0
   2429 :Load64 [D],[B],8
   2430 :Debug_FuncEnd 
   2431 :Ret 
---ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr: 
   2432 :Debug_FuncStart 
   2433 :Debug_LineEnter 
   2434 :StoreRegToReg64 [E],[A]
   2435 :StoreRegToPtr64 [A],[D]
   2436 :Debug_LineEnter 
   2437 :StoreRegToReg64 [F],[B]
   2438 :Load64 [D],[B],8
   2439 :Debug_FuncEnd 
   2440 :Ret 
---ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut: 
   2441 :Debug_FuncStart 
   2442 :Debug_LineEnter 

   //StackFrameSize:80

   2443 :Read64 [D],[A],8
   2444 :StoreRegToReg64 [A],[F]
   2445 :Debug_FuncEnd 

   //File:/Tests/Vector.uc
   //Line:12

   2446 :Ret 
---ULang:StringSpan_t<char>:iData^ULang:StringSpan_t<char>&imut: 

   //Line:0

   2447 :Debug_FuncStart 
   2448 :Debug_LineEnter 
   2449 :StoreFromPtrToReg64 [D],[A]
   2450 :StoreRegToReg64 [A],[F]
   2451 :Debug_FuncEnd 
   2452 :Ret 
---ULang:StringSpan_t<char>:Data^ULang:StringSpan_t<char>&: 
   2453 :Debug_FuncStart 

   //Line:12
   //Line:13

   2454 :Debug_LineEnter 
   2455 :StoreFromPtrToReg64 [D],[A]
   2456 :StoreRegToReg64 [A],[F]
   2457 :Debug_FuncEnd 
   2458 :Ret 
---ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut: 
   2459 :Store64 [A], 19
   2463 :IncrementStackPointer [A]
   2464 :Debug_FuncStart 
   2465 :Debug_LineEnter 
   2466 :StoreRegToReg64 [D],[A]
   2467 :StoreRegToReg64 [A],[B]

   //Line:14

   2468 :StoreRegToReg64 [D],[C]
   2469 :StoreRegToReg64 [A],[D]
   2470 :Push64 [C]
   2471 :Push64 [E]
   2472 :Call {ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut}
   2476 :Pop64 [E]
   2477 :Pop64 [C]
   2478 :StoreRegToReg64 [E],[A]
   2479 :StoreRegToReg64 [A],[D]
   2480 :StoreRegToReg64 [F],[B]

   //Line:16

   2481 :Push64 [B]

   //Line:14
   //Line:16

   2482 :Push64 [C]
   2483 :Push64 [E]
   2484 :Call {ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut}
   2488 :Pop64 [E]
   2489 :Pop64 [C]
   2490 :Pop64 [B]
   2491 :StoreRegToReg64 [F],[A]
   2492 :notequalto8 [B],[A],[F]
   2493 :LNot8 [F],[B]
   2494 :Jumpif [B],{2505}
   2498 :StoreRegOnStackSub8 [B],19
   2499 :Store8 [A],0
   2500 :StoreRegToReg8 [A],[F]
   2501 :Jump {2591}
   2505 :Debug_LineEnter 
   2506 :Store32 [A], 0
   2508 :StoreRegToReg32 [A],[B]
   2509 :StoreRegToReg32 [B],[D]
   2510 :StoreRegOnStackSub64 [D],18
   2511 :GetFromStackSub64 [B],18
   2512 :StoreRegOnStackSub64 [B],18
   2513 :StoreRegToReg64 [C],[B]
   2514 :StoreRegToReg64 [B],[D]
   2515 :StoreRegToReg64 [B],[D]
   2516 :Push64 [C]
   2517 :Push64 [E]
   2518 :Call {ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut}
   2522 :Pop64 [E]
   2523 :Pop64 [C]

   //Line:18

   2524 :StoreRegToReg64 [F],[A]
   2525 :GetFromStackSub64 [B],18
   2526 :lessthan8 [B],[A],[F]
   2527 :LNot8 [F],[B]
   2528 :Jumpif [B],{2588}
   2532 :StoreRegOnStackSub8 [B],10
   2533 :StoreRegToReg64 [C],[A]
   2534 :Debug_LineEnter 
   2535 :StoreRegToReg64 [A],[B]
   2536 :GetFromStackSub64 [D],18
   2537 :StoreRegOnStackSub64 [D],18
   2538 :StoreRegToReg64 [A],[D]
   2539 :StoreRegOnStackSub64 [E],9
   2540 :GetFromStackSub64 [E],18
   2541 :Call {ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr}
   2545 :StoreFromPtrToReg64 [F],[A]
   2546 :GetFromStackSub64 [B],9
   2547 :StoreRegOnStackSub64 [B],9
   2548 :GetFromStackSub64 [B],18
   2549 :StoreRegOnStackSub64 [B],18
   2550 :GetFromStackSub64 [D],9
   2551 :GetFromStackSub64 [E],18
   2552 :Push8 [A]
   2553 :Call {ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr}

   //Line:0

   2557 :Pop8 [A]
   2558 :StoreFromPtrToReg64 [F],[B]
   2559 :notequalto8 [A],[B],[F]
   2560 :LNot8 [F],[A]
   2561 :StoreRegToReg8 [A],[C]
   2562 :Jumpif [C],{2573}
   2566 :StoreRegOnStackSub8 [C],1
   2567 :Store8 [A],0
   2568 :StoreRegToReg8 [A],[F]
   2569 :Jump {2591}
   2573 :Debug_LineEnter 
   2574 :GetFromStackSub64 [A],18
   2575 :StoreRegOnStackSub64 [A],18
   2576 :Store64 [A], 1
   2580 :GetFromStackSub64 [D],18
   2581 :Add64 [D],[A],[F]
   2582 :StoreRegToReg64 [F],[D]
   2583 :StoreRegOnStackSub64 [D],18
   2584 :Jump {2511}

   //File:/Types/Range.uc
   //Line:7
   //Line:0

   2588 :Debug_LineEnter 
   2589 :Store8 [A],1
   2590 :StoreRegToReg8 [A],[F]
   2591 :Store64 [B], 19

   //Line:8
   //Line:0

   2595 :DecrementStackPointer [B]
   2596 :Debug_FuncEnd 
   2597 :Ret 
---ULang:StringSpan_t<char>:(&notequal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut: 
   2598 :Debug_FuncStart 
   2599 :Debug_LineEnter 
   2600 :StoreRegToReg64 [D],[A]
   2601 :StoreRegToReg64 [A],[B]
   2602 :StoreRegToReg64 [E],[C]
   2603 :StoreRegToReg64 [A],[D]

   //[A] = ULang:Range_t<uintptr>:(&_new&):(&this&)

   2604 :StoreRegToReg64 [C],[E]

   //File:/Types/Range.uc
   //Line:10

   2605 :Call {ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut}
   2609 :LNot8 [F],[A]
   2610 :StoreRegToReg8 [A],[F]
   2611 :Debug_FuncEnd 
   2612 :Ret 
---ULang:StringSpan_t<char>:AsSpan^ULang:StringSpan_t<char>&: 

   //[A] = ULang:Range_t<uintptr>:(&_new&):(&this&)

   2613 :Store64 [A], 16
   2617 :IncrementStackPointer [A]
   2618 :Debug_FuncStart 
   2619 :Debug_LineEnter 

   //File:/Types/Range.uc
   //Line:14

   2620 :GetPointerOfStackSub [A],16
   2621 :Debug_LineEnter 
   2622 :StoreFromPtrToReg64 [D],[B]
   2623 :Read64 [D],[C],8
   2624 :StoreRegToReg64 [A],[D]
   2625 :StoreRegToReg64 [B],[E]

   //File:/Types/Span.uc
   //Line:7

   2626 :StoreRegToReg64 [C],[F]
   2627 :Call {ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr}
   2631 :GetPointerOfStackSub [A],16

   //Line:8

   2632 :StoreRegToReg64 [A],[F]
   2633 :Store64 [A], 16
   2637 :DecrementStackPointer [A]
   2638 :Debug_FuncEnd 
   2639 :Ret 
---ULang:StringSpan_t<char>:iAsSpan^ULang:StringSpan_t<char>&imut: 

   //[A] = ULang:Span<char>:(&_new&):(&this&)

   2640 :Store64 [A], 16

   //Line:12

   2644 :IncrementStackPointer [A]
   2645 :Debug_FuncStart 
   2646 :Debug_LineEnter 
   2647 :GetPointerOfStackSub [A],16
   2648 :Debug_LineEnter 

   //[A] = ULang:Span<char>:(&_new&):(&this&)

   2649 :StoreFromPtrToReg64 [D],[B]

   //File:/Types/Span.uc
   //Line:13

   2650 :Read64 [D],[C],8
   2651 :StoreRegToReg64 [A],[D]
   2652 :StoreRegToReg64 [B],[E]
   2653 :StoreRegToReg64 [C],[F]
   2654 :Call {ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr}
   2658 :GetPointerOfStackSub [A],16
   2659 :StoreRegToReg64 [A],[F]
   2660 :Store64 [A], 16
   2664 :DecrementStackPointer [A]

   //StackFrameSize:8

   2665 :Debug_FuncEnd 
   2666 :Ret 
---ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&: 
   2667 :Store64 [A], 16
   2671 :IncrementStackPointer [A]
   2672 :Debug_FuncStart 
   2673 :Debug_LineEnter 
   2674 :GetPointerOfStackSub [A],16
   2675 :Debug_LineEnter 
   2676 :StoreRegToReg64 [D],[B]
   2677 :StoreRegToReg64 [D],[C]
   2678 :StoreRegToReg64 [B],[D]
   2679 :Push64 [A]
   2680 :Push64 [C]
   2681 :Call {ULang:Span<char>:Data^ULang:Span<char>&}
   2685 :Pop64 [C]
   2686 :Pop64 [A]

   //StackFrameSize:8

   2687 :StoreRegToReg64 [C],[B]
   2688 :StoreRegToReg64 [B],[D]
   2689 :StoreRegToReg64 [F],[E]

   //File:/Types/Span.uc
   //Line:19

   2690 :Push64 [A]
   2691 :Push64 [E]
   2692 :Call {ULang:Span<char>:Size^ULang:Span<char>&imut}
   2696 :Pop64 [E]
   2697 :Pop64 [A]
   2698 :StoreRegToReg64 [A],[D]
   2699 :StoreRegToReg64 [E],[B]
   2700 :StoreRegToReg64 [B],[E]
   2701 :StoreRegToReg64 [F],[C]
   2702 :StoreRegToReg64 [C],[F]
   2703 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   2707 :GetPointerOfStackSub [A],16
   2708 :StoreRegToReg64 [A],[F]

   //StackFrameSize:32

   2709 :Store64 [A], 16
   2713 :DecrementStackPointer [A]

   //Line:21

   2714 :Debug_FuncEnd 
   2715 :Ret 
---ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&imut: 
   2716 :Store64 [A], 16
   2720 :IncrementStackPointer [A]
   2721 :Debug_FuncStart 
   2722 :Debug_LineEnter 
   2723 :GetPointerOfStackSub [A],16
   2724 :Debug_LineEnter 
   2725 :StoreRegToReg64 [D],[B]
   2726 :StoreRegToReg64 [D],[C]
   2727 :StoreRegToReg64 [B],[D]
   2728 :Push64 [A]
   2729 :Push64 [C]
   2730 :Call {ULang:Span<char>:Data^ULang:Span<char>&}
   2734 :Pop64 [C]
   2735 :Pop64 [A]
   2736 :StoreRegToReg64 [C],[B]
   2737 :StoreRegToReg64 [B],[D]
   2738 :StoreRegToReg64 [F],[E]
   2739 :Push64 [A]
   2740 :Push64 [E]
   2741 :Call {ULang:Span<char>:Size^ULang:Span<char>&imut}
   2745 :Pop64 [E]
   2746 :Pop64 [A]
   2747 :StoreRegToReg64 [A],[D]
   2748 :StoreRegToReg64 [E],[B]
   2749 :StoreRegToReg64 [B],[E]
   2750 :StoreRegToReg64 [F],[C]
   2751 :StoreRegToReg64 [C],[F]
   2752 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr}
   2756 :GetPointerOfStackSub [A],16
   2757 :StoreRegToReg64 [A],[F]
   2758 :Store64 [A], 16
   2762 :DecrementStackPointer [A]
   2763 :Debug_FuncEnd 
   2764 :Ret 
---ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr: 
   2765 :Store64 [A], 8
   2769 :IncrementStackPointer [A]
   2770 :Debug_FuncStart 
   2771 :Debug_LineEnter 
   2772 :StoreFromPtrToReg64 [D],[A]
   2773 :StoreRegToReg64 [E],[B]

   //StackFrameSize:32

   2774 :Store64 [C], 1
   2778 :MultU64 [B],[C],[F]

   //Line:22

   2779 :StoreRegOnStackSub64 [F],8
   2780 :GetFromStackSub64 [F],8
   2781 :Add64 [A],[F],[F]
   2782 :Store64 [A], 8
   2786 :DecrementStackPointer [A]
   2787 :Debug_FuncEnd 
   2788 :Ret 
---ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&imut,uptr: 
   2789 :Store64 [A], 8
   2793 :IncrementStackPointer [A]
   2794 :Debug_FuncStart 
   2795 :Debug_LineEnter 
   2796 :StoreFromPtrToReg64 [D],[A]
   2797 :StoreRegToReg64 [E],[B]
   2798 :Store64 [C], 1
   2802 :MultU64 [B],[C],[F]
   2803 :StoreRegOnStackSub64 [F],8
   2804 :GetFromStackSub64 [F],8
   2805 :Add64 [A],[F],[F]
   2806 :Store64 [A], 8
   2810 :DecrementStackPointer [A]
   2811 :Debug_FuncEnd 
   2812 :Ret 
---ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,ULang:Range_t<uintptr>: 
   2813 :Store64 [A], 48
   2817 :IncrementStackPointer [A]
   2818 :Debug_FuncStart 
   2819 :Debug_LineEnter 
   2820 :Debug_LineEnter 
   2821 :Debug_LineEnter 
   2822 :StoreRegToReg64 [D],[A]
   2823 :StoreRegToReg64 [A],[D]
   2824 :Call {ULang:StringSpan_t<char>:AsSpan^ULang:StringSpan_t<char>&}
   2828 :StoreFromPtrToReg64 [F],[A]
   2829 :StoreRegOnStackSub64 [A],48
   2830 :Read64 [F],[A],8
   2831 :StoreRegOnStackSub64 [A],40
   2832 :GetPointerOfStackSub [A],48
   2833 :GetFromStackSub64 [B],64
   2834 :StoreRegOnStackSub64 [B],64
   2835 :GetFromStackSub64 [B],72
   2836 :StoreRegOnStackSub64 [B],72
   2837 :StoreRegToReg64 [A],[D]
   2838 :GetFromStackSub64 [B],64
   2839 :Push64 [B]
   2840 :GetFromStackSub64 [B],64
   2841 :Push64 [B]

   //File:/Types/String.uc
   //Line:12

   2842 :Call {ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>}
   2846 :Pop64 [A]
   2847 :Pop64 [A]

   //Line:13

   2848 :StoreFromPtrToReg64 [F],[A]
   2849 :StoreRegOnStackSub64 [A],32
   2850 :Read64 [F],[A],8
   2851 :StoreRegOnStackSub64 [A],24
   2852 :GetPointerOfStackSub [A],32
   2853 :StoreRegToReg64 [A],[D]
   2854 :Call {ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&}
   2858 :StoreFromPtrToReg64 [F],[A]
   2859 :StoreRegOnStackSub64 [A],16

   //Line:17

   2860 :Read64 [F],[A],8
   2861 :StoreRegOnStackSub64 [A],8
   2862 :GetPointerOfStackSub [A],16
   2863 :StoreRegToReg64 [A],[F]
   2864 :Store64 [A], 48
   2868 :DecrementStackPointer [A]
   2869 :Debug_FuncEnd 
   2870 :Ret 
---ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&imut,ULang:Range_t<uintptr>: 
   2871 :Store64 [A], 48
   2875 :IncrementStackPointer [A]
   2876 :Debug_FuncStart 
   2877 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:21

   2878 :Debug_LineEnter 
   2879 :Debug_LineEnter 
   2880 :StoreRegToReg64 [D],[A]

   //StackFrameSize:19

   2881 :StoreRegToReg64 [A],[D]
   2882 :Call {ULang:StringSpan_t<char>:AsSpan^ULang:StringSpan_t<char>&}
   2886 :StoreFromPtrToReg64 [F],[A]
   2887 :StoreRegOnStackSub64 [A],48
   2888 :Read64 [F],[A],8
   2889 :StoreRegOnStackSub64 [A],40
   2890 :GetPointerOfStackSub [A],48
   2891 :GetFromStackSub64 [B],64
   2892 :StoreRegOnStackSub64 [B],64
   2893 :GetFromStackSub64 [B],72
   2894 :StoreRegOnStackSub64 [B],72
   2895 :StoreRegToReg64 [A],[D]
   2896 :GetFromStackSub64 [B],64
   2897 :Push64 [B]
   2898 :GetFromStackSub64 [B],64
   2899 :Push64 [B]
   2900 :Call {ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>}
   2904 :Pop64 [A]
   2905 :Pop64 [A]
   2906 :StoreFromPtrToReg64 [F],[A]
   2907 :StoreRegOnStackSub64 [A],32
   2908 :Read64 [F],[A],8
   2909 :StoreRegOnStackSub64 [A],24
   2910 :GetPointerOfStackSub [A],32
   2911 :StoreRegToReg64 [A],[D]
   2912 :Call {ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&}
   2916 :StoreFromPtrToReg64 [F],[A]
   2917 :StoreRegOnStackSub64 [A],16
   2918 :Read64 [F],[A],8
   2919 :StoreRegOnStackSub64 [A],8
   2920 :GetPointerOfStackSub [A],16
   2921 :StoreRegToReg64 [A],[F]
   2922 :Store64 [A], 48
   2926 :DecrementStackPointer [A]
   2927 :Debug_FuncEnd 
   2928 :Ret 
---ULang:Vector<char>:(&_new&)^ULang:Vector<char>&: 
   2929 :Debug_FuncStart 
   2930 :Debug_LineEnter 
   2931 :Store64 [A], 0
   2935 :StoreRegToPtr64 [A],[D]
   2936 :Debug_LineEnter 
   2937 :Store64 [B], 0
   2941 :Load64 [D],[B],8
   2942 :Debug_LineEnter 
   2943 :Store64 [C], 0
   2947 :Load64 [D],[C],16
   2948 :Debug_FuncEnd 
   2949 :Ret 
---ULang:Vector<char>:(&_drop&)^ULang:Vector<char>&: 
   2950 :Store64 [A], 1
   2954 :IncrementStackPointer [A]
   2955 :Debug_FuncStart 
   2956 :Debug_LineEnter 
   2957 :StoreFromPtrToReg64 [D],[A]
   2958 :StoreRegToReg64 [A],[C]
   2959 :StoreRegToReg64 [C],[B]
   2960 :Debug_LineEnter 
   2961 :StoreRegToReg64 [B],[C]
   2962 :Store64 [E], 0
   2966 :notequalto8 [B],[E],[F]
   2967 :LNot8 [F],[B]
   2968 :Jumpif [B],{2976}
   2972 :StoreRegOnStackSub8 [B],1
   2973 :Debug_LineEnter 
   2974 :StoreFromPtrToReg64 [D],[A]
   2975 :Free [A]
   2976 :Store64 [A], 1
   2980 :DecrementStackPointer [A]
   2981 :Debug_FuncEnd 
   2982 :Ret 
---ULang:Vector<char>:iData^ULang:Vector<char>&imut: 
   2983 :Debug_FuncStart 
   2984 :Debug_LineEnter 
   2985 :StoreFromPtrToReg64 [D],[A]
   2986 :StoreRegToReg64 [A],[F]
   2987 :Debug_FuncEnd 
   2988 :Ret 
---ULang:Vector<char>:Data^ULang:Vector<char>&: 
   2989 :Debug_FuncStart 
   2990 :Debug_LineEnter 
   2991 :StoreFromPtrToReg64 [D],[A]

   //Line:26

   2992 :StoreRegToReg64 [A],[F]
   2993 :Debug_FuncEnd 
   2994 :Ret 
---ULang:Vector<char>:Size^ULang:Vector<char>&imut: 
   2995 :Debug_FuncStart 
   2996 :Debug_LineEnter 
   2997 :Read64 [D],[A],8
   2998 :StoreRegToReg64 [A],[F]
   2999 :Debug_FuncEnd 
   3000 :Ret 
---ULang:Vector<char>:Capacity^ULang:Vector<char>&imut: 
   3001 :Debug_FuncStart 
   3002 :Debug_LineEnter 
   3003 :Read64 [D],[A],16
   3004 :StoreRegToReg64 [A],[F]
   3005 :Debug_FuncEnd 
   3006 :Ret 
---ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr: 

   //Line:30

   3007 :Debug_FuncStart 
   3008 :Debug_LineEnter 
   3009 :StoreRegToReg64 [D],[A]
   3010 :StoreRegToReg64 [E],[B]
   3011 :StoreRegToReg64 [D],[C]
   3012 :StoreRegToReg64 [A],[D]
   3013 :StoreRegToReg64 [E],[F]
   3014 :StoreRegToReg64 [B],[E]
   3015 :Push64 [C]
   3016 :Push64 [F]
   3017 :Call {ULang:Vector<char>:Reserve^ULang:Vector<char>&,uptr}

   //File:/Types/String.uc
   //Line:32

   3021 :Pop64 [F]
   3022 :Pop64 [C]
   3023 :Debug_LineEnter 
   3024 :StoreRegToReg64 [F],[A]
   3025 :Load64 [C],[A],8
   3026 :Debug_FuncEnd 
   3027 :Ret 
---ULang:Vector<char>:Reserve^ULang:Vector<char>&,uptr: 
   3028 :Store64 [A], 92
   3032 :IncrementStackPointer [A]

   //StackFrameSize:16

   3033 :Debug_FuncStart 
   3034 :Debug_LineEnter 
   3035 :StoreRegToReg64 [E],[A]

   //File:/Types/String.uc
   //Line:0

   3036 :Read64 [D],[B],16
   3037 :greaterthan8 [A],[B],[F]

   //Line:34

   3038 :LNot8 [F],[C]
   3039 :Jumpif [C],{3197}
   3043 :StoreRegOnStackSub8 [C],92
   3044 :Debug_LineEnter 
   3045 :Read64 [D],[A],8
   3046 :StoreRegToReg64 [A],[B]
   3047 :StoreRegToReg64 [B],[C]
   3048 :Debug_LineEnter 
   3049 :StoreFromPtrToReg64 [D],[B]
   3050 :StoreRegOnStackSub64 [D],91
   3051 :StoreRegToReg64 [B],[D]
   3052 :StoreRegToReg64 [D],[A]
   3053 :Debug_LineEnter 
   3054 :StoreRegToReg64 [E],[D]
   3055 :GetFromStackSub64 [B],91
   3056 :Load64 [B],[D],16
   3057 :Debug_LineEnter 

   //StackFrameSize:16

   3058 :StoreRegToReg64 [E],[B]
   3059 :Store64 [D], 1

   //Line:35

   3063 :MultU64 [B],[D],[F]
   3064 :Malloc [F],[E]
   3065 :StoreRegOnStackSub64 [A],83
   3066 :Store64 [A], 0
   3070 :StoreRegOnStackSub64 [A],75
   3071 :StoreRegOnStackSub64 [B],67
   3072 :StoreRegOnStackSub64 [C],59
   3073 :StoreRegOnStackSub64 [D],51
   3074 :StoreRegOnStackSub64 [E],43
   3075 :GetFromStackSub64 [A],75
   3076 :GetFromStackSub64 [B],67
   3077 :equalto64 [A],[B],[F]
   3078 :Jumpif [F],{3105}
   3082 :StoreRegOnStackSub8 [F],35

   //StackFrameSize:16

   3083 :StoreRegOnStackSub64 [A],34
   3084 :GetFromStackSub64 [A],75
   3085 :GetFromStackSub64 [B],51

   //File:/Types/String.uc
   //Line:0

   3086 :MultU64 [A],[B],[F]
   3087 :StoreRegToReg64 [F],[A]

   //Line:38

   3088 :GetFromStackSub64 [F],43
   3089 :Add64 [F],[A],[F]
   3090 :Debug_LineEnter 
   3091 :Store8 [A],0
   3092 :StoreRegToPtr8 [A],[F]
   3093 :Store64 [A], 1
   3097 :GetFromStackSub64 [B],75
   3098 :Add64 [B],[A],[F]
   3099 :StoreRegToReg64 [F],[A]
   3100 :StoreRegOnStackSub64 [A],75
   3101 :Jump {3075}
   3105 :GetFromStackSub64 [A],91
   3106 :GetFromStackSub64 [B],43
   3107 :StoreRegToPtr64 [B],[A]
   3108 :Debug_LineEnter 
   3109 :Store32 [B], 0
   3111 :StoreRegToReg32 [B],[D]
   3112 :StoreRegToReg32 [D],[C]
   3113 :StoreRegOnStackSub64 [C],26
   3114 :GetFromStackSub64 [C],26
   3115 :StoreRegOnStackSub64 [C],26
   3116 :GetFromStackSub64 [C],59
   3117 :StoreRegOnStackSub64 [C],59
   3118 :GetFromStackSub64 [C],26
   3119 :GetFromStackSub64 [D],59
   3120 :lessthan8 [C],[D],[F]
   3121 :LNot8 [F],[C]
   3122 :Jumpif [C],{3172}
   3126 :StoreRegOnStackSub8 [C],18
   3127 :Debug_LineEnter 
   3128 :GetFromStackSub64 [A],83
   3129 :StoreRegOnStackSub64 [A],83

   //StackFrameSize:16

   3130 :GetFromStackSub64 [A],26
   3131 :StoreRegOnStackSub64 [A],26
   3132 :Store64 [A], 1
   3136 :GetFromStackSub64 [C],26
   3137 :MultU64 [C],[A],[F]
   3138 :StoreRegToReg64 [F],[C]
   3139 :GetFromStackSub64 [D],83
   3140 :Add64 [D],[C],[F]
   3141 :StoreFromPtrToReg64 [F],[D]
   3142 :GetFromStackSub64 [E],91
   3143 :StoreFromPtrToReg64 [E],[E]
   3144 :StoreRegOnStackSub64 [E],17
   3145 :GetFromStackSub64 [A],26
   3146 :StoreRegOnStackSub64 [A],26
   3147 :Store64 [A], 1
   3151 :GetFromStackSub64 [B],26
   3152 :MultU64 [B],[A],[F]
   3153 :StoreRegOnStackSub64 [F],9
   3154 :GetFromStackSub64 [F],9
   3155 :Add64 [E],[F],[F]
   3156 :StoreRegToPtr8 [D],[F]
   3157 :Debug_LineEnter 
   3158 :GetFromStackSub64 [A],26
   3159 :StoreRegOnStackSub64 [A],26
   3160 :Store64 [A], 1
   3164 :GetFromStackSub64 [B],26
   3165 :Add64 [B],[A],[F]
   3166 :StoreRegToReg64 [F],[A]
   3167 :StoreRegOnStackSub64 [A],26
   3168 :Jump {3114}
   3172 :Debug_LineEnter 
   3173 :GetFromStackSub64 [A],83
   3174 :StoreRegOnStackSub64 [A],83
   3175 :GetFromStackSub64 [D],83
   3176 :StoreRegToReg64 [D],[A]

   //StackFrameSize:8

   3177 :Debug_LineEnter 
   3178 :StoreRegToReg64 [A],[D]
   3179 :Store64 [E], 0
   3183 :equalto64 [A],[E],[F]
   3184 :LNot8 [F],[A]
   3185 :StoreRegOnStackSub8 [A],1
   3186 :GetFromStackSub8 [A],1
   3187 :StoreRegToReg8 [A],[B]
   3188 :Jumpif [B],{3197}
   3192 :Debug_LineEnter 
   3193 :GetFromStackSub64 [A],83
   3194 :StoreRegOnStackSub64 [A],83
   3195 :GetFromStackSub64 [A],83
   3196 :Free [A]
   3197 :Store64 [A], 92
   3201 :DecrementStackPointer [A]

   //File:/Types/String.uc
   //Line:42

   3202 :Debug_FuncEnd 
   3203 :Ret 
---ULang:Vector<char>:Clear^ULang:Vector<char>&: 
   3204 :Debug_FuncStart 
   3205 :Debug_LineEnter 
   3206 :Store64 [A], 0
   3210 :Load64 [D],[A],8
   3211 :Debug_FuncEnd 
   3212 :Ret 
---ULang:Vector<char>:Pop^ULang:Vector<char>&: 
   3213 :Debug_FuncStart 
   3214 :Debug_FuncEnd 
   3215 :Ret 
---ULang:Vector<char>:Remove^ULang:Vector<char>&,uptr: 
   3216 :Debug_FuncStart 
   3217 :Debug_FuncEnd 
   3218 :Ret 
---ULang:Vector<char>:Push^ULang:Vector<char>&,c&imut: 
   3219 :Store64 [A], 8
   3223 :IncrementStackPointer [A]

   //File:/Types/String.uc
   //Line:44
   //Line:42
   //Line:44

   3224 :Debug_FuncStart 
   3225 :Debug_LineEnter 
   3226 :StoreRegToReg64 [D],[A]
   3227 :Read64 [D],[B],8
   3228 :Store64 [C], 1
   3232 :Add64 [B],[C],[F]
   3233 :StoreRegOnStackSub64 [D],8
   3234 :StoreRegToReg64 [A],[D]
   3235 :StoreRegToReg64 [F],[E]
   3236 :Call {ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr}
   3240 :Debug_LineEnter 
   3241 :StoreFromPtrToReg64 [E],[A]
   3242 :GetFromStackSub64 [B],8
   3243 :StoreRegOnStackSub64 [B],8
   3244 :GetFromStackSub64 [B],8
   3245 :StoreRegOnStackSub64 [B],8
   3246 :GetFromStackSub64 [B],8
   3247 :Read64 [B],[B],8
   3248 :StoreRegToReg64 [B],[C]
   3249 :Store64 [D], 1
   3253 :Sub64 [B],[D],[F]
   3254 :GetFromStackSub64 [D],8
   3255 :StoreRegToReg64 [F],[E]
   3256 :Push8 [A]
   3257 :Call {ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr}
   3261 :Pop8 [A]
   3262 :StoreRegToPtr8 [A],[F]
   3263 :Store64 [B], 8
   3267 :DecrementStackPointer [B]
   3268 :Debug_FuncEnd 
   3269 :Ret 
---ULang:Vector<char>:Push^ULang:Vector<char>&,cmov: 
   3270 :Store64 [A], 9
   3274 :IncrementStackPointer [A]
   3275 :Debug_FuncStart 
   3276 :Debug_LineEnter 

   //StackFrameSize:48

   3277 :StoreRegToReg64 [D],[A]
   3278 :Read64 [D],[B],8
   3279 :Store64 [C], 1
   3283 :Add64 [B],[C],[F]
   3284 :StoreRegOnStackSub64 [D],9
   3285 :StoreRegToReg64 [A],[D]
   3286 :StoreRegOnStackSub8 [E],1
   3287 :StoreRegToReg64 [F],[E]
   3288 :Call {ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr}
   3292 :Debug_LineEnter 
   3293 :GetFromStackSub8 [A],1
   3294 :StoreRegOnStackSub8 [A],1
   3295 :GetFromStackSub64 [A],9
   3296 :StoreRegOnStackSub64 [A],9
   3297 :GetFromStackSub64 [A],9
   3298 :StoreRegOnStackSub64 [A],9
   3299 :GetFromStackSub64 [A],9
   3300 :Read64 [A],[A],8
   3301 :StoreRegToReg64 [A],[B]
   3302 :Store64 [C], 1
   3306 :Sub64 [A],[C],[F]
   3307 :GetFromStackSub64 [D],9
   3308 :StoreRegToReg64 [F],[E]
   3309 :Call {ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr}
   3313 :GetFromStackSub8 [A],1
   3314 :StoreRegToPtr8 [A],[F]
   3315 :Store64 [A], 9
   3319 :DecrementStackPointer [A]
   3320 :Debug_FuncEnd 
   3321 :Ret 
---ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,c&imut: 
   3322 :Debug_FuncStart 
   3323 :Debug_FuncEnd 
   3324 :Ret 
---ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,cmov: 
   3325 :Debug_FuncStart 
   3326 :Debug_FuncEnd 
   3327 :Ret 
---ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>imut: 
   3328 :Debug_FuncStart 
   3329 :Debug_FuncEnd 
   3330 :Ret 
---ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>mov: 
   3331 :Debug_FuncStart 
   3332 :Debug_FuncEnd 
   3333 :Ret 
---ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr: 
   3334 :Store64 [A], 8
   3338 :IncrementStackPointer [A]
   3339 :Debug_FuncStart 
   3340 :Debug_LineEnter 
   3341 :StoreFromPtrToReg64 [D],[A]

   //Line:10

   3342 :StoreRegToReg64 [E],[B]
   3343 :Store64 [C], 1
   3347 :MultU64 [B],[C],[F]

   //Line:11

   3348 :StoreRegOnStackSub64 [F],8
   3349 :GetFromStackSub64 [F],8
   3350 :Add64 [A],[F],[F]
   3351 :Store64 [A], 8
   3355 :DecrementStackPointer [A]

   //[A] = ULang:Vector<char>:(&_new&):(&this&)

   3356 :Debug_FuncEnd 

   //File:/Types/Vector.uc
   //Line:13

   3357 :Ret 
---ULang:Vector<char>:(&Index&)^ULang:Vector<char>&imut,uptr: 
   3358 :Store64 [A], 8
   3362 :IncrementStackPointer [A]
   3363 :Debug_FuncStart 
   3364 :Debug_LineEnter 
   3365 :StoreFromPtrToReg64 [D],[A]
   3366 :StoreRegToReg64 [E],[B]
   3367 :Store64 [C], 1
   3371 :MultU64 [B],[C],[F]
   3372 :StoreRegOnStackSub64 [F],8
   3373 :GetFromStackSub64 [F],8

   //Line:15

   3374 :Add64 [A],[F],[F]
   3375 :Store64 [A], 8
   3379 :DecrementStackPointer [A]
   3380 :Debug_FuncEnd 
   3381 :Ret 
---ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,ULang:Range_t<uintptr>: 
   3382 :Store64 [A], 32
   3386 :IncrementStackPointer [A]
   3387 :Debug_FuncStart 

   //File:/Types/Vector.uc
   //Line:17

   3388 :Debug_LineEnter 
   3389 :Debug_LineEnter 
   3390 :StoreRegToReg64 [D],[A]
   3391 :StoreRegToReg64 [A],[D]
   3392 :Call {ULang:Vector<char>:AsSpan^ULang:Vector<char>&}
   3396 :StoreFromPtrToReg64 [F],[A]
   3397 :StoreRegOnStackSub64 [A],32
   3398 :Read64 [F],[A],8
   3399 :StoreRegOnStackSub64 [A],24

   //File:/Types/Vector.uc
   //Line:20

   3400 :GetPointerOfStackSub [A],32
   3401 :GetFromStackSub64 [B],48
   3402 :StoreRegOnStackSub64 [B],48
   3403 :GetFromStackSub64 [B],56
   3404 :StoreRegOnStackSub64 [B],56
   3405 :StoreRegToReg64 [A],[D]

   //File:/Types/Vector.uc
   //Line:21

   3406 :GetFromStackSub64 [B],48
   3407 :Push64 [B]
   3408 :GetFromStackSub64 [B],48
   3409 :Push64 [B]
   3410 :Call {ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>}
   3414 :Pop64 [A]
   3415 :Pop64 [A]
   3416 :StoreFromPtrToReg64 [F],[A]
   3417 :StoreRegOnStackSub64 [A],16
   3418 :Read64 [F],[A],8
   3419 :StoreRegOnStackSub64 [A],8
   3420 :GetPointerOfStackSub [A],16
   3421 :StoreRegToReg64 [A],[F]
   3422 :Store64 [A], 32
   3426 :DecrementStackPointer [A]

   //Line:25

   3427 :Debug_FuncEnd 
   3428 :Ret 
---ULang:Vector<char>:(&Index&)^ULang:Vector<char>&imut,ULang:Range_t<uintptr>: 
   3429 :Store64 [A], 32

   //File:/Types/Vector.uc
   //Line:28

   3433 :IncrementStackPointer [A]
   3434 :Debug_FuncStart 
   3435 :Debug_LineEnter 
   3436 :Debug_LineEnter 
   3437 :StoreRegToReg64 [D],[A]
   3438 :StoreRegToReg64 [A],[D]
   3439 :Call {ULang:Vector<char>:AsSpan^ULang:Vector<char>&}

   //Line:29

   3443 :StoreFromPtrToReg64 [F],[A]
   3444 :StoreRegOnStackSub64 [A],32
   3445 :Read64 [F],[A],8
   3446 :StoreRegOnStackSub64 [A],24

   //Line:30

   3447 :GetPointerOfStackSub [A],32
   3448 :GetFromStackSub64 [B],48
   3449 :StoreRegOnStackSub64 [B],48
   3450 :GetFromStackSub64 [B],56
   3451 :StoreRegOnStackSub64 [B],56

   //Line:33

   3452 :StoreRegToReg64 [A],[D]
   3453 :GetFromStackSub64 [B],48
   3454 :Push64 [B]
   3455 :GetFromStackSub64 [B],48

   //Line:34

   3456 :Push64 [B]
   3457 :Call {ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>}
   3461 :Pop64 [A]
   3462 :Pop64 [A]
   3463 :StoreFromPtrToReg64 [F],[A]
   3464 :StoreRegOnStackSub64 [A],16
   3465 :Read64 [F],[A],8
   3466 :StoreRegOnStackSub64 [A],8
   3467 :GetPointerOfStackSub [A],16
   3468 :StoreRegToReg64 [A],[F]
   3469 :Store64 [A], 32
   3473 :DecrementStackPointer [A]
   3474 :Debug_FuncEnd 
   3475 :Ret 
---ULang:Vector<char>:AsSpan^ULang:Vector<char>&: 
   3476 :Store64 [A], 16
   3480 :IncrementStackPointer [A]
   3481 :Debug_FuncStart 
   3482 :Debug_LineEnter 
   3483 :GetPointerOfStackSub [A],16
   3484 :Debug_LineEnter 
   3485 :StoreFromPtrToReg64 [D],[B]
   3486 :Read64 [D],[C],8
   3487 :StoreRegToReg64 [A],[D]
   3488 :StoreRegToReg64 [B],[E]

   //Line:0

   3489 :StoreRegToReg64 [C],[F]
   3490 :Call {ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr}
   3494 :GetPointerOfStackSub [A],16
   3495 :StoreRegToReg64 [A],[F]
   3496 :Store64 [A], 16
   3500 :DecrementStackPointer [A]
   3501 :Debug_FuncEnd 
   3502 :Ret 
---ULang:Vector<char>:iAsSpan^ULang:Vector<char>&imut: 
   3503 :Store64 [A], 16

   //Line:35

   3507 :IncrementStackPointer [A]
   3508 :Debug_FuncStart 
   3509 :Debug_LineEnter 
   3510 :GetPointerOfStackSub [A],16
   3511 :Debug_LineEnter 
   3512 :StoreFromPtrToReg64 [D],[B]
   3513 :Read64 [D],[C],8
   3514 :StoreRegToReg64 [A],[D]
   3515 :StoreRegToReg64 [B],[E]
   3516 :StoreRegToReg64 [C],[F]
   3517 :Call {ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr}
   3521 :GetPointerOfStackSub [A],16
   3522 :StoreRegToReg64 [A],[F]
   3523 :Store64 [A], 16
   3527 :DecrementStackPointer [A]
   3528 :Debug_FuncEnd 
   3529 :Ret 
---ULang:String_t<char>:(&_init&): 
   3530 :Debug_FuncStart 
   3531 :Debug_LineEnter 
   3532 :StoreRegToReg64 [D],[A]
   3533 :Debug_LineEnter 
   3534 :StoreRegToReg64 [A],[D]
   3535 :Call {ULang:Vector<char>:(&_new&)^ULang:Vector<char>&}
   3539 :Debug_FuncEnd 
   3540 :Ret 
---ULang:String_t<char>:(&_new&)^ULang:String_t<char>&: 
   3541 :Debug_FuncStart 
   3542 :StoreRegToReg64 [D],[A]
   3543 :StoreRegToReg64 [A],[D]
   3544 :Call {ULang:String_t<char>:(&_init&)}
   3548 :Debug_FuncEnd 
   3549 :Ret 
---ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut: 
   3550 :Store64 [A], 9
   3554 :IncrementStackPointer [A]
   3555 :Debug_FuncStart 

   //Line:35

   3556 :StoreRegToReg64 [D],[A]
   3557 :StoreRegToReg64 [D],[B]
   3558 :StoreRegToReg64 [A],[D]
   3559 :Push64 [B]
   3560 :Push64 [E]
   3561 :Call {ULang:String_t<char>:(&_init&)}
   3565 :Pop64 [E]
   3566 :Pop64 [B]
   3567 :Debug_LineEnter 
   3568 :StoreRegToReg64 [B],[A]
   3569 :StoreRegToReg64 [E],[C]
   3570 :StoreRegToReg64 [C],[D]

   //Line:38

   3571 :Push64 [A]
   3572 :Push64 [B]
   3573 :Push64 [E]
   3574 :Call {ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut}
   3578 :Pop64 [E]
   3579 :Pop64 [B]
   3580 :Pop64 [A]
   3581 :StoreRegToReg64 [A],[D]
   3582 :StoreRegToReg64 [E],[C]
   3583 :StoreRegToReg64 [F],[E]
   3584 :Push64 [B]
   3585 :Push64 [C]
   3586 :Call {ULang:String_t<char>:Resize^ULang:String_t<char>&,uptr}
   3590 :Pop64 [C]

   //Line:40

   3591 :Pop64 [B]
   3592 :Debug_LineEnter 
   3593 :Store32 [A], 0
   3595 :StoreRegToReg32 [A],[E]
   3596 :StoreRegToReg32 [E],[D]
   3597 :StoreRegOnStackSub64 [D],9
   3598 :GetFromStackSub64 [D],9
   3599 :StoreRegOnStackSub64 [D],9
   3600 :StoreRegToReg64 [C],[D]
   3601 :StoreRegToReg64 [D],[E]
   3602 :StoreRegToReg64 [E],[D]
   3603 :Push64 [B]
   3604 :Push64 [C]
   3605 :Call {ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut}
   3609 :Pop64 [C]
   3610 :Pop64 [B]
   3611 :StoreRegToReg64 [F],[A]
   3612 :GetFromStackSub64 [D],9
   3613 :lessthan8 [D],[A],[F]
   3614 :LNot8 [F],[D]

   //[A] = ULang:Vector<char>:Clear:(&this&)

   3615 :Jumpif [D],{3659}

   //StackFrameSize:8

   3619 :StoreRegOnStackSub8 [D],1
   3620 :StoreRegToReg64 [C],[A]
   3621 :GetFromStackSub64 [D],9

   //File:/Types/Vector.uc
   //Line:48

   3622 :StoreRegOnStackSub64 [D],9
   3623 :StoreRegToReg64 [A],[D]
   3624 :GetFromStackSub64 [E],9
   3625 :Push64 [B]
   3626 :Call {ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr}
   3630 :Pop64 [B]
   3631 :StoreFromPtrToReg64 [F],[A]
   3632 :StoreRegToReg64 [B],[C]
   3633 :StoreRegToReg64 [C],[D]
   3634 :GetFromStackSub64 [E],9
   3635 :StoreRegOnStackSub64 [E],9
   3636 :StoreRegToReg64 [C],[D]

   //Line:49

   3637 :GetFromStackSub64 [E],9
   3638 :Push8 [A]
   3639 :Call {ULang:String_t<char>:(&Index&)^ULang:String_t<char>&,uptr}
   3643 :Pop8 [A]
   3644 :StoreRegToPtr8 [A],[F]
   3645 :GetFromStackSub64 [B],9
   3646 :StoreRegOnStackSub64 [B],9
   3647 :Store64 [B], 1
   3651 :GetFromStackSub64 [C],9
   3652 :Add64 [C],[B],[F]
   3653 :StoreRegToReg64 [F],[C]
   3654 :StoreRegOnStackSub64 [C],9
   3655 :Jump {3598}
   3659 :Store64 [A], 9
   3663 :DecrementStackPointer [A]
   3664 :Debug_FuncEnd 
   3665 :Ret 
---ULang:String_t<char>:iData^ULang:String_t<char>&imut: 
   3666 :Debug_FuncStart 
   3667 :Debug_LineEnter 

   //StackFrameSize:9

   3668 :StoreRegToReg64 [D],[A]
   3669 :StoreRegToReg64 [A],[D]
   3670 :Call {ULang:Vector<char>:iData^ULang:Vector<char>&imut}
   3674 :Debug_FuncEnd 
   3675 :Ret 
---ULang:String_t<char>:Data^ULang:String_t<char>&: 
   3676 :Debug_FuncStart 
   3677 :Debug_LineEnter 
   3678 :StoreRegToReg64 [D],[A]
   3679 :StoreRegToReg64 [A],[D]
   3680 :Call {ULang:Vector<char>:Data^ULang:Vector<char>&}
   3684 :Debug_FuncEnd 
   3685 :Ret 
---ULang:String_t<char>:Size^ULang:String_t<char>&imut: 
   3686 :Debug_FuncStart 

   //Line:54

   3687 :Debug_LineEnter 
   3688 :StoreRegToReg64 [D],[A]
   3689 :StoreRegToReg64 [A],[D]
   3690 :Call {ULang:Vector<char>:Size^ULang:Vector<char>&imut}
   3694 :Debug_FuncEnd 
   3695 :Ret 
---ULang:String_t<char>:Capacity^ULang:String_t<char>&imut: 
   3696 :Debug_FuncStart 
   3697 :Debug_LineEnter 
   3698 :StoreRegToReg64 [D],[A]
   3699 :StoreRegToReg64 [A],[D]
   3700 :Call {ULang:Vector<char>:Capacity^ULang:Vector<char>&imut}
   3704 :Debug_FuncEnd 
   3705 :Ret 
---ULang:String_t<char>:Resize^ULang:String_t<char>&,uptr: 
   3706 :Debug_FuncStart 
   3707 :Debug_LineEnter 
   3708 :StoreRegToReg64 [D],[A]
   3709 :StoreRegToReg64 [E],[B]
   3710 :StoreRegToReg64 [A],[D]
   3711 :StoreRegToReg64 [B],[E]
   3712 :Call {ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr}
   3716 :Debug_FuncEnd 
   3717 :Ret 
---ULang:String_t<char>:Reserve^ULang:String_t<char>&,uptr: 
   3718 :Debug_FuncStart 
   3719 :Debug_LineEnter 
   3720 :StoreRegToReg64 [D],[A]
   3721 :StoreRegToReg64 [E],[B]
   3722 :StoreRegToReg64 [A],[D]
   3723 :StoreRegToReg64 [B],[E]
   3724 :Call {ULang:Vector<char>:Reserve^ULang:Vector<char>&,uptr}
   3728 :Debug_FuncEnd 
   3729 :Ret 
---ULang:String_t<char>:Clear^ULang:String_t<char>&: 

   //StackFrameSize:8

   3730 :Debug_FuncStart 
   3731 :Debug_LineEnter 
   3732 :StoreRegToReg64 [D],[A]

   //File:/Types/Vector.uc
   //Line:64

   3733 :StoreRegToReg64 [A],[D]
   3734 :Call {ULang:Vector<char>:Clear^ULang:Vector<char>&}
   3738 :Debug_FuncEnd 
   3739 :Ret 
---ULang:String_t<char>:Pop^ULang:String_t<char>&: 
   3740 :Debug_FuncStart 
   3741 :Debug_LineEnter 
   3742 :StoreRegToReg64 [D],[A]
   3743 :StoreRegToReg64 [A],[D]
   3744 :Call {ULang:Vector<char>:Pop^ULang:Vector<char>&}
   3748 :Debug_FuncEnd 
   3749 :Ret 
---ULang:String_t<char>:Remove^ULang:String_t<char>&,uptr: 
   3750 :Debug_FuncStart 
   3751 :Debug_LineEnter 

   //StackFrameSize:8

   3752 :StoreRegToReg64 [D],[A]
   3753 :StoreRegToReg64 [E],[B]
   3754 :StoreRegToReg64 [A],[D]

   //File:/Types/Vector.uc
   //Line:65

   3755 :StoreRegToReg64 [B],[E]
   3756 :Call {ULang:Vector<char>:Remove^ULang:Vector<char>&,uptr}
   3760 :Debug_FuncEnd 
   3761 :Ret 
---ULang:String_t<char>:Push^ULang:String_t<char>&,c&imut: 
   3762 :Debug_FuncStart 
   3763 :Debug_LineEnter 
   3764 :StoreRegToReg64 [D],[A]
   3765 :StoreRegToReg64 [E],[B]
   3766 :StoreRegToReg64 [A],[D]
   3767 :StoreRegToReg64 [B],[E]
   3768 :Call {ULang:Vector<char>:Push^ULang:Vector<char>&,c&imut}
   3772 :Debug_FuncEnd 
   3773 :Ret 
---ULang:String_t<char>:Push^ULang:String_t<char>&,cmov: 

   //StackFrameSize:32

   3774 :Debug_FuncStart 
   3775 :Debug_LineEnter 
   3776 :StoreRegToReg64 [D],[A]

   //File:/Types/Vector.uc
   //Line:65
   //Line:70

   3777 :StoreRegToReg8 [E],[B]
   3778 :StoreRegToReg64 [A],[D]
   3779 :StoreRegToReg8 [B],[E]
   3780 :Call {ULang:Vector<char>:Push^ULang:Vector<char>&,cmov}
   3784 :Debug_FuncEnd 
   3785 :Ret 
---ULang:String_t<char>:Insert^ULang:String_t<char>&,uptr,c&imut: 
   3786 :Debug_FuncStart 
   3787 :Debug_LineEnter 
   3788 :StoreRegToReg64 [D],[A]
   3789 :StoreRegToReg64 [E],[B]
   3790 :StoreRegToReg64 [F],[C]
   3791 :StoreRegToReg64 [A],[D]
   3792 :StoreRegToReg64 [B],[E]
   3793 :StoreRegToReg64 [C],[F]
   3794 :Call {ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,c&imut}
   3798 :Debug_FuncEnd 
   3799 :Ret 
---ULang:String_t<char>:Insert^ULang:String_t<char>&,uptr,cmov: 
   3800 :Debug_FuncStart 
   3801 :Debug_LineEnter 
   3802 :StoreRegToReg64 [D],[A]
   3803 :StoreRegToReg64 [E],[B]
   3804 :StoreRegToReg8 [F],[C]
   3805 :StoreRegToReg64 [A],[D]
   3806 :StoreRegToReg64 [B],[E]
   3807 :StoreRegToReg8 [C],[F]
   3808 :Call {ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,cmov}
   3812 :Debug_FuncEnd 
   3813 :Ret 
---ULang:String_t<char>:(&Index&)^ULang:String_t<char>&,uptr: 
   3814 :Debug_FuncStart 
   3815 :Debug_LineEnter 
   3816 :Debug_LineEnter 
   3817 :StoreRegToReg64 [D],[A]
   3818 :StoreRegToReg64 [E],[B]

   //StackFrameSize:32

   3819 :StoreRegToReg64 [A],[D]
   3820 :StoreRegToReg64 [B],[E]
   3821 :Call {ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr}
   3825 :Debug_FuncEnd 
   3826 :Ret 
---ULang:String_t<char>:(&Index&)^ULang:String_t<char>&imut,uptr: 
   3827 :Debug_FuncStart 
   3828 :Debug_LineEnter 
   3829 :Debug_LineEnter 
   3830 :StoreRegToReg64 [D],[A]
   3831 :StoreRegToReg64 [E],[B]
   3832 :StoreRegToReg64 [A],[D]
   3833 :StoreRegToReg64 [B],[E]
   3834 :Call {ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr}
   3838 :Debug_FuncEnd 
   3839 :Ret 
---ULang:String_t<char>:Append^ULang:String_t<char>&,ULang:Span<char>imut: 
   3840 :Debug_FuncStart 
   3841 :Debug_LineEnter 
   3842 :StoreRegToReg64 [D],[A]
   3843 :GetFromStackSub64 [B],16
   3844 :StoreRegOnStackSub64 [B],16
   3845 :GetFromStackSub64 [B],24
   3846 :StoreRegOnStackSub64 [B],24
   3847 :StoreRegToReg64 [A],[D]
   3848 :GetFromStackSub64 [B],16
   3849 :Push64 [B]
   3850 :GetFromStackSub64 [B],16
   3851 :Push64 [B]
   3852 :Call {ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>imut}
   3856 :Pop64 [A]
   3857 :Pop64 [A]
   3858 :Debug_FuncEnd 
   3859 :Ret 
---ULang:String_t<char>:Append^ULang:String_t<char>&,ULang:Span<char>mov: 
   3860 :Debug_FuncStart 
   3861 :Debug_LineEnter 
   3862 :StoreRegToReg64 [D],[A]
   3863 :GetFromStackSub64 [B],16

   //StackFrameSize:16

   3864 :StoreRegOnStackSub64 [B],16
   3865 :GetFromStackSub64 [B],24
   3866 :StoreRegOnStackSub64 [B],24

   //File:/Types/Vector.uc
   //Line:0

   3867 :StoreRegToReg64 [A],[D]
   3868 :GetFromStackSub64 [B],16

   //Line:73

   3869 :Push64 [B]
   3870 :GetFromStackSub64 [B],16
   3871 :Push64 [B]
   3872 :Call {ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>mov}
   3876 :Pop64 [A]
   3877 :Pop64 [A]
   3878 :Debug_FuncEnd 
   3879 :Ret 
---ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut: 
   3880 :Store64 [A], 32
   3884 :IncrementStackPointer [A]
   3885 :Debug_FuncStart 
   3886 :Debug_LineEnter 
   3887 :StoreRegToReg64 [D],[A]
   3888 :StoreRegToReg64 [A],[B]

   //StackFrameSize:16

   3889 :StoreRegToReg64 [A],[D]
   3890 :Push64 [E]
   3891 :Call {ULang:String_t<char>:iStr^ULang:String_t<char>&imut}
   3895 :Pop64 [E]
   3896 :StoreFromPtrToReg64 [F],[A]
   3897 :StoreRegOnStackSub64 [A],32
   3898 :Read64 [F],[A],8
   3899 :StoreRegOnStackSub64 [A],24
   3900 :GetPointerOfStackSub [A],32
   3901 :StoreRegToReg64 [E],[B]
   3902 :StoreRegToReg64 [B],[D]
   3903 :Push64 [A]
   3904 :Call {ULang:String_t<char>:iStr^ULang:String_t<char>&imut}
   3908 :Pop64 [A]
   3909 :StoreFromPtrToReg64 [F],[B]
   3910 :StoreRegOnStackSub64 [B],16
   3911 :Read64 [F],[B],8
   3912 :StoreRegOnStackSub64 [B],8
   3913 :GetPointerOfStackSub [B],16
   3914 :StoreRegToReg64 [A],[D]
   3915 :StoreRegToReg64 [B],[E]
   3916 :Call {ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut}
   3920 :Store64 [A], 32
   3924 :DecrementStackPointer [A]
   3925 :Debug_FuncEnd 
   3926 :Ret 
---ULang:String_t<char>:(&notequal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut: 
   3927 :Debug_FuncStart 
   3928 :Debug_LineEnter 
   3929 :StoreRegToReg64 [D],[A]
   3930 :StoreRegToReg64 [A],[B]
   3931 :StoreRegToReg64 [E],[C]
   3932 :StoreRegToReg64 [A],[D]
   3933 :StoreRegToReg64 [C],[E]

   //StackFrameSize:9

   3934 :Call {ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut}
   3938 :LNot8 [F],[A]
   3939 :StoreRegToReg8 [A],[F]
   3940 :Debug_FuncEnd 
   3941 :Ret 
---ULang:String_t<char>:(&Plus&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut: 
   3942 :Store64 [A], 48
   3946 :IncrementStackPointer [A]
   3947 :Debug_FuncStart 

   //File:/Types/String.uc
   //Line:58

   3948 :Debug_LineEnter 
   3949 :StoreRegToReg64 [D],[A]
   3950 :StoreRegToReg64 [A],[B]
   3951 :StoreRegToReg64 [E],[C]
   3952 :StoreRegToReg64 [C],[D]
   3953 :Push64 [A]
   3954 :Call {ULang:String_t<char>:iStr^ULang:String_t<char>&imut}
   3958 :Pop64 [A]
   3959 :StoreFromPtrToReg64 [F],[B]
   3960 :StoreRegOnStackSub64 [B],48
   3961 :Read64 [F],[B],8
   3962 :StoreRegOnStackSub64 [B],40
   3963 :StoreRegToReg64 [B],[C]
   3964 :StoreRegOnStackSub64 [C],32
   3965 :GetPointerOfStackSub [C],32
   3966 :StoreRegToReg64 [C],[B]
   3967 :StoreRegToReg64 [C],[D]
   3968 :GetPointerOfStackSub [E],48
   3969 :StoreRegToReg64 [E],[F]
   3970 :StoreRegToReg64 [F],[E]
   3971 :Push64 [A]
   3972 :Push64 [B]

   //Line:59

   3973 :Call {ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut}
   3977 :Pop64 [B]
   3978 :Pop64 [A]
   3979 :StoreRegToReg64 [A],[D]
   3980 :GetFromStackSub64 [E],32
   3981 :Call {ULang:String_t<char>:(&Plus&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut}
   3985 :StoreFromPtrToReg64 [F],[A]
   3986 :StoreRegOnStackSub64 [A],24
   3987 :Read64 [F],[A],8
   3988 :StoreRegOnStackSub64 [A],16
   3989 :Read64 [F],[A],16
   3990 :StoreRegOnStackSub64 [A],8
   3991 :GetPointerOfStackSub [A],24
   3992 :StoreRegToReg64 [A],[F]
   3993 :Store64 [A], 48
   3997 :DecrementStackPointer [A]
   3998 :Debug_FuncEnd 
   3999 :Ret 
---ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:String_t<char>&imut: 
   4000 :Store64 [A], 24
   4004 :IncrementStackPointer [A]
   4005 :Debug_FuncStart 
   4006 :Debug_LineEnter 
   4007 :StoreRegToReg64 [D],[A]
   4008 :Debug_LineEnter 
   4009 :StoreRegToReg64 [A],[B]
   4010 :StoreRegToReg64 [E],[C]
   4011 :StoreRegToReg64 [C],[D]
   4012 :Push64 [A]
   4013 :Call {ULang:String_t<char>:iStr^ULang:String_t<char>&imut}
   4017 :Pop64 [A]
   4018 :StoreFromPtrToReg64 [F],[B]
   4019 :StoreRegOnStackSub64 [B],24
   4020 :Read64 [F],[B],8
   4021 :StoreRegOnStackSub64 [B],16
   4022 :StoreRegToReg64 [B],[C]
   4023 :StoreRegOnStackSub64 [C],8
   4024 :GetPointerOfStackSub [C],8
   4025 :StoreRegToReg64 [C],[B]
   4026 :StoreRegToReg64 [C],[D]
   4027 :GetPointerOfStackSub [E],24
   4028 :StoreRegToReg64 [E],[F]
   4029 :StoreRegToReg64 [F],[E]
   4030 :Push64 [A]
   4031 :Push64 [B]
   4032 :Call {ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut}
   4036 :Pop64 [B]
   4037 :Pop64 [A]
   4038 :StoreRegToReg64 [A],[D]
   4039 :GetFromStackSub64 [E],8
   4040 :Call {ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:String_t<char>&imut}
   4044 :Store64 [A], 24
   4048 :DecrementStackPointer [A]
   4049 :Debug_FuncEnd 
   4050 :Ret 
---ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut: 

   //File:/Types/String.uc
   //Line:61

   4051 :Store64 [A], 16
   4055 :IncrementStackPointer [A]
   4056 :Debug_FuncStart 
   4057 :Debug_LineEnter 
   4058 :StoreRegToReg64 [D],[A]
   4059 :StoreRegToReg64 [A],[B]
   4060 :StoreRegToReg64 [A],[D]

   //File:/Types/String.uc
   //Line:62

   4061 :Push64 [E]
   4062 :Call {ULang:String_t<char>:iStr^ULang:String_t<char>&imut}
   4066 :Pop64 [E]
   4067 :StoreFromPtrToReg64 [F],[A]
   4068 :StoreRegOnStackSub64 [A],16
   4069 :Read64 [F],[A],8
   4070 :StoreRegOnStackSub64 [A],8

   //File:/Types/String.uc
   //Line:65

   4071 :GetPointerOfStackSub [A],16
   4072 :StoreRegToReg64 [E],[B]
   4073 :StoreRegToReg64 [A],[D]
   4074 :StoreRegToReg64 [B],[E]
   4075 :Call {ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut}
   4079 :Store64 [A], 16
   4083 :DecrementStackPointer [A]
   4084 :Debug_FuncEnd 
   4085 :Ret 
---ULang:String_t<char>:(&notequal&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut: 
   4086 :Debug_FuncStart 
   4087 :Debug_LineEnter 
   4088 :StoreRegToReg64 [D],[A]
   4089 :StoreRegToReg64 [A],[B]
   4090 :StoreRegToReg64 [E],[C]

   //File:/Types/String.uc
   //Line:68

   4091 :StoreRegToReg64 [A],[D]
   4092 :StoreRegToReg64 [C],[E]
   4093 :Call {ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut}
   4097 :LNot8 [F],[A]
   4098 :StoreRegToReg8 [A],[F]
   4099 :Debug_FuncEnd 
   4100 :Ret 
---ULang:String_t<char>:(&Plus&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut: 
   4101 :Store64 [A], 56
   4105 :IncrementStackPointer [A]
   4106 :Debug_FuncStart 
   4107 :Debug_LineEnter 
   4108 :StoreRegToReg64 [D],[A]
   4109 :StoreFromPtrToReg64 [A],[B]
   4110 :StoreRegOnStackSub64 [B],56
   4111 :StoreFromPtrToReg64 [A],[B]
   4112 :StoreRegOnStackSub64 [B],48
   4113 :StoreFromPtrToReg64 [A],[B]
   4114 :StoreRegOnStackSub64 [B],40

   //File:/Types/String.uc
   //Line:70

   4115 :GetFromStackSub64 [B],40
   4116 :StoreRegOnStackSub64 [B],48
   4117 :StoreFromPtrToReg64 [A],[B]
   4118 :StoreRegOnStackSub64 [B],8
   4119 :GetFromStackSub64 [B],8
   4120 :StoreRegOnStackSub64 [B],32
   4121 :Debug_LineEnter 
   4122 :GetPointerOfStackSub [B],32
   4123 :StoreRegToReg64 [E],[C]
   4124 :StoreRegToReg64 [B],[D]

   //File:/Types/String.uc
   //Line:72

   4125 :StoreRegToReg64 [C],[E]
   4126 :Call {ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut}
   4130 :Debug_LineEnter 
   4131 :GetFromStackSub64 [A],32
   4132 :StoreRegOnStackSub64 [A],32
   4133 :GetFromStackSub64 [A],24
   4134 :StoreRegOnStackSub64 [A],24

   //File:/Types/String.uc
   //Line:73

   4135 :GetFromStackSub64 [A],16
   4136 :StoreRegOnStackSub64 [A],16
   4137 :GetPointerOfStackSub [A],32
   4138 :StoreRegToReg64 [A],[F]
   4139 :Store64 [A], 56
   4143 :DecrementStackPointer [A]
   4144 :Debug_FuncEnd 
   4145 :Ret 
---ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut: 
   4146 :Store64 [A], 16
   4150 :IncrementStackPointer [A]
   4151 :Debug_FuncStart 
   4152 :Debug_LineEnter 
   4153 :StoreRegToReg64 [D],[A]
   4154 :StoreRegToReg64 [E],[B]
   4155 :StoreRegToReg64 [B],[D]
   4156 :Push64 [A]
   4157 :Call {ULang:StringSpan_t<char>:iAsSpan^ULang:StringSpan_t<char>&imut}
   4161 :Pop64 [A]
   4162 :StoreFromPtrToReg64 [F],[B]
   4163 :StoreRegOnStackSub64 [B],16
   4164 :Read64 [F],[B],8
   4165 :StoreRegOnStackSub64 [B],8
   4166 :StoreRegToReg64 [A],[D]
   4167 :GetFromStackSub64 [B],16
   4168 :Push64 [B]
   4169 :GetFromStackSub64 [B],16
   4170 :Push64 [B]

   //File:/Types/String.uc
   //Line:78

   4171 :Call {ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>imut}
   4175 :Pop64 [A]
   4176 :Pop64 [A]
   4177 :Store64 [A], 16
   4181 :DecrementStackPointer [A]
   4182 :Debug_FuncEnd 
   4183 :Ret 
---ULang:String_t<char>:AsSpan^ULang:String_t<char>&: 
   4184 :Store64 [A], 16
   4188 :IncrementStackPointer [A]
   4189 :Debug_FuncStart 
   4190 :Debug_LineEnter 
   4191 :GetPointerOfStackSub [A],16
   4192 :StoreRegToReg64 [A],[D]
   4193 :Call {ULang:Span<char>:(&_new&)^ULang:Span<char>&}
   4197 :GetPointerOfStackSub [A],16
   4198 :StoreRegToReg64 [A],[F]

   //File:/Types/String.uc
   //Line:79

   4199 :Store64 [A], 16
   4203 :DecrementStackPointer [A]
   4204 :Debug_FuncEnd 
   4205 :Ret 
---ULang:String_t<char>:iAsSpan^ULang:String_t<char>&imut: 
   4206 :Store64 [A], 16
   4210 :IncrementStackPointer [A]
   4211 :Debug_FuncStart 

   //File:/Types/String.uc
   //Line:82

   4212 :Debug_LineEnter 

   //Line:83

   4213 :GetPointerOfStackSub [A],16
   4214 :StoreRegToReg64 [A],[D]
   4215 :Call {ULang:Span<char>:(&_new&)^ULang:Span<char>&}
   4219 :GetPointerOfStackSub [A],16
   4220 :StoreRegToReg64 [A],[F]
   4221 :Store64 [A], 16

   //File:/Types/String.uc
   //Line:85

   4225 :DecrementStackPointer [A]
   4226 :Debug_FuncEnd 
   4227 :Ret 
---ULang:String_t<char>:Str^ULang:String_t<char>&: 
   4228 :Store64 [A], 16
   4232 :IncrementStackPointer [A]
   4233 :Debug_FuncStart 
   4234 :Debug_LineEnter 
   4235 :GetPointerOfStackSub [A],16
   4236 :StoreRegToReg64 [A],[D]
   4237 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&}
   4241 :GetPointerOfStackSub [A],16
   4242 :StoreRegToReg64 [A],[F]
   4243 :Store64 [A], 16
   4247 :DecrementStackPointer [A]
   4248 :Debug_FuncEnd 
   4249 :Ret 
---ULang:String_t<char>:iStr^ULang:String_t<char>&imut: 
   4250 :Store64 [A], 16
   4254 :IncrementStackPointer [A]
   4255 :Debug_FuncStart 
   4256 :Debug_LineEnter 
   4257 :GetPointerOfStackSub [A],16
   4258 :StoreRegToReg64 [A],[D]
   4259 :Call {ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&}
   4263 :GetPointerOfStackSub [A],16
   4264 :StoreRegToReg64 [A],[F]

   //File:/Types/String.uc
   //Line:89

   4265 :Store64 [A], 16
   4269 :DecrementStackPointer [A]
   4270 :Debug_FuncEnd 
   4271 :Ret 
---ULang:String_t<char>:(&Index&)^ULang:String_t<char>&,ULang:Range_t<uintptr>: 
   4272 :Store64 [A], 32
   4276 :IncrementStackPointer [A]
   4277 :Debug_FuncStart 
   4278 :Debug_LineEnter 
   4279 :Debug_LineEnter 
   4280 :StoreRegToReg64 [D],[A]
   4281 :StoreRegToReg64 [A],[D]
   4282 :Call {ULang:String_t<char>:Str^ULang:String_t<char>&}
   4286 :StoreFromPtrToReg64 [F],[A]
   4287 :StoreRegOnStackSub64 [A],32
   4288 :Read64 [F],[A],8
   4289 :StoreRegOnStackSub64 [A],24
   4290 :GetPointerOfStackSub [A],32
   4291 :GetFromStackSub64 [B],48
   4292 :StoreRegOnStackSub64 [B],48
   4293 :GetFromStackSub64 [B],56
   4294 :StoreRegOnStackSub64 [B],56
   4295 :StoreRegToReg64 [A],[D]
   4296 :GetFromStackSub64 [B],48
   4297 :Push64 [B]
   4298 :GetFromStackSub64 [B],48
   4299 :Push64 [B]
   4300 :Call {ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,ULang:Range_t<uintptr>}
   4304 :Pop64 [A]
   4305 :Pop64 [A]
   4306 :StoreFromPtrToReg64 [F],[A]
   4307 :StoreRegOnStackSub64 [A],16
   4308 :Read64 [F],[A],8
   4309 :StoreRegOnStackSub64 [A],8

   //File:/Types/String.uc
   //Line:91

   4310 :GetPointerOfStackSub [A],16
   4311 :StoreRegToReg64 [A],[F]
   4312 :Store64 [A], 32
   4316 :DecrementStackPointer [A]
   4317 :Debug_FuncEnd 
   4318 :Ret 
---ULang:String_t<char>:(&Index&)^ULang:String_t<char>&imut,ULang:Range_t<uintptr>: 
   4319 :Store64 [A], 32
   4323 :IncrementStackPointer [A]
   4324 :Debug_FuncStart 

   //File:/Types/String.uc
   //Line:94

   4325 :Debug_LineEnter 
   4326 :Debug_LineEnter 
   4327 :StoreRegToReg64 [D],[A]
   4328 :StoreRegToReg64 [A],[D]
   4329 :Call {ULang:String_t<char>:Str^ULang:String_t<char>&}
   4333 :StoreFromPtrToReg64 [F],[A]
   4334 :StoreRegOnStackSub64 [A],32
   4335 :Read64 [F],[A],8
   4336 :StoreRegOnStackSub64 [A],24
   4337 :GetPointerOfStackSub [A],32
   4338 :GetFromStackSub64 [B],48
   4339 :StoreRegOnStackSub64 [B],48
   4340 :GetFromStackSub64 [B],56
   4341 :StoreRegOnStackSub64 [B],56
   4342 :StoreRegToReg64 [A],[D]
   4343 :GetFromStackSub64 [B],48
   4344 :Push64 [B]
   4345 :GetFromStackSub64 [B],48
   4346 :Push64 [B]
   4347 :Call {ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,ULang:Range_t<uintptr>}
   4351 :Pop64 [A]
   4352 :Pop64 [A]
   4353 :StoreFromPtrToReg64 [F],[A]
   4354 :StoreRegOnStackSub64 [A],16
   4355 :Read64 [F],[A],8
   4356 :StoreRegOnStackSub64 [A],8
   4357 :GetPointerOfStackSub [A],16
   4358 :StoreRegToReg64 [A],[F]
   4359 :Store64 [A], 32
   4363 :DecrementStackPointer [A]
   4364 :Debug_FuncEnd 
   4365 :Ret 
---ULang:String_t<char>:(&_de-init&): 
   4366 :Store64 [A], 24
   4370 :IncrementStackPointer [A]
   4371 :Debug_FuncStart 
   4372 :Debug_LineEnter 
   4373 :GetPointerOfStackSub [A],24
   4374 :StoreRegToReg64 [A],[D]
   4375 :Call {ULang:Vector<char>:(&_drop&)^ULang:Vector<char>&}
   4379 :Store64 [A], 24

   //Line:97

   4383 :DecrementStackPointer [A]
   4384 :Debug_FuncEnd 
   4385 :Ret 
---ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:(&_drop&)^ULang:Result<ULang:String_t<char>,ULang:OpenFileError>&: 
   4386 :Store64 [A], 1
   4390 :IncrementStackPointer [A]
   4391 :Debug_FuncStart 
   4392 :Store8 [A],0
   4393 :StoreFromPtrToReg8 [D],[B]
   4394 :notequalto8 [B],[A],[F]
   4395 :Jumpif [F],{4401}
   4399 :StoreRegOnStackSub8 [F],1
   4400 :LEA_A [D],[A],1
   4401 :Store64 [A], 1
   4405 :DecrementStackPointer [A]
   4406 :Debug_FuncEnd 
   4407 :Ret 
---ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&: 
   4408 :Debug_FuncStart 
   4409 :Debug_LineEnter 
   4410 :Store64 [A], 0
   4414 :StoreRegToPtr64 [A],[D]
   4415 :Debug_LineEnter 
   4416 :Store64 [B], 0
   4420 :Load64 [D],[B],8
   4421 :Debug_FuncEnd 
   4422 :Ret 
---ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr: 
   4423 :Debug_FuncStart 
   4424 :Debug_LineEnter 
   4425 :StoreRegToReg64 [E],[A]
   4426 :StoreRegToPtr64 [A],[D]

   //StackFrameSize:16

   4427 :Debug_LineEnter 
   4428 :StoreRegToReg64 [F],[B]
   4429 :Load64 [D],[B],8

   //File:/Types/String.uc
   //Line:101

   4430 :Debug_FuncEnd 
   4431 :Ret 
---ULang:Span<uint8>:Size^ULang:Span<uint8>&imut: 
   4432 :Debug_FuncStart 
   4433 :Debug_LineEnter 
   4434 :Read64 [D],[A],8
   4435 :StoreRegToReg64 [A],[F]
   4436 :Debug_FuncEnd 
   4437 :Ret 
---ULang:Span<uint8>:Data^ULang:Span<uint8>&: 
   4438 :Debug_FuncStart 
   4439 :Debug_LineEnter 
   4440 :StoreFromPtrToReg64 [D],[A]
   4441 :StoreRegToReg64 [A],[F]
   4442 :Debug_FuncEnd 
   4443 :Ret 
---ULang:Span<uint8>:iData^ULang:Span<uint8>&imut: 
   4444 :Debug_FuncStart 
   4445 :Debug_LineEnter 
   4446 :StoreFromPtrToReg64 [D],[A]
   4447 :StoreRegToReg64 [A],[F]
   4448 :Debug_FuncEnd 
   4449 :Ret 
---ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,uptr: 
   4450 :Store64 [A], 8
   4454 :IncrementStackPointer [A]
   4455 :Debug_FuncStart 
   4456 :Debug_LineEnter 
   4457 :StoreFromPtrToReg64 [D],[A]
   4458 :StoreRegToReg64 [E],[B]
   4459 :Store64 [C], 1

   //File:/Types/String.uc
   //Line:103

   4463 :MultU64 [B],[C],[F]
   4464 :StoreRegOnStackSub64 [F],8
   4465 :GetFromStackSub64 [F],8
   4466 :Add64 [A],[F],[F]
   4467 :Store64 [A], 8
   4471 :DecrementStackPointer [A]
   4472 :Debug_FuncEnd 
   4473 :Ret 
---ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&imut,uptr: 
   4474 :Store64 [A], 8

   //File:/Types/String.uc
   //Line:106

   4478 :IncrementStackPointer [A]
   4479 :Debug_FuncStart 
   4480 :Debug_LineEnter 
   4481 :StoreFromPtrToReg64 [D],[A]
   4482 :StoreRegToReg64 [E],[B]
   4483 :Store64 [C], 1
   4487 :MultU64 [B],[C],[F]
   4488 :StoreRegOnStackSub64 [F],8
   4489 :GetFromStackSub64 [F],8
   4490 :Add64 [A],[F],[F]
   4491 :Store64 [A], 8
   4495 :DecrementStackPointer [A]
   4496 :Debug_FuncEnd 
   4497 :Ret 
---ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,ULang:Range_t<uintptr>: 
   4498 :Store64 [A], 32
   4502 :IncrementStackPointer [A]
   4503 :Debug_FuncStart 
   4504 :Debug_LineEnter 
   4505 :GetPointerOfStackSub [A],32
   4506 :Debug_LineEnter 
   4507 :StoreFromPtrToReg64 [D],[B]
   4508 :GetPointerOfStackSub [C],56
   4509 :StoreRegToReg64 [C],[D]
   4510 :Push64 [A]
   4511 :Push64 [B]
   4512 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   4516 :Pop64 [B]
   4517 :Pop64 [A]

   //StackFrameSize:16

   4518 :Store64 [C], 1
   4522 :StoreRegToReg64 [F],[D]
   4523 :MultU64 [D],[C],[F]
   4524 :StoreRegToReg64 [F],[E]
   4525 :Add64 [B],[E],[F]
   4526 :GetPointerOfStackSub [B],56
   4527 :StoreRegToReg64 [B],[D]
   4528 :StoreRegOnStackSub64 [F],16
   4529 :Push64 [A]
   4530 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   4534 :Pop64 [A]
   4535 :GetPointerOfStackSub [B],56
   4536 :StoreRegToReg64 [B],[D]
   4537 :StoreRegToReg64 [F],[C]
   4538 :Push64 [A]
   4539 :Push64 [C]
   4540 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   4544 :Pop64 [C]
   4545 :Pop64 [A]
   4546 :StoreRegToReg64 [F],[B]
   4547 :Sub64 [C],[B],[F]
   4548 :StoreRegToReg64 [A],[D]
   4549 :GetFromStackSub64 [E],16
   4550 :StoreRegOnStackSub64 [F],8
   4551 :GetFromStackSub64 [F],8
   4552 :Call {ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr}
   4556 :GetPointerOfStackSub [A],32

   //File:/Types/String.uc
   //Line:0

   4557 :StoreRegToReg64 [A],[F]
   4558 :Store64 [A], 32
   4562 :DecrementStackPointer [A]
   4563 :Debug_FuncEnd 
   4564 :Ret 
---ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&imut,ULang:Range_t<uintptr>: 
   4565 :Store64 [A], 32
   4569 :IncrementStackPointer [A]
   4570 :Debug_FuncStart 
   4571 :Debug_LineEnter 
   4572 :GetPointerOfStackSub [A],32
   4573 :Debug_LineEnter 

   //StackFrameSize:16

   4574 :StoreFromPtrToReg64 [D],[B]
   4575 :GetPointerOfStackSub [C],56
   4576 :StoreRegToReg64 [C],[D]

   //File:/Types/String.uc
   //Line:0

   4577 :Push64 [A]
   4578 :Push64 [B]
   4579 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   4583 :Pop64 [B]
   4584 :Pop64 [A]
   4585 :Store64 [C], 1
   4589 :StoreRegToReg64 [F],[D]
   4590 :MultU64 [D],[C],[F]
   4591 :StoreRegToReg64 [F],[E]
   4592 :Add64 [B],[E],[F]
   4593 :GetPointerOfStackSub [B],56

   //StackFrameSize:16

   4594 :StoreRegToReg64 [B],[D]
   4595 :StoreRegOnStackSub64 [F],16
   4596 :Push64 [A]

   //File:/Types/String.uc
   //Line:0

   4597 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   4601 :Pop64 [A]
   4602 :GetPointerOfStackSub [B],56
   4603 :StoreRegToReg64 [B],[D]
   4604 :StoreRegToReg64 [F],[C]
   4605 :Push64 [A]
   4606 :Push64 [C]
   4607 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   4611 :Pop64 [C]
   4612 :Pop64 [A]
   4613 :StoreRegToReg64 [F],[B]

   //StackFrameSize:16

   4614 :Sub64 [C],[B],[F]
   4615 :StoreRegToReg64 [A],[D]
   4616 :GetFromStackSub64 [E],16

   //File:/Types/String.uc
   //Line:0

   4617 :StoreRegOnStackSub64 [F],8
   4618 :GetFromStackSub64 [F],8
   4619 :Call {ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr}
   4623 :GetPointerOfStackSub [A],32
   4624 :StoreRegToReg64 [A],[F]
   4625 :Store64 [A], 32
   4629 :DecrementStackPointer [A]
   4630 :Debug_FuncEnd 
   4631 :Ret 
---ULang:Vector<uint8>:(&_new&)^ULang:Vector<uint8>&: 
   4632 :Debug_FuncStart 
   4633 :Debug_LineEnter 

   //StackFrameSize:32

   4634 :Store64 [A], 0
   4638 :StoreRegToPtr64 [A],[D]
   4639 :Debug_LineEnter 
   4640 :Store64 [B], 0
   4644 :Load64 [D],[B],8
   4645 :Debug_LineEnter 
   4646 :Store64 [C], 0
   4650 :Load64 [D],[C],16
   4651 :Debug_FuncEnd 
   4652 :Ret 
---ULang:Vector<uint8>:(&_drop&)^ULang:Vector<uint8>&: 
   4653 :Store64 [A], 1
   4657 :IncrementStackPointer [A]
   4658 :Debug_FuncStart 
   4659 :Debug_LineEnter 
   4660 :StoreFromPtrToReg64 [D],[A]
   4661 :StoreRegToReg64 [A],[C]
   4662 :StoreRegToReg64 [C],[B]
   4663 :Debug_LineEnter 
   4664 :StoreRegToReg64 [B],[C]
   4665 :Store64 [E], 0
   4669 :notequalto8 [B],[E],[F]
   4670 :LNot8 [F],[B]
   4671 :Jumpif [B],{4679}
   4675 :StoreRegOnStackSub8 [B],1
   4676 :Debug_LineEnter 
   4677 :StoreFromPtrToReg64 [D],[A]
   4678 :Free [A]

   //StackFrameSize:32

   4679 :Store64 [A], 1
   4683 :DecrementStackPointer [A]
   4684 :Debug_FuncEnd 
   4685 :Ret 
---ULang:Vector<uint8>:iData^ULang:Vector<uint8>&imut: 
   4686 :Debug_FuncStart 
   4687 :Debug_LineEnter 
   4688 :StoreFromPtrToReg64 [D],[A]
   4689 :StoreRegToReg64 [A],[F]
   4690 :Debug_FuncEnd 
   4691 :Ret 
---ULang:Vector<uint8>:Data^ULang:Vector<uint8>&: 
   4692 :Debug_FuncStart 
   4693 :Debug_LineEnter 
   4694 :StoreFromPtrToReg64 [D],[A]
   4695 :StoreRegToReg64 [A],[F]
   4696 :Debug_FuncEnd 
   4697 :Ret 
---ULang:Vector<uint8>:Size^ULang:Vector<uint8>&imut: 
   4698 :Debug_FuncStart 
   4699 :Debug_LineEnter 
   4700 :Read64 [D],[A],8
   4701 :StoreRegToReg64 [A],[F]
   4702 :Debug_FuncEnd 
   4703 :Ret 
---ULang:Vector<uint8>:Capacity^ULang:Vector<uint8>&imut: 
   4704 :Debug_FuncStart 
   4705 :Debug_LineEnter 
   4706 :Read64 [D],[A],16
   4707 :StoreRegToReg64 [A],[F]
   4708 :Debug_FuncEnd 
   4709 :Ret 
---ULang:Vector<uint8>:Resize^ULang:Vector<uint8>&,uptr: 
   4710 :Debug_FuncStart 
   4711 :Debug_LineEnter 
   4712 :StoreRegToReg64 [D],[A]
   4713 :StoreRegToReg64 [E],[B]
   4714 :StoreRegToReg64 [D],[C]
   4715 :StoreRegToReg64 [A],[D]
   4716 :StoreRegToReg64 [E],[F]
   4717 :StoreRegToReg64 [B],[E]
   4718 :Push64 [C]
   4719 :Push64 [F]
   4720 :Call {ULang:Vector<uint8>:Reserve^ULang:Vector<uint8>&,uptr}

   //StackFrameSize:24

   4724 :Pop64 [F]
   4725 :Pop64 [C]
   4726 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:0

   4727 :StoreRegToReg64 [F],[A]
   4728 :Load64 [C],[A],8
   4729 :Debug_FuncEnd 
   4730 :Ret 
---ULang:Vector<uint8>:Reserve^ULang:Vector<uint8>&,uptr: 
   4731 :Store64 [A], 92
   4735 :IncrementStackPointer [A]
   4736 :Debug_FuncStart 
   4737 :Debug_LineEnter 
   4738 :StoreRegToReg64 [E],[A]
   4739 :Read64 [D],[B],16
   4740 :greaterthan8 [A],[B],[F]
   4741 :LNot8 [F],[C]

   //StackFrameSize:1

   4742 :Jumpif [C],{4900}
   4746 :StoreRegOnStackSub8 [C],92
   4747 :Debug_LineEnter 
   4748 :Read64 [D],[A],8
   4749 :StoreRegToReg64 [A],[B]
   4750 :StoreRegToReg64 [B],[C]
   4751 :Debug_LineEnter 
   4752 :StoreFromPtrToReg64 [D],[B]
   4753 :StoreRegOnStackSub64 [D],91
   4754 :StoreRegToReg64 [B],[D]
   4755 :StoreRegToReg64 [D],[A]
   4756 :Debug_LineEnter 
   4757 :StoreRegToReg64 [E],[D]
   4758 :GetFromStackSub64 [B],91
   4759 :Load64 [B],[D],16
   4760 :Debug_LineEnter 
   4761 :StoreRegToReg64 [E],[B]
   4762 :Store64 [D], 1
   4766 :MultU64 [B],[D],[F]
   4767 :Malloc [F],[E]
   4768 :StoreRegOnStackSub64 [A],83
   4769 :Store64 [A], 0
   4773 :StoreRegOnStackSub64 [A],75
   4774 :StoreRegOnStackSub64 [B],67
   4775 :StoreRegOnStackSub64 [C],59
   4776 :StoreRegOnStackSub64 [D],51
   4777 :StoreRegOnStackSub64 [E],43
   4778 :GetFromStackSub64 [A],75

   //[A] = ULang:Span<uint8>:(&_new&):(&this&)

   4779 :GetFromStackSub64 [B],67

   //File:/Types/Span.uc
   //Line:11

   4780 :equalto64 [A],[B],[F]
   4781 :Jumpif [F],{4808}
   4785 :StoreRegOnStackSub8 [F],35
   4786 :StoreRegOnStackSub64 [A],34
   4787 :GetFromStackSub64 [A],75

   //[A] = ULang:Span<uint8>:(&_new&):(&this&)

   4788 :GetFromStackSub64 [B],51

   //File:/Types/Span.uc
   //Line:13

   4789 :MultU64 [A],[B],[F]
   4790 :StoreRegToReg64 [F],[A]
   4791 :GetFromStackSub64 [F],43
   4792 :Add64 [F],[A],[F]
   4793 :Debug_LineEnter 
   4794 :Store8 [A],0

   //File:/Types/Span.uc
   //Line:14

   4795 :StoreRegToPtr8 [A],[F]
   4796 :Store64 [A], 1
   4800 :GetFromStackSub64 [B],75

   //File:/Types/Span.uc
   //Line:15

   4801 :Add64 [B],[A],[F]
   4802 :StoreRegToReg64 [F],[A]
   4803 :StoreRegOnStackSub64 [A],75

   //StackFrameSize:8

   4804 :Jump {4778}
   4808 :GetFromStackSub64 [A],91
   4809 :GetFromStackSub64 [B],43
   4810 :StoreRegToPtr64 [B],[A]
   4811 :Debug_LineEnter 
   4812 :Store32 [B], 0
   4814 :StoreRegToReg32 [B],[D]
   4815 :StoreRegToReg32 [D],[C]
   4816 :StoreRegOnStackSub64 [C],26
   4817 :GetFromStackSub64 [C],26
   4818 :StoreRegOnStackSub64 [C],26
   4819 :GetFromStackSub64 [C],59
   4820 :StoreRegOnStackSub64 [C],59
   4821 :GetFromStackSub64 [C],26
   4822 :GetFromStackSub64 [D],59
   4823 :lessthan8 [C],[D],[F]
   4824 :LNot8 [F],[C]
   4825 :Jumpif [C],{4875}

   //File:/Types/Span.uc
   //Line:19

   4829 :StoreRegOnStackSub8 [C],18
   4830 :Debug_LineEnter 
   4831 :GetFromStackSub64 [A],83
   4832 :StoreRegOnStackSub64 [A],83
   4833 :GetFromStackSub64 [A],26
   4834 :StoreRegOnStackSub64 [A],26
   4835 :Store64 [A], 1
   4839 :GetFromStackSub64 [C],26
   4840 :MultU64 [C],[A],[F]
   4841 :StoreRegToReg64 [F],[C]
   4842 :GetFromStackSub64 [D],83
   4843 :Add64 [D],[C],[F]
   4844 :StoreFromPtrToReg64 [F],[D]
   4845 :GetFromStackSub64 [E],91
   4846 :StoreFromPtrToReg64 [E],[E]
   4847 :StoreRegOnStackSub64 [E],17

   //StackFrameSize:32

   4848 :GetFromStackSub64 [A],26
   4849 :StoreRegOnStackSub64 [A],26
   4850 :Store64 [A], 1
   4854 :GetFromStackSub64 [B],26
   4855 :MultU64 [B],[A],[F]
   4856 :StoreRegOnStackSub64 [F],9
   4857 :GetFromStackSub64 [F],9
   4858 :Add64 [E],[F],[F]
   4859 :StoreRegToPtr8 [D],[F]
   4860 :Debug_LineEnter 
   4861 :GetFromStackSub64 [A],26
   4862 :StoreRegOnStackSub64 [A],26
   4863 :Store64 [A], 1
   4867 :GetFromStackSub64 [B],26
   4868 :Add64 [B],[A],[F]
   4869 :StoreRegToReg64 [F],[A]
   4870 :StoreRegOnStackSub64 [A],26
   4871 :Jump {4817}
   4875 :Debug_LineEnter 
   4876 :GetFromStackSub64 [A],83
   4877 :StoreRegOnStackSub64 [A],83
   4878 :GetFromStackSub64 [D],83
   4879 :StoreRegToReg64 [D],[A]
   4880 :Debug_LineEnter 
   4881 :StoreRegToReg64 [A],[D]
   4882 :Store64 [E], 0
   4886 :equalto64 [A],[E],[F]
   4887 :LNot8 [F],[A]
   4888 :StoreRegOnStackSub8 [A],1
   4889 :GetFromStackSub8 [A],1
   4890 :StoreRegToReg8 [A],[B]
   4891 :Jumpif [B],{4900}
   4895 :Debug_LineEnter 
   4896 :GetFromStackSub64 [A],83
   4897 :StoreRegOnStackSub64 [A],83
   4898 :GetFromStackSub64 [A],83
   4899 :Free [A]
   4900 :Store64 [A], 92
   4904 :DecrementStackPointer [A]
   4905 :Debug_FuncEnd 
   4906 :Ret 
---ULang:Vector<uint8>:Clear^ULang:Vector<uint8>&: 
   4907 :Debug_FuncStart 
   4908 :Debug_LineEnter 
   4909 :Store64 [A], 0

   //StackFrameSize:32

   4913 :Load64 [D],[A],8
   4914 :Debug_FuncEnd 
   4915 :Ret 
---ULang:Vector<uint8>:Pop^ULang:Vector<uint8>&: 

   //File:/Types/Span.uc
   //Line:0

   4916 :Debug_FuncStart 
   4917 :Debug_FuncEnd 

   //Line:22

   4918 :Ret 
---ULang:Vector<uint8>:Remove^ULang:Vector<uint8>&,uptr: 
   4919 :Debug_FuncStart 
   4920 :Debug_FuncEnd 
   4921 :Ret 
---ULang:Vector<uint8>:Push^ULang:Vector<uint8>&,u8&imut: 
   4922 :Store64 [A], 8
   4926 :IncrementStackPointer [A]
   4927 :Debug_FuncStart 
   4928 :Debug_LineEnter 
   4929 :StoreRegToReg64 [D],[A]
   4930 :Read64 [D],[B],8
   4931 :Store64 [C], 1
   4935 :Add64 [B],[C],[F]
   4936 :StoreRegOnStackSub64 [D],8
   4937 :StoreRegToReg64 [A],[D]
   4938 :StoreRegToReg64 [F],[E]
   4939 :Call {ULang:Vector<uint8>:Resize^ULang:Vector<uint8>&,uptr}
   4943 :Debug_LineEnter 
   4944 :StoreFromPtrToReg64 [E],[A]
   4945 :GetFromStackSub64 [B],8
   4946 :StoreRegOnStackSub64 [B],8
   4947 :GetFromStackSub64 [B],8
   4948 :StoreRegOnStackSub64 [B],8
   4949 :GetFromStackSub64 [B],8
   4950 :Read64 [B],[B],8
   4951 :StoreRegToReg64 [B],[C]
   4952 :Store64 [D], 1
   4956 :Sub64 [B],[D],[F]
   4957 :GetFromStackSub64 [D],8
   4958 :StoreRegToReg64 [F],[E]
   4959 :Push8 [A]
   4960 :Call {ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,uptr}
   4964 :Pop8 [A]
   4965 :StoreRegToPtr8 [A],[F]
   4966 :Store64 [B], 8
   4970 :DecrementStackPointer [B]
   4971 :Debug_FuncEnd 
   4972 :Ret 
---ULang:Vector<uint8>:Push^ULang:Vector<uint8>&,u8mov: 
   4973 :Store64 [A], 9
   4977 :IncrementStackPointer [A]
   4978 :Debug_FuncStart 
   4979 :Debug_LineEnter 
   4980 :StoreRegToReg64 [D],[A]

   //File:/Types/Vector.uc
   //Line:9

   4981 :Read64 [D],[B],8
   4982 :Store64 [C], 1
   4986 :Add64 [B],[C],[F]

   //Line:10

   4987 :StoreRegOnStackSub64 [D],9
   4988 :StoreRegToReg64 [A],[D]
   4989 :StoreRegOnStackSub8 [E],1
   4990 :StoreRegToReg64 [F],[E]
   4991 :Call {ULang:Vector<uint8>:Resize^ULang:Vector<uint8>&,uptr}
   4995 :Debug_LineEnter 
   4996 :GetFromStackSub8 [A],1
   4997 :StoreRegOnStackSub8 [A],1
   4998 :GetFromStackSub64 [A],9

   //StackFrameSize:1

   4999 :StoreRegOnStackSub64 [A],9
   5000 :GetFromStackSub64 [A],9

   //[A] = ULang:Vector<uint8>:(&_new&):(&this&)

   5001 :StoreRegOnStackSub64 [A],9

   //File:/Types/Vector.uc
   //Line:13

   5002 :GetFromStackSub64 [A],9
   5003 :Read64 [A],[A],8
   5004 :StoreRegToReg64 [A],[B]
   5005 :Store64 [C], 1
   5009 :Sub64 [A],[C],[F]
   5010 :GetFromStackSub64 [D],9
   5011 :StoreRegToReg64 [F],[E]
   5012 :Call {ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,uptr}
   5016 :GetFromStackSub8 [A],1
   5017 :StoreRegToPtr8 [A],[F]
   5018 :Store64 [A], 9
   5022 :DecrementStackPointer [A]
   5023 :Debug_FuncEnd 
   5024 :Ret 
---ULang:Vector<uint8>:Insert^ULang:Vector<uint8>&,uptr,u8&imut: 
   5025 :Debug_FuncStart 
   5026 :Debug_FuncEnd 
   5027 :Ret 
---ULang:Vector<uint8>:Insert^ULang:Vector<uint8>&,uptr,u8mov: 
   5028 :Debug_FuncStart 

   //[C] = ULang:Vector<uint8>:(&_drop&):(&this&)

   5029 :Debug_FuncEnd 
   5030 :Ret 
---ULang:Vector<uint8>:Append^ULang:Vector<uint8>&,ULang:Span<uint8>imut: 
   5031 :Debug_FuncStart 
   5032 :Debug_FuncEnd 

   //File:/Types/Vector.uc
   //Line:17

   5033 :Ret 
---ULang:Vector<uint8>:Append^ULang:Vector<uint8>&,ULang:Span<uint8>mov: 
   5034 :Debug_FuncStart 
   5035 :Debug_FuncEnd 
   5036 :Ret 
---ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,uptr: 
   5037 :Store64 [A], 8
   5041 :IncrementStackPointer [A]
   5042 :Debug_FuncStart 
   5043 :Debug_LineEnter 
   5044 :StoreFromPtrToReg64 [D],[A]

   //File:/Types/Vector.uc
   //Line:20

   5045 :StoreRegToReg64 [E],[B]
   5046 :Store64 [C], 1
   5050 :MultU64 [B],[C],[F]

   //File:/Types/Vector.uc
   //Line:21

   5051 :StoreRegOnStackSub64 [F],8
   5052 :GetFromStackSub64 [F],8
   5053 :Add64 [A],[F],[F]
   5054 :Store64 [A], 8
   5058 :DecrementStackPointer [A]
   5059 :Debug_FuncEnd 
   5060 :Ret 
---ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&imut,uptr: 
   5061 :Store64 [A], 8
   5065 :IncrementStackPointer [A]
   5066 :Debug_FuncStart 
   5067 :Debug_LineEnter 
   5068 :StoreFromPtrToReg64 [D],[A]
   5069 :StoreRegToReg64 [E],[B]
   5070 :Store64 [C], 1
   5074 :MultU64 [B],[C],[F]

   //StackFrameSize:92

   5075 :StoreRegOnStackSub64 [F],8
   5076 :GetFromStackSub64 [F],8
   5077 :Add64 [A],[F],[F]

   //File:/Types/Vector.uc
   //Line:28

   5078 :Store64 [A], 8
   5082 :DecrementStackPointer [A]
   5083 :Debug_FuncEnd 
   5084 :Ret 
---ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,ULang:Range_t<uintptr>: 
   5085 :Store64 [A], 32
   5089 :IncrementStackPointer [A]
   5090 :Debug_FuncStart 
   5091 :Debug_LineEnter 

   //Line:30

   5092 :Debug_LineEnter 
   5093 :StoreRegToReg64 [D],[A]
   5094 :StoreRegToReg64 [A],[D]
   5095 :Call {ULang:Vector<uint8>:AsSpan^ULang:Vector<uint8>&}
   5099 :StoreFromPtrToReg64 [F],[A]
   5100 :StoreRegOnStackSub64 [A],32

   //Line:34

   5101 :Read64 [F],[A],8
   5102 :StoreRegOnStackSub64 [A],24
   5103 :GetPointerOfStackSub [A],32
   5104 :GetFromStackSub64 [B],48
   5105 :StoreRegOnStackSub64 [B],48
   5106 :GetFromStackSub64 [B],56
   5107 :StoreRegOnStackSub64 [B],56
   5108 :StoreRegToReg64 [A],[D]
   5109 :GetFromStackSub64 [B],48
   5110 :Push64 [B]
   5111 :GetFromStackSub64 [B],48
   5112 :Push64 [B]
   5113 :Call {ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,ULang:Range_t<uintptr>}
   5117 :Pop64 [A]
   5118 :Pop64 [A]
   5119 :StoreFromPtrToReg64 [F],[A]
   5120 :StoreRegOnStackSub64 [A],16
   5121 :Read64 [F],[A],8
   5122 :StoreRegOnStackSub64 [A],8
   5123 :GetPointerOfStackSub [A],16
   5124 :StoreRegToReg64 [A],[F]
   5125 :Store64 [A], 32
   5129 :DecrementStackPointer [A]
   5130 :Debug_FuncEnd 
   5131 :Ret 
---ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&imut,ULang:Range_t<uintptr>: 
   5132 :Store64 [A], 32
   5136 :IncrementStackPointer [A]
   5137 :Debug_FuncStart 
   5138 :Debug_LineEnter 
   5139 :Debug_LineEnter 
   5140 :StoreRegToReg64 [D],[A]
   5141 :StoreRegToReg64 [A],[D]
   5142 :Call {ULang:Vector<uint8>:AsSpan^ULang:Vector<uint8>&}
   5146 :StoreFromPtrToReg64 [F],[A]
   5147 :StoreRegOnStackSub64 [A],32
   5148 :Read64 [F],[A],8
   5149 :StoreRegOnStackSub64 [A],24
   5150 :GetPointerOfStackSub [A],32
   5151 :GetFromStackSub64 [B],48

   //Line:35

   5152 :StoreRegOnStackSub64 [B],48
   5153 :GetFromStackSub64 [B],56
   5154 :StoreRegOnStackSub64 [B],56
   5155 :StoreRegToReg64 [A],[D]
   5156 :GetFromStackSub64 [B],48
   5157 :Push64 [B]
   5158 :GetFromStackSub64 [B],48
   5159 :Push64 [B]
   5160 :Call {ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,ULang:Range_t<uintptr>}
   5164 :Pop64 [A]
   5165 :Pop64 [A]
   5166 :StoreFromPtrToReg64 [F],[A]
   5167 :StoreRegOnStackSub64 [A],16
   5168 :Read64 [F],[A],8
   5169 :StoreRegOnStackSub64 [A],8
   5170 :GetPointerOfStackSub [A],16

   //Line:36

   5171 :StoreRegToReg64 [A],[F]
   5172 :Store64 [A], 32
   5176 :DecrementStackPointer [A]
   5177 :Debug_FuncEnd 
   5178 :Ret 
---ULang:Vector<uint8>:AsSpan^ULang:Vector<uint8>&: 
   5179 :Store64 [A], 16
   5183 :IncrementStackPointer [A]
   5184 :Debug_FuncStart 
   5185 :Debug_LineEnter 
   5186 :GetPointerOfStackSub [A],16
   5187 :Debug_LineEnter 
   5188 :StoreFromPtrToReg64 [D],[B]
   5189 :Read64 [D],[C],8
   5190 :StoreRegToReg64 [A],[D]
   5191 :StoreRegToReg64 [B],[E]
   5192 :StoreRegToReg64 [C],[F]
   5193 :Call {ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr}
   5197 :GetPointerOfStackSub [A],16
   5198 :StoreRegToReg64 [A],[F]
   5199 :Store64 [A], 16
   5203 :DecrementStackPointer [A]
   5204 :Debug_FuncEnd 
   5205 :Ret 
---ULang:Vector<uint8>:iAsSpan^ULang:Vector<uint8>&imut: 
   5206 :Store64 [A], 16
   5210 :IncrementStackPointer [A]
   5211 :Debug_FuncStart 
   5212 :Debug_LineEnter 
   5213 :GetPointerOfStackSub [A],16
   5214 :Debug_LineEnter 
   5215 :StoreFromPtrToReg64 [D],[B]

   //Line:38

   5216 :Read64 [D],[C],8
   5217 :StoreRegToReg64 [A],[D]
   5218 :StoreRegToReg64 [B],[E]
   5219 :StoreRegToReg64 [C],[F]
   5220 :Call {ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr}
   5224 :GetPointerOfStackSub [A],16
   5225 :StoreRegToReg64 [A],[F]
   5226 :Store64 [A], 16
   5230 :DecrementStackPointer [A]
   5231 :Debug_FuncEnd 
   5232 :Ret 
---ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:(&_drop&)^ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>&: 
   5233 :Store64 [A], 1
   5237 :IncrementStackPointer [A]
   5238 :Debug_FuncStart 
   5239 :Store8 [A],0
   5240 :StoreFromPtrToReg8 [D],[B]
   5241 :notequalto8 [B],[A],[F]
   5242 :Jumpif [F],{5254}
   5246 :StoreRegOnStackSub8 [F],1
   5247 :LEA_A [D],[A],1
   5248 :Debug_LineEnter 
   5249 :StoreRegToReg64 [A],[D]
   5250 :Call {ULang:Vector<uint8>:(&_drop&)^ULang:Vector<uint8>&}
   5254 :Store64 [A], 1
   5258 :DecrementStackPointer [A]
   5259 :Debug_FuncEnd 

   //[A] = ULang:Vector<uint8>:Clear:(&this&)

   5260 :Ret 
---ULang:Math:Max<sint32>^i32,i32: 
   5261 :Store64 [A], 1
   5265 :IncrementStackPointer [A]
   5266 :Debug_FuncStart 

   //File:/Types/Vector.uc
   //Line:48

   5267 :Debug_LineEnter 
   5268 :StoreRegToReg32 [D],[A]
   5269 :StoreRegToReg32 [E],[B]
   5270 :greaterthan8 [A],[B],[F]
   5271 :LNot8 [F],[C]
   5272 :Jumpif [C],{5283}
   5276 :StoreRegOnStackSub8 [C],1
   5277 :StoreRegToReg32 [D],[A]
   5278 :StoreRegToReg32 [A],[F]
   5279 :Jump {5286}
   5283 :Debug_LineEnter 
   5284 :StoreRegToReg32 [E],[A]
   5285 :StoreRegToReg32 [A],[F]
   5286 :Store64 [C], 1
   5290 :DecrementStackPointer [C]
   5291 :Debug_FuncEnd 
   5292 :Ret 
---ULang:Math:Min<sint32>^i32,i32: 
   5293 :Store64 [A], 1
   5297 :IncrementStackPointer [A]
   5298 :Debug_FuncStart 
   5299 :Debug_LineEnter 
   5300 :StoreRegToReg32 [D],[A]
   5301 :StoreRegToReg32 [E],[B]
   5302 :lessthan8 [A],[B],[F]
   5303 :LNot8 [F],[C]
   5304 :Jumpif [C],{5315}
   5308 :StoreRegOnStackSub8 [C],1
   5309 :StoreRegToReg32 [D],[A]
   5310 :StoreRegToReg32 [A],[F]
   5311 :Jump {5318}
   5315 :Debug_LineEnter 

   //File:/Types/Vector.uc
   //Line:53

   5316 :StoreRegToReg32 [E],[A]
   5317 :StoreRegToReg32 [A],[F]
   5318 :Store64 [C], 1
   5322 :DecrementStackPointer [C]
   5323 :Debug_FuncEnd 
   5324 :Ret 
---ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&,i32&: 
   5325 :Debug_FuncStart 
   5326 :Debug_LineEnter 
   5327 :StoreRegToReg64 [E],[A]
   5328 :StoreRegToPtr64 [A],[D]
   5329 :Debug_FuncEnd 
   5330 :Ret 
---ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&: 
   5331 :Debug_FuncStart 

   //Line:54

   5332 :Debug_LineEnter 
   5333 :StoreFromPtrToReg64 [D],[A]
   5334 :StoreRegToReg64 [A],[F]
   5335 :Debug_FuncEnd 
   5336 :Ret 
---ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&imut: 
   5337 :Debug_FuncStart 
   5338 :Debug_LineEnter 
   5339 :StoreFromPtrToReg64 [D],[A]
   5340 :StoreRegToReg64 [A],[F]
   5341 :Debug_FuncEnd 
   5342 :Ret 
---ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32&imut: 
   5343 :Debug_FuncStart 
   5344 :Debug_LineEnter 
   5345 :StoreFromPtrToReg64 [E],[A]
   5346 :StoreRegToReg64 [D],[B]
   5347 :StoreRegToReg64 [B],[D]
   5348 :Push32 [A]
   5349 :Call {ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&}
   5353 :Pop32 [A]
   5354 :StoreRegToPtr32 [A],[F]
   5355 :Debug_FuncEnd 
   5356 :Ret 
---ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32mov: 
   5357 :Debug_FuncStart 
   5358 :Debug_LineEnter 
   5359 :StoreRegToReg32 [E],[A]
   5360 :StoreRegToReg64 [D],[B]
   5361 :StoreRegToReg64 [B],[D]
   5362 :Push32 [A]
   5363 :Call {ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&}
   5367 :Pop32 [A]
   5368 :StoreRegToPtr32 [A],[F]
   5369 :Debug_FuncEnd 
   5370 :Ret 
---ULang:Ptr<sint32>:ReadPtr^ULang:Ptr<sint32>&imut: 
   5371 :Debug_FuncStart 
   5372 :Debug_LineEnter 
   5373 :StoreRegToReg64 [D],[A]
   5374 :StoreRegToReg64 [A],[D]

   //StackFrameSize:8

   5375 :Call {ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&imut}
   5379 :Debug_FuncEnd 
   5380 :Ret 
---ULang:Ptr<sint32>:(&IndirectMember&)^ULang:Ptr<sint32>&: 
   5381 :Debug_FuncStart 
   5382 :Debug_LineEnter 
   5383 :StoreRegToReg64 [D],[A]
   5384 :StoreRegToReg64 [A],[D]
   5385 :Call {ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&}
   5389 :Debug_FuncEnd 
   5390 :Ret 
---ULang:Ptr<sint32>:(&IndirectMember&)^ULang:Ptr<sint32>&imut: 
   5391 :Debug_FuncStart 
   5392 :Debug_LineEnter 
   5393 :StoreRegToReg64 [D],[A]
   5394 :StoreRegToReg64 [A],[D]
   5395 :Call {ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&imut}
   5399 :Debug_FuncEnd 

   //File:/Types/Vector.uc
   //Line:65

   5400 :Ret 
---ULang:Ptr<sint32>:ReassignTo^ULang:Ptr<sint32>&,i32&: 
   5401 :Debug_FuncStart 
   5402 :Debug_LineEnter 
   5403 :StoreRegToReg64 [E],[A]
   5404 :StoreRegToPtr64 [A],[D]
   5405 :Debug_FuncEnd 
   5406 :Ret 
---ULang:Ptr<sint32>:Make^i32&imut: 
   5407 :Store64 [A], 8
   5411 :IncrementStackPointer [A]
   5412 :Debug_FuncStart 
   5413 :Debug_LineEnter 
   5414 :GetPointerOfStackSub [A],8
   5415 :Debug_LineEnter 
   5416 :StoreRegToReg64 [D],[B]
   5417 :StoreRegToReg64 [A],[D]
   5418 :StoreRegToReg64 [B],[E]

   //StackFrameSize:32

   5419 :Call {ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&,i32&}
   5423 :GetFromStackSub64 [F],8
   5424 :Store64 [A], 8
   5428 :DecrementStackPointer [A]
   5429 :Debug_FuncEnd 
   5430 :Ret 
---ULang:Ptr<sint32>:Make^i32&: 
   5431 :Store64 [A], 8
   5435 :IncrementStackPointer [A]
   5436 :Debug_FuncStart 
   5437 :Debug_LineEnter 
   5438 :GetPointerOfStackSub [A],8
   5439 :Debug_LineEnter 
   5440 :StoreRegToReg64 [D],[B]
   5441 :StoreRegToReg64 [A],[D]
   5442 :StoreRegToReg64 [B],[E]
   5443 :Call {ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&,i32&}
   5447 :GetFromStackSub64 [F],8
   5448 :Store64 [A], 8
   5452 :DecrementStackPointer [A]
   5453 :Debug_FuncEnd 
   5454 :Ret 
---ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&: 
   5455 :Debug_FuncStart 
   5456 :Debug_FuncEnd 
   5457 :Ret 
---ULang:ptr<sint32>^i32&: 
   5458 :Debug_FuncStart 
   5459 :Debug_LineEnter 
   5460 :StoreRegToReg64 [D],[A]
   5461 :StoreRegToReg64 [A],[D]
   5462 :Call {ULang:Ptr<sint32>:Make^i32&}
   5466 :Debug_FuncEnd 

   //File:/Types/Vector.uc
   //Line:70
   //Line:71

   5467 :Ret 
---ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&: 
   5468 :Debug_FuncStart 
   5469 :Debug_LineEnter 
   5470 :Storef32 [A], 0.000000
   5472 :StoreRegToPtr32 [A],[D]
   5473 :Debug_LineEnter 
   5474 :Storef32 [B], 0.000000
   5476 :Load32 [D],[B],4
   5477 :Debug_FuncEnd 
   5478 :Ret 
---ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&,f32,f32: 
   5479 :Debug_FuncStart 
   5480 :Debug_LineEnter 
   5481 :StoreRegToReg32 [E],[A]
   5482 :StoreRegToPtr32 [A],[D]
   5483 :Debug_LineEnter 
   5484 :StoreRegToReg32 [F],[B]
   5485 :Load32 [D],[B],4
   5486 :Debug_FuncEnd 
   5487 :Ret 
---ULang:Vec2f_t<float32>:(&equal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut: 
   5488 :Store64 [A], 2
   5492 :IncrementStackPointer [A]
   5493 :Debug_FuncStart 
   5494 :StoreRegToReg64 [D],[A]
   5495 :Debug_LineEnter 
   5496 :Read32 [A],[B],4
   5497 :Read32 [E],[C],4
   5498 :equaltof32 [B],[C],[F]
   5499 :StoreRegToReg64 [D],[A]
   5500 :StoreFromPtrToReg32 [A],[B]
   5501 :StoreFromPtrToReg32 [E],[A]
   5502 :StoreRegOnStackSub8 [F],2
   5503 :equaltof32 [B],[A],[F]
   5504 :StoreRegOnStackSub8 [F],1
   5505 :GetFromStackSub8 [F],2
   5506 :GetFromStackSub8 [A],1
   5507 :LAnd8 [F],[A],[F]
   5508 :Store64 [A], 2

   //File:/Types/Vector.uc
   //Line:0

   5512 :DecrementStackPointer [A]
   5513 :Debug_FuncEnd 

   //Line:73

   5514 :Ret 
---ULang:Vec2f_t<float32>:(&notequal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut: 
   5515 :Debug_FuncStart 
   5516 :Debug_LineEnter 
   5517 :StoreRegToReg64 [D],[A]
   5518 :StoreRegToReg64 [A],[B]
   5519 :StoreRegToReg64 [E],[C]
   5520 :StoreRegToReg64 [A],[D]
   5521 :StoreRegToReg64 [C],[E]
   5522 :Call {ULang:Vec2f_t<float32>:(&equal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut}
   5526 :LNot8 [F],[A]
   5527 :StoreRegToReg8 [A],[F]
   5528 :Debug_FuncEnd 
   5529 :Ret 
---ULang:Vec2f_t<float32>:(&Compound_Plus&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut: 
   5530 :Store64 [A], 4

   //StackFrameSize:16

   5534 :IncrementStackPointer [A]
   5535 :Debug_FuncStart 
   5536 :StoreRegToReg64 [D],[A]

   //File:/Types/Vector.uc
   //Line:0

   5537 :Debug_LineEnter 
   5538 :StoreRegToReg64 [D],[B]

   //Line:74

   5539 :StoreFromPtrToReg32 [B],[C]
   5540 :StoreFromPtrToReg32 [E],[F]
   5541 :StoreRegOnStackSub32 [F],4
   5542 :GetFromStackSub32 [F],4
   5543 :Addf32 [C],[F],[F]
   5544 :StoreRegToPtr32 [F],[A]
   5545 :StoreRegToReg64 [D],[A]
   5546 :Debug_LineEnter 
   5547 :StoreRegToReg64 [D],[B]
   5548 :Read32 [B],[C],4
   5549 :Read32 [E],[B],4
   5550 :Addf32 [C],[B],[F]
   5551 :Load32 [A],[F],4
   5552 :Store64 [A], 4
   5556 :DecrementStackPointer [A]
   5557 :Debug_FuncEnd 
   5558 :Ret 
---ULang:Vec2f_t<float32>:(&Compound_Sub&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut: 

   //StackFrameSize:1

   5559 :Store64 [A], 4
   5563 :IncrementStackPointer [A]
   5564 :Debug_FuncStart 
   5565 :StoreRegToReg64 [D],[A]
   5566 :Debug_LineEnter 
   5567 :StoreRegToReg64 [D],[B]
   5568 :StoreFromPtrToReg32 [B],[C]
   5569 :StoreFromPtrToReg32 [E],[F]
   5570 :StoreRegOnStackSub32 [F],4

   //File:/Types/Result.uc
   //Line:0

   5571 :GetFromStackSub32 [F],4
   5572 :Subf32 [C],[F],[F]
   5573 :StoreRegToPtr32 [F],[A]
   5574 :StoreRegToReg64 [D],[A]
   5575 :Debug_LineEnter 
   5576 :StoreRegToReg64 [D],[B]
   5577 :Read32 [B],[C],4
   5578 :Read32 [E],[B],4
   5579 :Subf32 [C],[B],[F]
   5580 :Load32 [A],[F],4
   5581 :Store64 [A], 4

   //StackFrameSize:1

   5585 :DecrementStackPointer [A]
   5586 :Debug_FuncEnd 
   5587 :Ret 
---ULang:Vec2f_t<float32>:(&Plus&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut: 

   //File:/Helper/Math.uc
   //Line:6

   5588 :Store64 [A], 40
   5592 :IncrementStackPointer [A]
   5593 :Debug_FuncStart 
   5594 :Debug_LineEnter 
   5595 :StoreRegToReg64 [D],[A]
   5596 :StoreFromPtrToReg64 [A],[B]
   5597 :StoreRegOnStackSub64 [B],40
   5598 :StoreFromPtrToReg64 [A],[B]
   5599 :StoreRegOnStackSub64 [B],32
   5600 :StoreFromPtrToReg64 [A],[B]
   5601 :StoreRegOnStackSub64 [B],24
   5602 :GetFromStackSub64 [B],24
   5603 :StoreRegOnStackSub64 [B],32

   //Line:7

   5604 :StoreFromPtrToReg64 [A],[B]
   5605 :StoreRegOnStackSub64 [B],8
   5606 :GetFromStackSub64 [B],8
   5607 :StoreRegOnStackSub64 [B],16
   5608 :Debug_LineEnter 
   5609 :GetPointerOfStackSub [B],16
   5610 :StoreRegToReg64 [E],[C]
   5611 :StoreRegToReg64 [B],[D]
   5612 :StoreRegToReg64 [C],[E]
   5613 :Call {ULang:Vec2f_t<float32>:(&Compound_Plus&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut}
   5617 :Debug_LineEnter 

   //File:/Helper/Math.uc
   //Line:10

   5618 :GetFromStackSub64 [A],16
   5619 :StoreRegOnStackSub64 [A],16
   5620 :GetFromStackSub64 [F],16
   5621 :Store64 [A], 40
   5625 :DecrementStackPointer [A]
   5626 :Debug_FuncEnd 
   5627 :Ret 
---ULang:Vec2f_t<float32>:(&Minus&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut: 
   5628 :Store64 [A], 40
   5632 :IncrementStackPointer [A]
   5633 :Debug_FuncStart 

   //Line:11

   5634 :Debug_LineEnter 
   5635 :StoreRegToReg64 [D],[A]
   5636 :StoreFromPtrToReg64 [A],[B]
   5637 :StoreRegOnStackSub64 [B],40
   5638 :StoreFromPtrToReg64 [A],[B]
   5639 :StoreRegOnStackSub64 [B],32
   5640 :StoreFromPtrToReg64 [A],[B]
   5641 :StoreRegOnStackSub64 [B],24
   5642 :GetFromStackSub64 [B],24
   5643 :StoreRegOnStackSub64 [B],32
   5644 :StoreFromPtrToReg64 [A],[B]
   5645 :StoreRegOnStackSub64 [B],8
   5646 :GetFromStackSub64 [B],8
   5647 :StoreRegOnStackSub64 [B],16

   //File:/Types/Ptr.uc
   //Line:12

   5648 :Debug_LineEnter 
   5649 :GetPointerOfStackSub [B],16
   5650 :StoreRegToReg64 [E],[C]
   5651 :StoreRegToReg64 [B],[D]
   5652 :StoreRegToReg64 [C],[E]

   //[A] = ULang:Ptr<sint32>:(&_new&):(&this&)

   5653 :Call {ULang:Vec2f_t<float32>:(&Compound_Sub&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut}
   5657 :Debug_LineEnter 
   5658 :GetFromStackSub64 [A],16
   5659 :StoreRegOnStackSub64 [A],16

   //File:/Types/Ptr.uc
   //Line:15

   5660 :GetFromStackSub64 [F],16
   5661 :Store64 [A], 40
   5665 :DecrementStackPointer [A]

   //File:/Types/Ptr.uc
   //Line:17

   5666 :Debug_FuncEnd 
   5667 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&: 
   5668 :Debug_FuncStart 
   5669 :Debug_LineEnter 
   5670 :StoreRegToReg64 [E],[A]
   5671 :StoreRegToPtr64 [A],[D]
   5672 :Debug_FuncEnd 
   5673 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&: 
   5674 :Debug_FuncStart 
   5675 :Debug_LineEnter 
   5676 :StoreFromPtrToReg64 [D],[A]
   5677 :StoreRegToReg64 [A],[F]
   5678 :Debug_FuncEnd 

   //[A] = ULang:Ptr<sint32>:Write:(&this&)

   5679 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&imut: 

   //File:/Types/Ptr.uc
   //Line:18

   5680 :Debug_FuncStart 
   5681 :Debug_LineEnter 
   5682 :StoreFromPtrToReg64 [D],[A]
   5683 :StoreRegToReg64 [A],[F]
   5684 :Debug_FuncEnd 
   5685 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:Write^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&imut: 
   5686 :Store64 [A], 32
   5690 :IncrementStackPointer [A]
   5691 :Debug_FuncStart 
   5692 :Debug_LineEnter 

   //[A] = ULang:Ptr<sint32>:Write:(&this&)

   5693 :StoreFromPtrToReg64 [E],[A]

   //File:/Types/Ptr.uc
   //Line:20

   5694 :StoreRegOnStackSub64 [A],32
   5695 :StoreFromPtrToReg64 [E],[A]
   5696 :StoreRegOnStackSub64 [A],24
   5697 :StoreFromPtrToReg64 [E],[A]
   5698 :StoreRegOnStackSub64 [A],16
   5699 :GetFromStackSub64 [A],16
   5700 :StoreRegOnStackSub64 [A],24
   5701 :StoreRegToReg64 [D],[A]
   5702 :StoreRegToReg64 [A],[D]
   5703 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&}
   5707 :StoreFromPtrToReg64 [E],[A]
   5708 :StoreRegOnStackSub64 [A],8
   5709 :GetFromStackSub64 [A],8
   5710 :StoreRegToPtr64 [A],[F]
   5711 :Store64 [A], 32
   5715 :DecrementStackPointer [A]
   5716 :Debug_FuncEnd 
   5717 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:Write^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>mov: 
   5718 :Debug_FuncStart 
   5719 :Debug_LineEnter 
   5720 :StoreRegToReg64 [E],[A]
   5721 :StoreRegToReg64 [D],[B]
   5722 :StoreRegToReg64 [B],[D]
   5723 :Push64 [A]

   //File:/Types/Ptr.uc
   //Line:26

   5724 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&}
   5728 :Pop64 [A]

   //[A] = ULang:Ptr<sint32>:ReassignTo:(&this&)

   5729 :StoreRegToPtr64 [A],[F]

   //File:/Types/Ptr.uc
   //Line:0

   5730 :Debug_FuncEnd 
   5731 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:ReadPtr^ULang:Ptr<ULang:Vec2f_t<float32>>&imut: 

   //Line:30

   5732 :Debug_FuncStart 
   5733 :Debug_LineEnter 
   5734 :StoreRegToReg64 [D],[A]
   5735 :StoreRegToReg64 [A],[D]
   5736 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&imut}
   5740 :Debug_FuncEnd 
   5741 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&: 
   5742 :Debug_FuncStart 
   5743 :Debug_LineEnter 
   5744 :StoreRegToReg64 [D],[A]
   5745 :StoreRegToReg64 [A],[D]
   5746 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&}
   5750 :Debug_FuncEnd 
   5751 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&imut: 

   //File:/Types/Ptr.uc
   //Line:0

   5752 :Debug_FuncStart 
   5753 :Debug_LineEnter 

   //Line:31

   5754 :StoreRegToReg64 [D],[A]
   5755 :StoreRegToReg64 [A],[D]
   5756 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&imut}
   5760 :Debug_FuncEnd 
   5761 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:ReassignTo^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&: 
   5762 :Debug_FuncStart 
   5763 :Debug_LineEnter 
   5764 :StoreRegToReg64 [E],[A]
   5765 :StoreRegToPtr64 [A],[D]
   5766 :Debug_FuncEnd 
   5767 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:Make^ULang:Vec2f_t<float32>&imut: 
   5768 :Store64 [A], 8
   5772 :IncrementStackPointer [A]
   5773 :Debug_FuncStart 
   5774 :Debug_LineEnter 
   5775 :GetPointerOfStackSub [A],8
   5776 :Debug_LineEnter 

   //File:/Types/Ptr.uc
   //Line:5

   5777 :StoreRegToReg64 [D],[B]
   5778 :StoreRegToReg64 [A],[D]
   5779 :StoreRegToReg64 [B],[E]
   5780 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&}
   5784 :GetFromStackSub64 [F],8
   5785 :Store64 [A], 8
   5789 :DecrementStackPointer [A]
   5790 :Debug_FuncEnd 

   //Line:8

   5791 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:Make^ULang:Vec2f_t<float32>&: 
   5792 :Store64 [A], 8
   5796 :IncrementStackPointer [A]

   //[A] = ULang:Vec2f_t<float32>:(&_new&):(&this&)

   5797 :Debug_FuncStart 

   //File:/Types/Vec2.uc
   //Line:11

   5798 :Debug_LineEnter 
   5799 :GetPointerOfStackSub [A],8
   5800 :Debug_LineEnter 

   //Line:12

   5801 :StoreRegToReg64 [D],[B]
   5802 :StoreRegToReg64 [A],[D]
   5803 :StoreRegToReg64 [B],[E]

   //StackFrameSize:2

   5804 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&}

   //File:/Types/Vec2.uc
   //Line:15

   5808 :GetFromStackSub64 [F],8
   5809 :Store64 [A], 8
   5813 :DecrementStackPointer [A]
   5814 :Debug_FuncEnd 
   5815 :Ret 
---ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&: 
   5816 :Debug_FuncStart 
   5817 :Debug_FuncEnd 
   5818 :Ret 
---ULang:ptr<ULang:Vec2f_t<float32>>^ULang:Vec2f_t<float32>&: 
   5819 :Debug_FuncStart 
   5820 :Debug_LineEnter 
   5821 :StoreRegToReg64 [D],[A]
   5822 :StoreRegToReg64 [A],[D]
   5823 :Call {ULang:Ptr<ULang:Vec2f_t<float32>>:Make^ULang:Vec2f_t<float32>&}
   5827 :Debug_FuncEnd 
   5828 :Ret 
---ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&: 
   5829 :Debug_FuncStart 
   5830 :Debug_LineEnter 
   5831 :Store64 [A], 0
   5835 :StoreRegToPtr64 [A],[D]
   5836 :Debug_FuncEnd 
   5837 :Ret 
---ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&,ULang:Unique_ptr<sint32>&mov: 
   5838 :Debug_FuncStart 
   5839 :Debug_LineEnter 
   5840 :StoreFromPtrToReg64 [E],[A]
   5841 :StoreRegToPtr64 [A],[D]
   5842 :Debug_LineEnter 
   5843 :Store64 [B], 0
   5847 :StoreRegToPtr64 [B],[E]

   //File:/Types/Vec2.uc
   //Line:21

   5848 :Debug_FuncEnd 
   5849 :Ret 
---ULang:Unique_ptr<sint32>:(&_drop&)^ULang:Unique_ptr<sint32>&: 
   5850 :Store64 [A], 1
   5854 :IncrementStackPointer [A]
   5855 :Debug_FuncStart 
   5856 :Debug_LineEnter 

   //Line:22

   5857 :StoreFromPtrToReg64 [D],[A]
   5858 :StoreRegToReg64 [A],[C]
   5859 :StoreRegToReg64 [C],[B]
   5860 :Debug_LineEnter 
   5861 :StoreRegToReg64 [B],[C]
   5862 :Store64 [E], 0
   5866 :notequalto8 [B],[E],[F]
   5867 :LNot8 [F],[B]
   5868 :Jumpif [B],{5876}
   5872 :StoreRegOnStackSub8 [B],1
   5873 :Debug_LineEnter 
   5874 :StoreFromPtrToReg64 [D],[A]

   //File:/Types/Vec2.uc
   //Line:25

   5875 :Free [A]
   5876 :Store64 [A], 1
   5880 :DecrementStackPointer [A]
   5881 :Debug_FuncEnd 
   5882 :Ret 
---ULang:Unique_ptr<sint32>:Make: 
   5883 :Store64 [A], 32
   5887 :IncrementStackPointer [A]
   5888 :Debug_FuncStart 
   5889 :Debug_LineEnter 
   5890 :Debug_LineEnter 
   5891 :GetPointerOfStackSub [A],32
   5892 :StoreRegToReg64 [A],[D]
   5893 :Call {ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&}
   5897 :Debug_LineEnter 

   //StackFrameSize:40

   5898 :Debug_LineEnter 
   5899 :Store64 [A], 4
   5903 :Malloc [A],[B]
   5904 :Debug_LineEnter 
   5905 :Store32 [C], 0
   5907 :StoreRegToPtr32 [C],[B]
   5908 :Debug_LineEnter 
   5909 :StoreRegToReg64 [B],[D]
   5910 :StoreRegOnStackSub64 [D],32
   5911 :Debug_LineEnter 
   5912 :GetPointerOfStackSub [D],32
   5913 :StoreRegToReg64 [E],[F]
   5914 :StoreRegOnStackSub64 [F],24

   //Line:30

   5915 :GetPointerOfStackSub [F],24
   5916 :StoreRegToReg64 [F],[E]
   5917 :StoreRegOnStackSub64 [D],16
   5918 :StoreRegToReg64 [F],[D]
   5919 :StoreRegOnStackSub64 [E],8
   5920 :GetFromStackSub64 [E],16
   5921 :Call {ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&,ULang:Unique_ptr<sint32>&mov}
   5925 :GetFromStackSub64 [F],24
   5926 :Debug_LineEnter 
   5927 :GetPointerOfStackSub [A],32
   5928 :StoreRegToReg64 [A],[D]
   5929 :Call {ULang:Unique_ptr<sint32>:(&_drop&)^ULang:Unique_ptr<sint32>&}
   5933 :Store64 [A], 32
   5937 :DecrementStackPointer [A]
   5938 :Debug_FuncEnd 

   //File:/Types/Vec2.uc
   //Line:34

   5939 :Ret 
---ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&: 
   5940 :Debug_FuncStart 
   5941 :Debug_LineEnter 
   5942 :StoreFromPtrToReg64 [D],[A]
   5943 :StoreRegToReg64 [A],[F]
   5944 :Debug_FuncEnd 
   5945 :Ret 
---ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&imut: 
   5946 :Debug_FuncStart 
   5947 :Debug_LineEnter 
   5948 :StoreFromPtrToReg64 [D],[A]
   5949 :StoreRegToReg64 [A],[F]
   5950 :Debug_FuncEnd 
   5951 :Ret 
---ULang:Unique_ptr<sint32>:Write^ULang:Unique_ptr<sint32>&,i32&imut: 
   5952 :Debug_FuncStart 

   //Line:35

   5953 :Debug_LineEnter 
   5954 :StoreFromPtrToReg64 [E],[A]
   5955 :StoreRegToReg64 [D],[B]
   5956 :StoreRegToReg64 [B],[D]
   5957 :Push32 [A]
   5958 :Call {ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&}

   //Line:36

   5962 :Pop32 [A]
   5963 :StoreRegToPtr32 [A],[F]
   5964 :Debug_FuncEnd 
   5965 :Ret 
---ULang:Unique_ptr<sint32>:Write^ULang:Unique_ptr<sint32>&,i32mov: 
   5966 :Debug_FuncStart 
   5967 :Debug_LineEnter 
   5968 :StoreRegToReg32 [E],[A]
   5969 :StoreRegToReg64 [D],[B]
   5970 :StoreRegToReg64 [B],[D]
   5971 :Push32 [A]
   5972 :Call {ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&}
   5976 :Pop32 [A]

   //File:/Types/Ptr.uc
   //Line:12

   5977 :StoreRegToPtr32 [A],[F]
   5978 :Debug_FuncEnd 
   5979 :Ret 
---ULang:Unique_ptr<sint32>:ReadPtr^ULang:Unique_ptr<sint32>&imut: 
   5980 :Debug_FuncStart 
   5981 :Debug_LineEnter 

   //[A] = ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&):(&this&)

   5982 :StoreRegToReg64 [D],[A]

   //File:/Types/Ptr.uc
   //Line:14

   5983 :StoreRegToReg64 [A],[D]
   5984 :Call {ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&imut}
   5988 :Debug_FuncEnd 

   //File:/Types/Ptr.uc
   //Line:15

   5989 :Ret 
---ULang:Unique_ptr<sint32>:(&IndirectMember&)^ULang:Unique_ptr<sint32>&: 
   5990 :Debug_FuncStart 
   5991 :Debug_LineEnter 

   //StackFrameSize:32

   5992 :StoreRegToReg64 [D],[A]
   5993 :StoreRegToReg64 [A],[D]
   5994 :Call {ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&}
   5998 :Debug_FuncEnd 
   5999 :Ret 
---ULang:Unique_ptr<sint32>:(&IndirectMember&)^ULang:Unique_ptr<sint32>&imut: 
   6000 :Debug_FuncStart 
   6001 :Debug_LineEnter 
   6002 :StoreRegToReg64 [D],[A]
   6003 :StoreRegToReg64 [A],[D]
   6004 :Call {ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&imut}
   6008 :Debug_FuncEnd 
   6009 :Ret 
---ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&: 
   6010 :Debug_FuncStart 
   6011 :Debug_LineEnter 
   6012 :Store64 [A], 0
   6016 :StoreRegToPtr64 [A],[D]
   6017 :Debug_LineEnter 
   6018 :Store64 [B], 0
   6022 :Load64 [D],[B],8
   6023 :Debug_FuncEnd 
   6024 :Ret 
---ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr: 

   //File:/Types/Ptr.uc
   //Line:18

   6025 :Debug_FuncStart 
   6026 :Debug_LineEnter 
   6027 :StoreRegToReg64 [E],[A]
   6028 :StoreRegToPtr64 [A],[D]
   6029 :Debug_LineEnter 
   6030 :StoreRegToReg64 [F],[B]
   6031 :Load64 [D],[B],8
   6032 :Debug_FuncEnd 
   6033 :Ret 
---ULang:Span<sint32>:Size^ULang:Span<sint32>&imut: 
   6034 :Debug_FuncStart 
   6035 :Debug_LineEnter 
   6036 :Read64 [D],[A],8
   6037 :StoreRegToReg64 [A],[F]

   //[A] = ULang:Ptr<ULang:Vec2f_t<float32>>:Write:(&this&)

   6038 :Debug_FuncEnd 

   //File:/Types/Ptr.uc
   //Line:20

   6039 :Ret 
---ULang:Span<sint32>:Data^ULang:Span<sint32>&: 
   6040 :Debug_FuncStart 
   6041 :Debug_LineEnter 
   6042 :StoreFromPtrToReg64 [D],[A]
   6043 :StoreRegToReg64 [A],[F]
   6044 :Debug_FuncEnd 
   6045 :Ret 
---ULang:Span<sint32>:iData^ULang:Span<sint32>&imut: 
   6046 :Debug_FuncStart 
   6047 :Debug_LineEnter 
   6048 :StoreFromPtrToReg64 [D],[A]

   //File:/Types/Ptr.uc
   //Line:22

   6049 :StoreRegToReg64 [A],[F]
   6050 :Debug_FuncEnd 
   6051 :Ret 
---ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,uptr: 
   6052 :Store64 [A], 8
   6056 :IncrementStackPointer [A]
   6057 :Debug_FuncStart 
   6058 :Debug_LineEnter 

   //File:/Types/Ptr.uc
   //Line:24

   6059 :StoreFromPtrToReg64 [D],[A]
   6060 :StoreRegToReg64 [E],[B]
   6061 :Store64 [C], 4
   6065 :MultU64 [B],[C],[F]
   6066 :StoreRegOnStackSub64 [F],8
   6067 :GetFromStackSub64 [F],8
   6068 :Add64 [A],[F],[F]

   //File:/Types/Ptr.uc
   //Line:26

   6069 :Store64 [A], 8
   6073 :DecrementStackPointer [A]

   //[A] = ULang:Ptr<ULang:Vec2f_t<float32>>:ReassignTo:(&this&)

   6074 :Debug_FuncEnd 

   //File:/Types/Ptr.uc
   //Line:0

   6075 :Ret 
---ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&imut,uptr: 
   6076 :Store64 [A], 8
   6080 :IncrementStackPointer [A]
   6081 :Debug_FuncStart 
   6082 :Debug_LineEnter 
   6083 :StoreFromPtrToReg64 [D],[A]
   6084 :StoreRegToReg64 [E],[B]
   6085 :Store64 [C], 4
   6089 :MultU64 [B],[C],[F]
   6090 :StoreRegOnStackSub64 [F],8
   6091 :GetFromStackSub64 [F],8
   6092 :Add64 [A],[F],[F]
   6093 :Store64 [A], 8

   //File:/Types/Ptr.uc
   //Line:0

   6097 :DecrementStackPointer [A]
   6098 :Debug_FuncEnd 

   //Line:31

   6099 :Ret 
---ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,ULang:Range_t<uintptr>: 
   6100 :Store64 [A], 32
   6104 :IncrementStackPointer [A]
   6105 :Debug_FuncStart 
   6106 :Debug_LineEnter 
   6107 :GetPointerOfStackSub [A],32
   6108 :Debug_LineEnter 
   6109 :StoreFromPtrToReg64 [D],[B]
   6110 :GetPointerOfStackSub [C],56
   6111 :StoreRegToReg64 [C],[D]
   6112 :Push64 [A]
   6113 :Push64 [B]
   6114 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   6118 :Pop64 [B]
   6119 :Pop64 [A]
   6120 :Store64 [C], 4
   6124 :StoreRegToReg64 [F],[D]
   6125 :MultU64 [D],[C],[F]
   6126 :StoreRegToReg64 [F],[E]
   6127 :Add64 [B],[E],[F]
   6128 :GetPointerOfStackSub [B],56
   6129 :StoreRegToReg64 [B],[D]
   6130 :StoreRegOnStackSub64 [F],16
   6131 :Push64 [A]

   //File:/Types/Unique_ptr.uc
   //Line:7

   6132 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   6136 :Pop64 [A]
   6137 :GetPointerOfStackSub [B],56
   6138 :StoreRegToReg64 [B],[D]
   6139 :StoreRegToReg64 [F],[C]

   //[A] = ULang:Unique_ptr<sint32>:(&_new&):(&this&)

   6140 :Push64 [A]

   //File:/Types/Unique_ptr.uc
   //Line:12

   6141 :Push64 [C]
   6142 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   6146 :Pop64 [C]
   6147 :Pop64 [A]
   6148 :StoreRegToReg64 [F],[B]
   6149 :Sub64 [C],[B],[F]

   //StackFrameSize:1

   6150 :StoreRegToReg64 [A],[D]
   6151 :GetFromStackSub64 [E],16
   6152 :StoreRegOnStackSub64 [F],8

   //File:/Types/Unique_ptr.uc
   //Line:16

   6153 :GetFromStackSub64 [F],8
   6154 :Call {ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr}
   6158 :GetPointerOfStackSub [A],32
   6159 :StoreRegToReg64 [A],[F]
   6160 :Store64 [A], 32
   6164 :DecrementStackPointer [A]
   6165 :Debug_FuncEnd 
   6166 :Ret 
---ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&imut,ULang:Range_t<uintptr>: 
   6167 :Store64 [A], 32
   6171 :IncrementStackPointer [A]
   6172 :Debug_FuncStart 
   6173 :Debug_LineEnter 
   6174 :GetPointerOfStackSub [A],32
   6175 :Debug_LineEnter 
   6176 :StoreFromPtrToReg64 [D],[B]
   6177 :GetPointerOfStackSub [C],56
   6178 :StoreRegToReg64 [C],[D]
   6179 :Push64 [A]

   //[C] = ULang:Unique_ptr<sint32>:(&_drop&):(&this&)

   6180 :Push64 [B]

   //StackFrameSize:32

   6181 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}

   //Line:0

   6185 :Pop64 [B]
   6186 :Pop64 [A]
   6187 :Store64 [C], 4
   6191 :StoreRegToReg64 [F],[D]

   //Line:21
   //Line:22

   6192 :MultU64 [D],[C],[F]
   6193 :StoreRegToReg64 [F],[E]
   6194 :Add64 [B],[E],[F]
   6195 :GetPointerOfStackSub [B],56
   6196 :StoreRegToReg64 [B],[D]
   6197 :StoreRegOnStackSub64 [F],16
   6198 :Push64 [A]

   //Line:0

   6199 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}

   //Line:22

   6203 :Pop64 [A]
   6204 :GetPointerOfStackSub [B],56
   6205 :StoreRegToReg64 [B],[D]

   //Line:23

   6206 :StoreRegToReg64 [F],[C]
   6207 :Push64 [A]
   6208 :Push64 [C]
   6209 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   6213 :Pop64 [C]
   6214 :Pop64 [A]
   6215 :StoreRegToReg64 [F],[B]
   6216 :Sub64 [C],[B],[F]
   6217 :StoreRegToReg64 [A],[D]
   6218 :GetFromStackSub64 [E],16
   6219 :StoreRegOnStackSub64 [F],8
   6220 :GetFromStackSub64 [F],8

   //Line:0

   6221 :Call {ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr}
   6225 :GetPointerOfStackSub [A],32
   6226 :StoreRegToReg64 [A],[F]
   6227 :Store64 [A], 32
   6231 :DecrementStackPointer [A]
   6232 :Debug_FuncEnd 
   6233 :Ret 
---ULang:Vector<sint32>:(&_new&)^ULang:Vector<sint32>&: 
   6234 :Debug_FuncStart 
   6235 :Debug_LineEnter 
   6236 :Store64 [A], 0
   6240 :StoreRegToPtr64 [A],[D]
   6241 :Debug_LineEnter 
   6242 :Store64 [B], 0
   6246 :Load64 [D],[B],8
   6247 :Debug_LineEnter 
   6248 :Store64 [C], 0
   6252 :Load64 [D],[C],16
   6253 :Debug_FuncEnd 
   6254 :Ret 
---ULang:Vector<sint32>:(&_drop&)^ULang:Vector<sint32>&: 
   6255 :Store64 [A], 1
   6259 :IncrementStackPointer [A]
   6260 :Debug_FuncStart 
   6261 :Debug_LineEnter 
   6262 :StoreFromPtrToReg64 [D],[A]
   6263 :StoreRegToReg64 [A],[C]

   //[A] = ULang:Unique_ptr<sint32>:Write:(&this&)

   6264 :StoreRegToReg64 [C],[B]

   //File:/Types/Unique_ptr.uc
   //Line:30

   6265 :Debug_LineEnter 
   6266 :StoreRegToReg64 [B],[C]
   6267 :Store64 [E], 0
   6271 :notequalto8 [B],[E],[F]
   6272 :LNot8 [F],[B]
   6273 :Jumpif [B],{6281}
   6277 :StoreRegOnStackSub8 [B],1

   //[A] = ULang:Unique_ptr<sint32>:Write:(&this&)

   6278 :Debug_LineEnter 

   //File:/Types/Unique_ptr.uc
   //Line:32

   6279 :StoreFromPtrToReg64 [D],[A]
   6280 :Free [A]
   6281 :Store64 [A], 1
   6285 :DecrementStackPointer [A]
   6286 :Debug_FuncEnd 
   6287 :Ret 
---ULang:Vector<sint32>:iData^ULang:Vector<sint32>&imut: 
   6288 :Debug_FuncStart 

   //File:/Types/Unique_ptr.uc
   //Line:34

   6289 :Debug_LineEnter 
   6290 :StoreFromPtrToReg64 [D],[A]
   6291 :StoreRegToReg64 [A],[F]
   6292 :Debug_FuncEnd 
   6293 :Ret 
---ULang:Vector<sint32>:Data^ULang:Vector<sint32>&: 
   6294 :Debug_FuncStart 
   6295 :Debug_LineEnter 
   6296 :StoreFromPtrToReg64 [D],[A]
   6297 :StoreRegToReg64 [A],[F]
   6298 :Debug_FuncEnd 

   //File:/Types/Unique_ptr.uc
   //Line:36

   6299 :Ret 
---ULang:Vector<sint32>:Size^ULang:Vector<sint32>&imut: 
   6300 :Debug_FuncStart 
   6301 :Debug_LineEnter 
   6302 :Read64 [D],[A],8
   6303 :StoreRegToReg64 [A],[F]
   6304 :Debug_FuncEnd 
   6305 :Ret 
---ULang:Vector<sint32>:Capacity^ULang:Vector<sint32>&imut: 
   6306 :Debug_FuncStart 
   6307 :Debug_LineEnter 
   6308 :Read64 [D],[A],16

   //File:/Types/Span.uc
   //Line:7

   6309 :StoreRegToReg64 [A],[F]
   6310 :Debug_FuncEnd 
   6311 :Ret 
---ULang:Vector<sint32>:Resize^ULang:Vector<sint32>&,uptr: 
   6312 :Debug_FuncStart 
   6313 :Debug_LineEnter 
   6314 :StoreRegToReg64 [D],[A]

   //Line:8

   6315 :StoreRegToReg64 [E],[B]
   6316 :StoreRegToReg64 [D],[C]
   6317 :StoreRegToReg64 [A],[D]
   6318 :StoreRegToReg64 [E],[F]
   6319 :StoreRegToReg64 [B],[E]
   6320 :Push64 [C]
   6321 :Push64 [F]
   6322 :Call {ULang:Vector<sint32>:Reserve^ULang:Vector<sint32>&,uptr}
   6326 :Pop64 [F]

   //Line:12

   6327 :Pop64 [C]
   6328 :Debug_LineEnter 
   6329 :StoreRegToReg64 [F],[A]
   6330 :Load64 [C],[A],8
   6331 :Debug_FuncEnd 

   //[A] = ULang:Span<sint32>:(&_new&):(&this&)

   6332 :Ret 
---ULang:Vector<sint32>:Reserve^ULang:Vector<sint32>&,uptr: 

   //File:/Types/Span.uc
   //Line:13

   6333 :Store64 [A], 92
   6337 :IncrementStackPointer [A]
   6338 :Debug_FuncStart 

   //File:/Types/Span.uc
   //Line:14

   6339 :Debug_LineEnter 
   6340 :StoreRegToReg64 [E],[A]
   6341 :Read64 [D],[B],16
   6342 :greaterthan8 [A],[B],[F]
   6343 :LNot8 [F],[C]
   6344 :Jumpif [C],{6503}

   //StackFrameSize:8

   6348 :StoreRegOnStackSub8 [C],92
   6349 :Debug_LineEnter 
   6350 :Read64 [D],[A],8

   //File:/Types/Span.uc
   //Line:18

   6351 :StoreRegToReg64 [A],[B]
   6352 :StoreRegToReg64 [B],[C]
   6353 :Debug_LineEnter 
   6354 :StoreFromPtrToReg64 [D],[B]
   6355 :StoreRegOnStackSub64 [D],91
   6356 :StoreRegToReg64 [B],[D]
   6357 :StoreRegToReg64 [D],[A]
   6358 :Debug_LineEnter 
   6359 :StoreRegToReg64 [E],[D]
   6360 :GetFromStackSub64 [B],91
   6361 :Load64 [B],[D],16
   6362 :Debug_LineEnter 
   6363 :StoreRegToReg64 [E],[B]
   6364 :Store64 [D], 4
   6368 :MultU64 [B],[D],[F]
   6369 :Malloc [F],[E]

   //StackFrameSize:8

   6370 :StoreRegOnStackSub64 [A],83
   6371 :Store64 [A], 0
   6375 :StoreRegOnStackSub64 [A],75
   6376 :StoreRegOnStackSub64 [B],67
   6377 :StoreRegOnStackSub64 [C],59
   6378 :StoreRegOnStackSub64 [D],51
   6379 :StoreRegOnStackSub64 [E],43
   6380 :GetFromStackSub64 [A],75
   6381 :GetFromStackSub64 [B],67
   6382 :equalto64 [A],[B],[F]
   6383 :Jumpif [F],{6411}
   6387 :StoreRegOnStackSub8 [F],35
   6388 :StoreRegOnStackSub64 [A],34
   6389 :GetFromStackSub64 [A],75
   6390 :GetFromStackSub64 [B],51
   6391 :MultU64 [A],[B],[F]

   //StackFrameSize:32

   6392 :StoreRegToReg64 [F],[A]
   6393 :GetFromStackSub64 [F],43
   6394 :Add64 [F],[A],[F]

   //File:/Types/Span.uc
   //Line:0

   6395 :Debug_LineEnter 
   6396 :Store32 [A], 0
   6398 :StoreRegToPtr32 [A],[F]
   6399 :Store64 [A], 1
   6403 :GetFromStackSub64 [B],75
   6404 :Add64 [B],[A],[F]
   6405 :StoreRegToReg64 [F],[A]
   6406 :StoreRegOnStackSub64 [A],75
   6407 :Jump {6380}
   6411 :GetFromStackSub64 [A],91
   6412 :GetFromStackSub64 [B],43
   6413 :StoreRegToPtr64 [B],[A]
   6414 :Debug_LineEnter 
   6415 :Store32 [B], 0
   6417 :StoreRegToReg32 [B],[D]
   6418 :StoreRegToReg32 [D],[C]
   6419 :StoreRegOnStackSub64 [C],26
   6420 :GetFromStackSub64 [C],26
   6421 :StoreRegOnStackSub64 [C],26
   6422 :GetFromStackSub64 [C],59
   6423 :StoreRegOnStackSub64 [C],59
   6424 :GetFromStackSub64 [C],26
   6425 :GetFromStackSub64 [D],59
   6426 :lessthan8 [C],[D],[F]
   6427 :LNot8 [F],[C]
   6428 :Jumpif [C],{6478}
   6432 :StoreRegOnStackSub8 [C],18
   6433 :Debug_LineEnter 
   6434 :GetFromStackSub64 [A],83
   6435 :StoreRegOnStackSub64 [A],83
   6436 :GetFromStackSub64 [A],26
   6437 :StoreRegOnStackSub64 [A],26
   6438 :Store64 [A], 4
   6442 :GetFromStackSub64 [C],26
   6443 :MultU64 [C],[A],[F]
   6444 :StoreRegToReg64 [F],[C]
   6445 :GetFromStackSub64 [D],83
   6446 :Add64 [D],[C],[F]
   6447 :StoreFromPtrToReg64 [F],[D]
   6448 :GetFromStackSub64 [E],91
   6449 :StoreFromPtrToReg64 [E],[E]
   6450 :StoreRegOnStackSub64 [E],17
   6451 :GetFromStackSub64 [A],26
   6452 :StoreRegOnStackSub64 [A],26
   6453 :Store64 [A], 4

   //StackFrameSize:32

   6457 :GetFromStackSub64 [B],26
   6458 :MultU64 [B],[A],[F]
   6459 :StoreRegOnStackSub64 [F],9

   //File:/Types/Span.uc
   //Line:0

   6460 :GetFromStackSub64 [F],9
   6461 :Add64 [E],[F],[F]

   //Line:22

   6462 :StoreRegToPtr32 [D],[F]
   6463 :Debug_LineEnter 
   6464 :GetFromStackSub64 [A],26
   6465 :StoreRegOnStackSub64 [A],26
   6466 :Store64 [A], 1
   6470 :GetFromStackSub64 [B],26
   6471 :Add64 [B],[A],[F]
   6472 :StoreRegToReg64 [F],[A]
   6473 :StoreRegOnStackSub64 [A],26
   6474 :Jump {6420}
   6478 :Debug_LineEnter 
   6479 :GetFromStackSub64 [A],83
   6480 :StoreRegOnStackSub64 [A],83
   6481 :GetFromStackSub64 [D],83
   6482 :StoreRegToReg64 [D],[A]
   6483 :Debug_LineEnter 
   6484 :StoreRegToReg64 [A],[D]
   6485 :Store64 [E], 0
   6489 :equalto64 [A],[E],[F]
   6490 :LNot8 [F],[A]
   6491 :StoreRegOnStackSub8 [A],1
   6492 :GetFromStackSub8 [A],1
   6493 :StoreRegToReg8 [A],[B]
   6494 :Jumpif [B],{6503}
   6498 :Debug_LineEnter 
   6499 :GetFromStackSub64 [A],83
   6500 :StoreRegOnStackSub64 [A],83
   6501 :GetFromStackSub64 [A],83
   6502 :Free [A]
   6503 :Store64 [A], 92
   6507 :DecrementStackPointer [A]
   6508 :Debug_FuncEnd 
   6509 :Ret 
---ULang:Vector<sint32>:Clear^ULang:Vector<sint32>&: 
   6510 :Debug_FuncStart 
   6511 :Debug_LineEnter 
   6512 :Store64 [A], 0
   6516 :Load64 [D],[A],8
   6517 :Debug_FuncEnd 
   6518 :Ret 
---ULang:Vector<sint32>:Pop^ULang:Vector<sint32>&: 
   6519 :Debug_FuncStart 
   6520 :Debug_FuncEnd 
   6521 :Ret 
---ULang:Vector<sint32>:Remove^ULang:Vector<sint32>&,uptr: 
   6522 :Debug_FuncStart 
   6523 :Debug_FuncEnd 
   6524 :Ret 
---ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut: 

   //File:/Types/Vector.uc
   //Line:9

   6525 :Store64 [A], 8
   6529 :IncrementStackPointer [A]
   6530 :Debug_FuncStart 

   //Line:10

   6531 :Debug_LineEnter 
   6532 :StoreRegToReg64 [D],[A]
   6533 :Read64 [D],[B],8
   6534 :Store64 [C], 1
   6538 :Add64 [B],[C],[F]
   6539 :StoreRegOnStackSub64 [D],8
   6540 :StoreRegToReg64 [A],[D]
   6541 :StoreRegToReg64 [F],[E]
   6542 :Call {ULang:Vector<sint32>:Resize^ULang:Vector<sint32>&,uptr}

   //File:/Types/Vector.uc
   //Line:13

   6546 :Debug_LineEnter 
   6547 :StoreFromPtrToReg64 [E],[A]
   6548 :GetFromStackSub64 [B],8
   6549 :StoreRegOnStackSub64 [B],8

   //Line:14

   6550 :GetFromStackSub64 [B],8
   6551 :StoreRegOnStackSub64 [B],8
   6552 :GetFromStackSub64 [B],8
   6553 :Read64 [B],[B],8
   6554 :StoreRegToReg64 [B],[C]
   6555 :Store64 [D], 1
   6559 :Sub64 [B],[D],[F]
   6560 :GetFromStackSub64 [D],8
   6561 :StoreRegToReg64 [F],[E]
   6562 :Push32 [A]

   //Line:15

   6563 :Call {ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr}
   6567 :Pop32 [A]
   6568 :StoreRegToPtr32 [A],[F]
   6569 :Store64 [B], 8

   //[C] = ULang:Vector<sint32>:(&_drop&):(&this&)

   6573 :DecrementStackPointer [B]
   6574 :Debug_FuncEnd 
   6575 :Ret 
---ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32mov: 
   6576 :Store64 [A], 12
   6580 :IncrementStackPointer [A]
   6581 :Debug_FuncStart 
   6582 :Debug_LineEnter 

   //File:/Types/Vector.uc
   //Line:18

   6583 :StoreRegToReg64 [D],[A]
   6584 :Read64 [D],[B],8
   6585 :Store64 [C], 1

   //File:/Types/Vector.uc
   //Line:20

   6589 :Add64 [B],[C],[F]
   6590 :StoreRegOnStackSub64 [D],12
   6591 :StoreRegToReg64 [A],[D]
   6592 :StoreRegOnStackSub32 [E],4
   6593 :StoreRegToReg64 [F],[E]
   6594 :Call {ULang:Vector<sint32>:Resize^ULang:Vector<sint32>&,uptr}
   6598 :Debug_LineEnter 
   6599 :GetFromStackSub32 [A],4
   6600 :StoreRegOnStackSub32 [A],4

   //File:/Types/Vector.uc
   //Line:24

   6601 :GetFromStackSub64 [A],12
   6602 :StoreRegOnStackSub64 [A],12
   6603 :GetFromStackSub64 [A],12
   6604 :StoreRegOnStackSub64 [A],12
   6605 :GetFromStackSub64 [A],12
   6606 :Read64 [A],[A],8
   6607 :StoreRegToReg64 [A],[B]
   6608 :Store64 [C], 1
   6612 :Sub64 [A],[C],[F]
   6613 :GetFromStackSub64 [D],12
   6614 :StoreRegToReg64 [F],[E]
   6615 :Call {ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr}

   //StackFrameSize:92

   6619 :GetFromStackSub32 [A],4
   6620 :StoreRegToPtr32 [A],[F]
   6621 :Store64 [A], 12
   6625 :DecrementStackPointer [A]
   6626 :Debug_FuncEnd 
   6627 :Ret 
---ULang:Vector<sint32>:Insert^ULang:Vector<sint32>&,uptr,i32&imut: 
   6628 :Debug_FuncStart 
   6629 :Debug_FuncEnd 
   6630 :Ret 
---ULang:Vector<sint32>:Insert^ULang:Vector<sint32>&,uptr,i32mov: 
   6631 :Debug_FuncStart 

   //Line:29

   6632 :Debug_FuncEnd 
   6633 :Ret 
---ULang:Vector<sint32>:Append^ULang:Vector<sint32>&,ULang:Span<sint32>imut: 
   6634 :Debug_FuncStart 
   6635 :Debug_FuncEnd 

   //Line:30

   6636 :Ret 
---ULang:Vector<sint32>:Append^ULang:Vector<sint32>&,ULang:Span<sint32>mov: 
   6637 :Debug_FuncStart 
   6638 :Debug_FuncEnd 
   6639 :Ret 
---ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr: 
   6640 :Store64 [A], 8
   6644 :IncrementStackPointer [A]

   //Line:34

   6645 :Debug_FuncStart 
   6646 :Debug_LineEnter 
   6647 :StoreFromPtrToReg64 [D],[A]
   6648 :StoreRegToReg64 [E],[B]
   6649 :Store64 [C], 4
   6653 :MultU64 [B],[C],[F]
   6654 :StoreRegOnStackSub64 [F],8
   6655 :GetFromStackSub64 [F],8
   6656 :Add64 [A],[F],[F]
   6657 :Store64 [A], 8
   6661 :DecrementStackPointer [A]
   6662 :Debug_FuncEnd 
   6663 :Ret 
---ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&imut,uptr: 
   6664 :Store64 [A], 8
   6668 :IncrementStackPointer [A]
   6669 :Debug_FuncStart 
   6670 :Debug_LineEnter 
   6671 :StoreFromPtrToReg64 [D],[A]
   6672 :StoreRegToReg64 [E],[B]
   6673 :Store64 [C], 4
   6677 :MultU64 [B],[C],[F]

   //Line:0

   6678 :StoreRegOnStackSub64 [F],8
   6679 :GetFromStackSub64 [F],8
   6680 :Add64 [A],[F],[F]
   6681 :Store64 [A], 8
   6685 :DecrementStackPointer [A]
   6686 :Debug_FuncEnd 
   6687 :Ret 
---ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,ULang:Range_t<uintptr>: 
   6688 :Store64 [A], 32
   6692 :IncrementStackPointer [A]
   6693 :Debug_FuncStart 
   6694 :Debug_LineEnter 
   6695 :Debug_LineEnter 
   6696 :StoreRegToReg64 [D],[A]

   //Line:35

   6697 :StoreRegToReg64 [A],[D]
   6698 :Call {ULang:Vector<sint32>:AsSpan^ULang:Vector<sint32>&}
   6702 :StoreFromPtrToReg64 [F],[A]
   6703 :StoreRegOnStackSub64 [A],32
   6704 :Read64 [F],[A],8
   6705 :StoreRegOnStackSub64 [A],24
   6706 :GetPointerOfStackSub [A],32
   6707 :GetFromStackSub64 [B],48
   6708 :StoreRegOnStackSub64 [B],48
   6709 :GetFromStackSub64 [B],56
   6710 :StoreRegOnStackSub64 [B],56
   6711 :StoreRegToReg64 [A],[D]
   6712 :GetFromStackSub64 [B],48
   6713 :Push64 [B]
   6714 :GetFromStackSub64 [B],48
   6715 :Push64 [B]

   //Line:36

   6716 :Call {ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,ULang:Range_t<uintptr>}
   6720 :Pop64 [A]
   6721 :Pop64 [A]
   6722 :StoreFromPtrToReg64 [F],[A]
   6723 :StoreRegOnStackSub64 [A],16
   6724 :Read64 [F],[A],8
   6725 :StoreRegOnStackSub64 [A],8
   6726 :GetPointerOfStackSub [A],16
   6727 :StoreRegToReg64 [A],[F]
   6728 :Store64 [A], 32
   6732 :DecrementStackPointer [A]
   6733 :Debug_FuncEnd 
   6734 :Ret 
---ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&imut,ULang:Range_t<uintptr>: 
   6735 :Store64 [A], 32
   6739 :IncrementStackPointer [A]
   6740 :Debug_FuncStart 
   6741 :Debug_LineEnter 
   6742 :Debug_LineEnter 
   6743 :StoreRegToReg64 [D],[A]
   6744 :StoreRegToReg64 [A],[D]
   6745 :Call {ULang:Vector<sint32>:AsSpan^ULang:Vector<sint32>&}
   6749 :StoreFromPtrToReg64 [F],[A]
   6750 :StoreRegOnStackSub64 [A],32
   6751 :Read64 [F],[A],8
   6752 :StoreRegOnStackSub64 [A],24
   6753 :GetPointerOfStackSub [A],32
   6754 :GetFromStackSub64 [B],48
   6755 :StoreRegOnStackSub64 [B],48
   6756 :GetFromStackSub64 [B],56
   6757 :StoreRegOnStackSub64 [B],56
   6758 :StoreRegToReg64 [A],[D]
   6759 :GetFromStackSub64 [B],48
   6760 :Push64 [B]

   //Line:38

   6761 :GetFromStackSub64 [B],48
   6762 :Push64 [B]
   6763 :Call {ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,ULang:Range_t<uintptr>}
   6767 :Pop64 [A]
   6768 :Pop64 [A]
   6769 :StoreFromPtrToReg64 [F],[A]
   6770 :StoreRegOnStackSub64 [A],16
   6771 :Read64 [F],[A],8
   6772 :StoreRegOnStackSub64 [A],8
   6773 :GetPointerOfStackSub [A],16
   6774 :StoreRegToReg64 [A],[F]
   6775 :Store64 [A], 32
   6779 :DecrementStackPointer [A]
   6780 :Debug_FuncEnd 

   //Line:40

   6781 :Ret 
---ULang:Vector<sint32>:AsSpan^ULang:Vector<sint32>&: 
   6782 :Store64 [A], 16
   6786 :IncrementStackPointer [A]
   6787 :Debug_FuncStart 
   6788 :Debug_LineEnter 
   6789 :GetPointerOfStackSub [A],16
   6790 :Debug_LineEnter 
   6791 :StoreFromPtrToReg64 [D],[B]
   6792 :Read64 [D],[C],8
   6793 :StoreRegToReg64 [A],[D]
   6794 :StoreRegToReg64 [B],[E]
   6795 :StoreRegToReg64 [C],[F]
   6796 :Call {ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr}
   6800 :GetPointerOfStackSub [A],16
   6801 :StoreRegToReg64 [A],[F]
   6802 :Store64 [A], 16
   6806 :DecrementStackPointer [A]
   6807 :Debug_FuncEnd 
   6808 :Ret 
---ULang:Vector<sint32>:iAsSpan^ULang:Vector<sint32>&imut: 

   //StackFrameSize:8

   6809 :Store64 [A], 16
   6813 :IncrementStackPointer [A]
   6814 :Debug_FuncStart 
   6815 :Debug_LineEnter 
   6816 :GetPointerOfStackSub [A],16
   6817 :Debug_LineEnter 
   6818 :StoreFromPtrToReg64 [D],[B]
   6819 :Read64 [D],[C],8
   6820 :StoreRegToReg64 [A],[D]
   6821 :StoreRegToReg64 [B],[E]
   6822 :StoreRegToReg64 [C],[F]
   6823 :Call {ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr}

   //Line:49

   6827 :GetPointerOfStackSub [A],16
   6828 :StoreRegToReg64 [A],[F]
   6829 :Store64 [A], 16
   6833 :DecrementStackPointer [A]
   6834 :Debug_FuncEnd 
   6835 :Ret 
---ULang:Range<uintptr>^uptr,uptr: 
   6836 :Store64 [A], 16
   6840 :IncrementStackPointer [A]
   6841 :Debug_FuncStart 
   6842 :Debug_LineEnter 
   6843 :GetPointerOfStackSub [A],16
   6844 :Debug_LineEnter 
   6845 :StoreRegToReg64 [D],[B]
   6846 :StoreRegToReg64 [E],[C]
   6847 :StoreRegToReg64 [A],[D]
   6848 :StoreRegToReg64 [B],[E]
   6849 :StoreRegToReg64 [C],[F]
   6850 :Call {ULang:Range_t<uintptr>:(&_new&)^ULang:Range_t<uintptr>&,uptr,uptr}
   6854 :GetPointerOfStackSub [A],16
   6855 :StoreRegToReg64 [A],[F]
   6856 :Store64 [A], 16
   6860 :DecrementStackPointer [A]

   //File:/Types/Vector.uc
   //Line:53

   6861 :Debug_FuncEnd 
   6862 :Ret 
---ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&,ULang:Empty&: 
   6863 :Debug_FuncStart 
   6864 :Debug_LineEnter 
   6865 :StoreRegToReg64 [E],[A]
   6866 :StoreRegToPtr64 [A],[D]
   6867 :Debug_FuncEnd 
   6868 :Ret 
---ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&: 
   6869 :Debug_FuncStart 
   6870 :Debug_LineEnter 
   6871 :StoreFromPtrToReg64 [D],[A]
   6872 :StoreRegToReg64 [A],[F]
   6873 :Debug_FuncEnd 
   6874 :Ret 
---ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&imut: 
   6875 :Debug_FuncStart 
   6876 :Debug_LineEnter 

   //Line:54

   6877 :StoreFromPtrToReg64 [D],[A]
   6878 :StoreRegToReg64 [A],[F]
   6879 :Debug_FuncEnd 
   6880 :Ret 
---ULang:Ptr<ULang:Empty>:Write^ULang:Ptr<ULang:Empty>&,ULang:Empty&imut: 
   6881 :Store64 [A], 32
   6885 :IncrementStackPointer [A]
   6886 :Debug_FuncStart 
   6887 :Debug_LineEnter 
   6888 :StoreFromPtrToReg64 [E],[A]
   6889 :StoreRegOnStackSub64 [A],32
   6890 :StoreFromPtrToReg64 [E],[A]
   6891 :StoreRegOnStackSub64 [A],24
   6892 :StoreFromPtrToReg64 [E],[A]
   6893 :StoreRegOnStackSub64 [A],16
   6894 :GetFromStackSub64 [A],16
   6895 :StoreRegOnStackSub64 [A],24
   6896 :StoreRegToReg64 [D],[A]
   6897 :StoreRegToReg64 [A],[D]
   6898 :Call {ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&}
   6902 :StoreFromPtrToReg64 [E],[A]
   6903 :StoreRegOnStackSub64 [A],8
   6904 :GetFromStackSub64 [A],8
   6905 :StoreRegToPtr64 [A],[F]
   6906 :Store64 [A], 32
   6910 :DecrementStackPointer [A]
   6911 :Debug_FuncEnd 
   6912 :Ret 
---ULang:Ptr<ULang:Empty>:Write^ULang:Ptr<ULang:Empty>&,ULang:Emptymov: 
   6913 :Debug_FuncStart 
   6914 :Debug_LineEnter 
   6915 :StoreRegToReg64 [E],[A]
   6916 :StoreRegToReg64 [D],[B]
   6917 :StoreRegToReg64 [B],[D]
   6918 :Push8 [A]
   6919 :Call {ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&}

   //File:/Types/Vector.uc
   //Line:64

   6923 :Pop8 [A]
   6924 :Debug_FuncEnd 
   6925 :Ret 
---ULang:Ptr<ULang:Empty>:ReadPtr^ULang:Ptr<ULang:Empty>&imut: 
   6926 :Debug_FuncStart 
   6927 :Debug_LineEnter 
   6928 :StoreRegToReg64 [D],[A]
   6929 :StoreRegToReg64 [A],[D]
   6930 :Call {ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&imut}
   6934 :Debug_FuncEnd 
   6935 :Ret 
---ULang:Ptr<ULang:Empty>:(&IndirectMember&)^ULang:Ptr<ULang:Empty>&: 
   6936 :Debug_FuncStart 
   6937 :Debug_LineEnter 
   6938 :StoreRegToReg64 [D],[A]
   6939 :StoreRegToReg64 [A],[D]
   6940 :Call {ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&}
   6944 :Debug_FuncEnd 

   //File:/Types/Vector.uc
   //Line:65

   6945 :Ret 
---ULang:Ptr<ULang:Empty>:(&IndirectMember&)^ULang:Ptr<ULang:Empty>&imut: 
   6946 :Debug_FuncStart 
   6947 :Debug_LineEnter 
   6948 :StoreRegToReg64 [D],[A]
   6949 :StoreRegToReg64 [A],[D]
   6950 :Call {ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&imut}
   6954 :Debug_FuncEnd 
   6955 :Ret 
---ULang:Ptr<ULang:Empty>:ReassignTo^ULang:Ptr<ULang:Empty>&,ULang:Empty&: 
   6956 :Debug_FuncStart 
   6957 :Debug_LineEnter 
   6958 :StoreRegToReg64 [E],[A]
   6959 :StoreRegToPtr64 [A],[D]
   6960 :Debug_FuncEnd 
   6961 :Ret 
---ULang:Ptr<ULang:Empty>:Make^ULang:Empty&imut: 
   6962 :Store64 [A], 8
   6966 :IncrementStackPointer [A]

   //File:/Types/Vector.uc
   //Line:65
   //Line:70

   6967 :Debug_FuncStart 
   6968 :Debug_LineEnter 
   6969 :GetPointerOfStackSub [A],8
   6970 :Debug_LineEnter 
   6971 :StoreRegToReg64 [D],[B]
   6972 :StoreRegToReg64 [A],[D]
   6973 :StoreRegToReg64 [B],[E]
   6974 :Call {ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&,ULang:Empty&}
   6978 :GetFromStackSub64 [F],8
   6979 :Store64 [A], 8
   6983 :DecrementStackPointer [A]
   6984 :Debug_FuncEnd 
   6985 :Ret 
---ULang:Ptr<ULang:Empty>:Make^ULang:Empty&: 
   6986 :Store64 [A], 8
   6990 :IncrementStackPointer [A]
   6991 :Debug_FuncStart 
   6992 :Debug_LineEnter 
   6993 :GetPointerOfStackSub [A],8
   6994 :Debug_LineEnter 
   6995 :StoreRegToReg64 [D],[B]
   6996 :StoreRegToReg64 [A],[D]
   6997 :StoreRegToReg64 [B],[E]
   6998 :Call {ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&,ULang:Empty&}
   7002 :GetFromStackSub64 [F],8
   7003 :Store64 [A], 8
   7007 :DecrementStackPointer [A]
   7008 :Debug_FuncEnd 

   //StackFrameSize:32

   7009 :Ret 
---ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&: 
   7010 :Debug_FuncStart 
   7011 :Debug_FuncEnd 

   //File:/Types/Vector.uc
   //Line:70
   //Line:71

   7012 :Ret 
---ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&: 
   7013 :Debug_FuncStart 
   7014 :Debug_LineEnter 
   7015 :Store64 [A], 0
   7019 :StoreRegToPtr64 [A],[D]
   7020 :Debug_LineEnter 
   7021 :Store64 [B], 0
   7025 :Load64 [D],[B],8
   7026 :Debug_FuncEnd 
   7027 :Ret 
---ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr: 
   7028 :Debug_FuncStart 
   7029 :Debug_LineEnter 
   7030 :StoreRegToReg64 [E],[A]
   7031 :StoreRegToPtr64 [A],[D]
   7032 :Debug_LineEnter 
   7033 :StoreRegToReg64 [F],[B]
   7034 :Load64 [D],[B],8
   7035 :Debug_FuncEnd 
   7036 :Ret 
---ULang:Span<uft8>:Size^ULang:Span<uft8>&imut: 
   7037 :Debug_FuncStart 
   7038 :Debug_LineEnter 
   7039 :Read64 [D],[A],8
   7040 :StoreRegToReg64 [A],[F]
   7041 :Debug_FuncEnd 
   7042 :Ret 
---ULang:Span<uft8>:Data^ULang:Span<uft8>&: 
   7043 :Debug_FuncStart 
   7044 :Debug_LineEnter 
   7045 :StoreFromPtrToReg64 [D],[A]
   7046 :StoreRegToReg64 [A],[F]
   7047 :Debug_FuncEnd 
   7048 :Ret 
---ULang:Span<uft8>:iData^ULang:Span<uft8>&imut: 
   7049 :Debug_FuncStart 
   7050 :Debug_LineEnter 
   7051 :StoreFromPtrToReg64 [D],[A]
   7052 :StoreRegToReg64 [A],[F]
   7053 :Debug_FuncEnd 

   //StackFrameSize:16

   7054 :Ret 
---ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,uptr: 
   7055 :Store64 [A], 8

   //Line:73

   7059 :IncrementStackPointer [A]
   7060 :Debug_FuncStart 
   7061 :Debug_LineEnter 
   7062 :StoreFromPtrToReg64 [D],[A]
   7063 :StoreRegToReg64 [E],[B]
   7064 :Store64 [C], 1
   7068 :MultU64 [B],[C],[F]
   7069 :StoreRegOnStackSub64 [F],8
   7070 :GetFromStackSub64 [F],8
   7071 :Add64 [A],[F],[F]
   7072 :Store64 [A], 8
   7076 :DecrementStackPointer [A]
   7077 :Debug_FuncEnd 
   7078 :Ret 
---ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&imut,uptr: 

   //StackFrameSize:16

   7079 :Store64 [A], 8
   7083 :IncrementStackPointer [A]

   //Line:74

   7084 :Debug_FuncStart 
   7085 :Debug_LineEnter 
   7086 :StoreFromPtrToReg64 [D],[A]
   7087 :StoreRegToReg64 [E],[B]
   7088 :Store64 [C], 1
   7092 :MultU64 [B],[C],[F]
   7093 :StoreRegOnStackSub64 [F],8
   7094 :GetFromStackSub64 [F],8
   7095 :Add64 [A],[F],[F]
   7096 :Store64 [A], 8
   7100 :DecrementStackPointer [A]
   7101 :Debug_FuncEnd 
   7102 :Ret 
---ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>: 
   7103 :Store64 [A], 32

   //File:/Types/Range.uc
   //Line:0

   7107 :IncrementStackPointer [A]
   7108 :Debug_FuncStart 

   //Line:37

   7109 :Debug_LineEnter 
   7110 :GetPointerOfStackSub [A],32
   7111 :Debug_LineEnter 
   7112 :StoreFromPtrToReg64 [D],[B]
   7113 :GetPointerOfStackSub [C],56
   7114 :StoreRegToReg64 [C],[D]
   7115 :Push64 [A]
   7116 :Push64 [B]
   7117 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   7121 :Pop64 [B]
   7122 :Pop64 [A]
   7123 :Store64 [C], 1
   7127 :StoreRegToReg64 [F],[D]
   7128 :MultU64 [D],[C],[F]
   7129 :StoreRegToReg64 [F],[E]
   7130 :Add64 [B],[E],[F]
   7131 :GetPointerOfStackSub [B],56

   //File:/Types/Ptr.uc
   //Line:12

   7132 :StoreRegToReg64 [B],[D]
   7133 :StoreRegOnStackSub64 [F],16
   7134 :Push64 [A]
   7135 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   7139 :Pop64 [A]
   7140 :GetPointerOfStackSub [B],56
   7141 :StoreRegToReg64 [B],[D]
   7142 :StoreRegToReg64 [F],[C]
   7143 :Push64 [A]

   //File:/Types/Ptr.uc
   //Line:15

   7144 :Push64 [C]
   7145 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   7149 :Pop64 [C]

   //File:/Types/Ptr.uc
   //Line:17

   7150 :Pop64 [A]
   7151 :StoreRegToReg64 [F],[B]
   7152 :Sub64 [C],[B],[F]
   7153 :StoreRegToReg64 [A],[D]
   7154 :GetFromStackSub64 [E],16
   7155 :StoreRegOnStackSub64 [F],8
   7156 :GetFromStackSub64 [F],8
   7157 :Call {ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr}
   7161 :GetPointerOfStackSub [A],32
   7162 :StoreRegToReg64 [A],[F]
   7163 :Store64 [A], 32
   7167 :DecrementStackPointer [A]
   7168 :Debug_FuncEnd 
   7169 :Ret 
---ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&imut,ULang:Range_t<uintptr>: 
   7170 :Store64 [A], 32
   7174 :IncrementStackPointer [A]
   7175 :Debug_FuncStart 
   7176 :Debug_LineEnter 
   7177 :GetPointerOfStackSub [A],32
   7178 :Debug_LineEnter 
   7179 :StoreFromPtrToReg64 [D],[B]

   //File:/Types/Ptr.uc
   //Line:18

   7180 :GetPointerOfStackSub [C],56
   7181 :StoreRegToReg64 [C],[D]
   7182 :Push64 [A]
   7183 :Push64 [B]
   7184 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   7188 :Pop64 [B]
   7189 :Pop64 [A]
   7190 :Store64 [C], 1
   7194 :StoreRegToReg64 [F],[D]
   7195 :MultU64 [D],[C],[F]
   7196 :StoreRegToReg64 [F],[E]
   7197 :Add64 [B],[E],[F]
   7198 :GetPointerOfStackSub [B],56
   7199 :StoreRegToReg64 [B],[D]
   7200 :StoreRegOnStackSub64 [F],16
   7201 :Push64 [A]
   7202 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   7206 :Pop64 [A]
   7207 :GetPointerOfStackSub [B],56
   7208 :StoreRegToReg64 [B],[D]
   7209 :StoreRegToReg64 [F],[C]
   7210 :Push64 [A]
   7211 :Push64 [C]
   7212 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   7216 :Pop64 [C]
   7217 :Pop64 [A]
   7218 :StoreRegToReg64 [F],[B]
   7219 :Sub64 [C],[B],[F]
   7220 :StoreRegToReg64 [A],[D]
   7221 :GetFromStackSub64 [E],16
   7222 :StoreRegOnStackSub64 [F],8

   //File:/Types/Ptr.uc
   //Line:26

   7223 :GetFromStackSub64 [F],8
   7224 :Call {ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr}

   //[A] = ULang:Ptr<ULang:Empty>:ReassignTo:(&this&)

   7228 :GetPointerOfStackSub [A],32

   //File:/Types/Ptr.uc
   //Line:0

   7229 :StoreRegToReg64 [A],[F]
   7230 :Store64 [A], 32
   7234 :DecrementStackPointer [A]
   7235 :Debug_FuncEnd 
   7236 :Ret 
---ULang:Vector<uft8>:(&_new&)^ULang:Vector<uft8>&: 
   7237 :Debug_FuncStart 
   7238 :Debug_LineEnter 
   7239 :Store64 [A], 0
   7243 :StoreRegToPtr64 [A],[D]
   7244 :Debug_LineEnter 
   7245 :Store64 [B], 0
   7249 :Load64 [D],[B],8
   7250 :Debug_LineEnter 

   //File:/Types/Ptr.uc
   //Line:0

   7251 :Store64 [C], 0
   7255 :Load64 [D],[C],16
   7256 :Debug_FuncEnd 
   7257 :Ret 
---ULang:Vector<uft8>:(&_drop&)^ULang:Vector<uft8>&: 
   7258 :Store64 [A], 1
   7262 :IncrementStackPointer [A]
   7263 :Debug_FuncStart 
   7264 :Debug_LineEnter 
   7265 :StoreFromPtrToReg64 [D],[A]
   7266 :StoreRegToReg64 [A],[C]
   7267 :StoreRegToReg64 [C],[B]
   7268 :Debug_LineEnter 
   7269 :StoreRegToReg64 [B],[C]
   7270 :Store64 [E], 0
   7274 :notequalto8 [B],[E],[F]
   7275 :LNot8 [F],[B]

   //File:/Types/Span.uc
   //Line:7

   7276 :Jumpif [B],{7284}
   7280 :StoreRegOnStackSub8 [B],1
   7281 :Debug_LineEnter 

   //Line:8

   7282 :StoreFromPtrToReg64 [D],[A]
   7283 :Free [A]
   7284 :Store64 [A], 1
   7288 :DecrementStackPointer [A]
   7289 :Debug_FuncEnd 

   //[A] = ULang:Span<uft8>:(&_new&):(&this&)

   7290 :Ret 
---ULang:Vector<uft8>:iData^ULang:Vector<uft8>&imut: 

   //File:/Types/Span.uc
   //Line:11

   7291 :Debug_FuncStart 
   7292 :Debug_LineEnter 
   7293 :StoreFromPtrToReg64 [D],[A]

   //Line:12

   7294 :StoreRegToReg64 [A],[F]
   7295 :Debug_FuncEnd 
   7296 :Ret 
---ULang:Vector<uft8>:Data^ULang:Vector<uft8>&: 
   7297 :Debug_FuncStart 
   7298 :Debug_LineEnter 

   //[A] = ULang:Span<uft8>:(&_new&):(&this&)

   7299 :StoreFromPtrToReg64 [D],[A]

   //File:/Types/Span.uc
   //Line:13

   7300 :StoreRegToReg64 [A],[F]
   7301 :Debug_FuncEnd 
   7302 :Ret 
---ULang:Vector<uft8>:Size^ULang:Vector<uft8>&imut: 
   7303 :Debug_FuncStart 
   7304 :Debug_LineEnter 
   7305 :Read64 [D],[A],8

   //File:/Types/Span.uc
   //Line:14

   7306 :StoreRegToReg64 [A],[F]
   7307 :Debug_FuncEnd 
   7308 :Ret 
---ULang:Vector<uft8>:Capacity^ULang:Vector<uft8>&imut: 
   7309 :Debug_FuncStart 
   7310 :Debug_LineEnter 
   7311 :Read64 [D],[A],16

   //File:/Types/Span.uc
   //Line:15

   7312 :StoreRegToReg64 [A],[F]
   7313 :Debug_FuncEnd 
   7314 :Ret 
---ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr: 

   //StackFrameSize:8

   7315 :Debug_FuncStart 
   7316 :Debug_LineEnter 
   7317 :StoreRegToReg64 [D],[A]

   //File:/Types/Span.uc
   //Line:18

   7318 :StoreRegToReg64 [E],[B]
   7319 :StoreRegToReg64 [D],[C]
   7320 :StoreRegToReg64 [A],[D]
   7321 :StoreRegToReg64 [E],[F]
   7322 :StoreRegToReg64 [B],[E]
   7323 :Push64 [C]
   7324 :Push64 [F]
   7325 :Call {ULang:Vector<uft8>:Reserve^ULang:Vector<uft8>&,uptr}
   7329 :Pop64 [F]
   7330 :Pop64 [C]
   7331 :Debug_LineEnter 
   7332 :StoreRegToReg64 [F],[A]
   7333 :Load64 [C],[A],8
   7334 :Debug_FuncEnd 
   7335 :Ret 
---ULang:Vector<uft8>:Reserve^ULang:Vector<uft8>&,uptr: 
   7336 :Store64 [A], 92

   //File:/Types/Span.uc
   //Line:19

   7340 :IncrementStackPointer [A]
   7341 :Debug_FuncStart 
   7342 :Debug_LineEnter 
   7343 :StoreRegToReg64 [E],[A]
   7344 :Read64 [D],[B],16
   7345 :greaterthan8 [A],[B],[F]
   7346 :LNot8 [F],[C]
   7347 :Jumpif [C],{7505}
   7351 :StoreRegOnStackSub8 [C],92
   7352 :Debug_LineEnter 
   7353 :Read64 [D],[A],8
   7354 :StoreRegToReg64 [A],[B]
   7355 :StoreRegToReg64 [B],[C]
   7356 :Debug_LineEnter 
   7357 :StoreFromPtrToReg64 [D],[B]
   7358 :StoreRegOnStackSub64 [D],91

   //StackFrameSize:32

   7359 :StoreRegToReg64 [B],[D]
   7360 :StoreRegToReg64 [D],[A]
   7361 :Debug_LineEnter 

   //File:/Types/Span.uc
   //Line:0

   7362 :StoreRegToReg64 [E],[D]
   7363 :GetFromStackSub64 [B],91

   //Line:21

   7364 :Load64 [B],[D],16
   7365 :Debug_LineEnter 
   7366 :StoreRegToReg64 [E],[B]
   7367 :Store64 [D], 1
   7371 :MultU64 [B],[D],[F]
   7372 :Malloc [F],[E]
   7373 :StoreRegOnStackSub64 [A],83
   7374 :Store64 [A], 0
   7378 :StoreRegOnStackSub64 [A],75
   7379 :StoreRegOnStackSub64 [B],67
   7380 :StoreRegOnStackSub64 [C],59
   7381 :StoreRegOnStackSub64 [D],51
   7382 :StoreRegOnStackSub64 [E],43
   7383 :GetFromStackSub64 [A],75
   7384 :GetFromStackSub64 [B],67
   7385 :equalto64 [A],[B],[F]
   7386 :Jumpif [F],{7413}
   7390 :StoreRegOnStackSub8 [F],35
   7391 :StoreRegOnStackSub64 [A],34
   7392 :GetFromStackSub64 [A],75
   7393 :GetFromStackSub64 [B],51
   7394 :MultU64 [A],[B],[F]
   7395 :StoreRegToReg64 [F],[A]
   7396 :GetFromStackSub64 [F],43
   7397 :Add64 [F],[A],[F]
   7398 :Debug_LineEnter 
   7399 :Store8 [A],0
   7400 :StoreRegToPtr8 [A],[F]
   7401 :Store64 [A], 1
   7405 :GetFromStackSub64 [B],75
   7406 :Add64 [B],[A],[F]
   7407 :StoreRegToReg64 [F],[A]
   7408 :StoreRegOnStackSub64 [A],75
   7409 :Jump {7383}
   7413 :GetFromStackSub64 [A],91
   7414 :GetFromStackSub64 [B],43
   7415 :StoreRegToPtr64 [B],[A]
   7416 :Debug_LineEnter 
   7417 :Store32 [B], 0
   7419 :StoreRegToReg32 [B],[D]
   7420 :StoreRegToReg32 [D],[C]
   7421 :StoreRegOnStackSub64 [C],26
   7422 :GetFromStackSub64 [C],26
   7423 :StoreRegOnStackSub64 [C],26

   //StackFrameSize:32

   7424 :GetFromStackSub64 [C],59
   7425 :StoreRegOnStackSub64 [C],59
   7426 :GetFromStackSub64 [C],26

   //File:/Types/Span.uc
   //Line:0

   7427 :GetFromStackSub64 [D],59
   7428 :lessthan8 [C],[D],[F]

   //Line:22

   7429 :LNot8 [F],[C]
   7430 :Jumpif [C],{7480}
   7434 :StoreRegOnStackSub8 [C],18
   7435 :Debug_LineEnter 
   7436 :GetFromStackSub64 [A],83
   7437 :StoreRegOnStackSub64 [A],83
   7438 :GetFromStackSub64 [A],26
   7439 :StoreRegOnStackSub64 [A],26
   7440 :Store64 [A], 1
   7444 :GetFromStackSub64 [C],26
   7445 :MultU64 [C],[A],[F]
   7446 :StoreRegToReg64 [F],[C]
   7447 :GetFromStackSub64 [D],83
   7448 :Add64 [D],[C],[F]
   7449 :StoreFromPtrToReg64 [F],[D]
   7450 :GetFromStackSub64 [E],91
   7451 :StoreFromPtrToReg64 [E],[E]
   7452 :StoreRegOnStackSub64 [E],17
   7453 :GetFromStackSub64 [A],26
   7454 :StoreRegOnStackSub64 [A],26
   7455 :Store64 [A], 1
   7459 :GetFromStackSub64 [B],26
   7460 :MultU64 [B],[A],[F]
   7461 :StoreRegOnStackSub64 [F],9
   7462 :GetFromStackSub64 [F],9
   7463 :Add64 [E],[F],[F]
   7464 :StoreRegToPtr8 [D],[F]
   7465 :Debug_LineEnter 
   7466 :GetFromStackSub64 [A],26
   7467 :StoreRegOnStackSub64 [A],26
   7468 :Store64 [A], 1
   7472 :GetFromStackSub64 [B],26
   7473 :Add64 [B],[A],[F]
   7474 :StoreRegToReg64 [F],[A]
   7475 :StoreRegOnStackSub64 [A],26
   7476 :Jump {7422}
   7480 :Debug_LineEnter 
   7481 :GetFromStackSub64 [A],83
   7482 :StoreRegOnStackSub64 [A],83
   7483 :GetFromStackSub64 [D],83
   7484 :StoreRegToReg64 [D],[A]
   7485 :Debug_LineEnter 
   7486 :StoreRegToReg64 [A],[D]
   7487 :Store64 [E], 0
   7491 :equalto64 [A],[E],[F]

   //File:/Types/Vector.uc
   //Line:9

   7492 :LNot8 [F],[A]
   7493 :StoreRegOnStackSub8 [A],1
   7494 :GetFromStackSub8 [A],1
   7495 :StoreRegToReg8 [A],[B]
   7496 :Jumpif [B],{7505}
   7500 :Debug_LineEnter 
   7501 :GetFromStackSub64 [A],83
   7502 :StoreRegOnStackSub64 [A],83
   7503 :GetFromStackSub64 [A],83

   //Line:11

   7504 :Free [A]
   7505 :Store64 [A], 92
   7509 :DecrementStackPointer [A]

   //StackFrameSize:1

   7510 :Debug_FuncEnd 
   7511 :Ret 
---ULang:Vector<uft8>:Clear^ULang:Vector<uft8>&: 

   //[A] = ULang:Vector<uft8>:(&_new&):(&this&)

   7512 :Debug_FuncStart 

   //File:/Types/Vector.uc
   //Line:13

   7513 :Debug_LineEnter 
   7514 :Store64 [A], 0
   7518 :Load64 [D],[A],8
   7519 :Debug_FuncEnd 
   7520 :Ret 
---ULang:Vector<uft8>:Pop^ULang:Vector<uft8>&: 
   7521 :Debug_FuncStart 
   7522 :Debug_FuncEnd 
   7523 :Ret 
---ULang:Vector<uft8>:Remove^ULang:Vector<uft8>&,uptr: 
   7524 :Debug_FuncStart 
   7525 :Debug_FuncEnd 
   7526 :Ret 
---ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,&imut: 
   7527 :Store64 [A], 8
   7531 :IncrementStackPointer [A]
   7532 :Debug_FuncStart 
   7533 :Debug_LineEnter 
   7534 :StoreRegToReg64 [D],[A]
   7535 :Read64 [D],[B],8
   7536 :Store64 [C], 1

   //[C] = ULang:Vector<uft8>:(&_drop&):(&this&)

   7540 :Add64 [B],[C],[F]
   7541 :StoreRegOnStackSub64 [D],8
   7542 :StoreRegToReg64 [A],[D]
   7543 :StoreRegToReg64 [F],[E]

   //File:/Types/Vector.uc
   //Line:17

   7544 :Call {ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr}
   7548 :Debug_LineEnter 
   7549 :StoreFromPtrToReg64 [E],[A]

   //File:/Types/Vector.uc
   //Line:18

   7550 :GetFromStackSub64 [B],8
   7551 :StoreRegOnStackSub64 [B],8
   7552 :GetFromStackSub64 [B],8
   7553 :StoreRegOnStackSub64 [B],8
   7554 :GetFromStackSub64 [B],8
   7555 :Read64 [B],[B],8

   //File:/Types/Vector.uc
   //Line:20

   7556 :StoreRegToReg64 [B],[C]
   7557 :Store64 [D], 1
   7561 :Sub64 [B],[D],[F]

   //File:/Types/Vector.uc
   //Line:21

   7562 :GetFromStackSub64 [D],8
   7563 :StoreRegToReg64 [F],[E]
   7564 :Push8 [A]
   7565 :Call {ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr}
   7569 :Pop8 [A]
   7570 :StoreRegToPtr8 [A],[F]
   7571 :Store64 [B], 8
   7575 :DecrementStackPointer [B]
   7576 :Debug_FuncEnd 
   7577 :Ret 
---ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,mov: 
   7578 :Store64 [A], 9
   7582 :IncrementStackPointer [A]

   //Line:25

   7583 :Debug_FuncStart 
   7584 :Debug_LineEnter 
   7585 :StoreRegToReg64 [D],[A]

   //StackFrameSize:92

   7586 :Read64 [D],[B],8
   7587 :Store64 [C], 1
   7591 :Add64 [B],[C],[F]
   7592 :StoreRegOnStackSub64 [D],9
   7593 :StoreRegToReg64 [A],[D]
   7594 :StoreRegOnStackSub8 [E],1
   7595 :StoreRegToReg64 [F],[E]
   7596 :Call {ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr}
   7600 :Debug_LineEnter 
   7601 :GetFromStackSub8 [A],1
   7602 :StoreRegOnStackSub8 [A],1

   //Line:30

   7603 :GetFromStackSub64 [A],9
   7604 :StoreRegOnStackSub64 [A],9
   7605 :GetFromStackSub64 [A],9
   7606 :StoreRegOnStackSub64 [A],9
   7607 :GetFromStackSub64 [A],9

   //Line:33

   7608 :Read64 [A],[A],8
   7609 :StoreRegToReg64 [A],[B]
   7610 :Store64 [C], 1
   7614 :Sub64 [A],[C],[F]
   7615 :GetFromStackSub64 [D],9
   7616 :StoreRegToReg64 [F],[E]
   7617 :Call {ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr}
   7621 :GetFromStackSub8 [A],1
   7622 :StoreRegToPtr8 [A],[F]
   7623 :Store64 [A], 9
   7627 :DecrementStackPointer [A]
   7628 :Debug_FuncEnd 
   7629 :Ret 
---ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,&imut: 
   7630 :Debug_FuncStart 
   7631 :Debug_FuncEnd 
   7632 :Ret 
---ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,mov: 
   7633 :Debug_FuncStart 
   7634 :Debug_FuncEnd 
   7635 :Ret 
---ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>imut: 
   7636 :Debug_FuncStart 
   7637 :Debug_FuncEnd 
   7638 :Ret 
---ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>mov: 
   7639 :Debug_FuncStart 
   7640 :Debug_FuncEnd 
   7641 :Ret 
---ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr: 
   7642 :Store64 [A], 8
   7646 :IncrementStackPointer [A]
   7647 :Debug_FuncStart 
   7648 :Debug_LineEnter 
   7649 :StoreFromPtrToReg64 [D],[A]
   7650 :StoreRegToReg64 [E],[B]
   7651 :Store64 [C], 1
   7655 :MultU64 [B],[C],[F]
   7656 :StoreRegOnStackSub64 [F],8
   7657 :GetFromStackSub64 [F],8
   7658 :Add64 [A],[F],[F]
   7659 :Store64 [A], 8

   //Line:35

   7663 :DecrementStackPointer [A]
   7664 :Debug_FuncEnd 
   7665 :Ret 
---ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&imut,uptr: 
   7666 :Store64 [A], 8
   7670 :IncrementStackPointer [A]
   7671 :Debug_FuncStart 
   7672 :Debug_LineEnter 
   7673 :StoreFromPtrToReg64 [D],[A]
   7674 :StoreRegToReg64 [E],[B]
   7675 :Store64 [C], 1
   7679 :MultU64 [B],[C],[F]
   7680 :StoreRegOnStackSub64 [F],8
   7681 :GetFromStackSub64 [F],8

   //Line:36

   7682 :Add64 [A],[F],[F]
   7683 :Store64 [A], 8
   7687 :DecrementStackPointer [A]
   7688 :Debug_FuncEnd 
   7689 :Ret 
---ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,ULang:Range_t<uintptr>: 
   7690 :Store64 [A], 32
   7694 :IncrementStackPointer [A]
   7695 :Debug_FuncStart 
   7696 :Debug_LineEnter 
   7697 :Debug_LineEnter 
   7698 :StoreRegToReg64 [D],[A]
   7699 :StoreRegToReg64 [A],[D]
   7700 :Call {ULang:Vector<uft8>:AsSpan^ULang:Vector<uft8>&}
   7704 :StoreFromPtrToReg64 [F],[A]
   7705 :StoreRegOnStackSub64 [A],32
   7706 :Read64 [F],[A],8
   7707 :StoreRegOnStackSub64 [A],24
   7708 :GetPointerOfStackSub [A],32
   7709 :GetFromStackSub64 [B],48
   7710 :StoreRegOnStackSub64 [B],48
   7711 :GetFromStackSub64 [B],56

   //Line:35

   7712 :StoreRegOnStackSub64 [B],56
   7713 :StoreRegToReg64 [A],[D]
   7714 :GetFromStackSub64 [B],48
   7715 :Push64 [B]
   7716 :GetFromStackSub64 [B],48
   7717 :Push64 [B]
   7718 :Call {ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>}
   7722 :Pop64 [A]
   7723 :Pop64 [A]
   7724 :StoreFromPtrToReg64 [F],[A]
   7725 :StoreRegOnStackSub64 [A],16
   7726 :Read64 [F],[A],8

   //Line:38

   7727 :StoreRegOnStackSub64 [A],8
   7728 :GetPointerOfStackSub [A],16
   7729 :StoreRegToReg64 [A],[F]
   7730 :Store64 [A], 32
   7734 :DecrementStackPointer [A]
   7735 :Debug_FuncEnd 
   7736 :Ret 
---ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&imut,ULang:Range_t<uintptr>: 
   7737 :Store64 [A], 32
   7741 :IncrementStackPointer [A]
   7742 :Debug_FuncStart 
   7743 :Debug_LineEnter 
   7744 :Debug_LineEnter 
   7745 :StoreRegToReg64 [D],[A]
   7746 :StoreRegToReg64 [A],[D]

   //Line:40

   7747 :Call {ULang:Vector<uft8>:AsSpan^ULang:Vector<uft8>&}
   7751 :StoreFromPtrToReg64 [F],[A]
   7752 :StoreRegOnStackSub64 [A],32
   7753 :Read64 [F],[A],8
   7754 :StoreRegOnStackSub64 [A],24
   7755 :GetPointerOfStackSub [A],32
   7756 :GetFromStackSub64 [B],48
   7757 :StoreRegOnStackSub64 [B],48
   7758 :GetFromStackSub64 [B],56
   7759 :StoreRegOnStackSub64 [B],56
   7760 :StoreRegToReg64 [A],[D]
   7761 :GetFromStackSub64 [B],48
   7762 :Push64 [B]

   //File:/Types/Vector.uc
   //Line:42

   7763 :GetFromStackSub64 [B],48
   7764 :Push64 [B]
   7765 :Call {ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>}
   7769 :Pop64 [A]
   7770 :Pop64 [A]

   //[A] = ULang:Vector<uft8>:Clear:(&this&)

   7771 :StoreFromPtrToReg64 [F],[A]
   7772 :StoreRegOnStackSub64 [A],16
   7773 :Read64 [F],[A],8
   7774 :StoreRegOnStackSub64 [A],8

   //StackFrameSize:8

   7775 :GetPointerOfStackSub [A],16
   7776 :StoreRegToReg64 [A],[F]
   7777 :Store64 [A], 32
   7781 :DecrementStackPointer [A]
   7782 :Debug_FuncEnd 
   7783 :Ret 
---ULang:Vector<uft8>:AsSpan^ULang:Vector<uft8>&: 
   7784 :Store64 [A], 16
   7788 :IncrementStackPointer [A]
   7789 :Debug_FuncStart 
   7790 :Debug_LineEnter 
   7791 :GetPointerOfStackSub [A],16
   7792 :Debug_LineEnter 

   //Line:49

   7793 :StoreFromPtrToReg64 [D],[B]
   7794 :Read64 [D],[C],8
   7795 :StoreRegToReg64 [A],[D]
   7796 :StoreRegToReg64 [B],[E]
   7797 :StoreRegToReg64 [C],[F]
   7798 :Call {ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr}
   7802 :GetPointerOfStackSub [A],16
   7803 :StoreRegToReg64 [A],[F]
   7804 :Store64 [A], 16
   7808 :DecrementStackPointer [A]
   7809 :Debug_FuncEnd 
   7810 :Ret 
---ULang:Vector<uft8>:iAsSpan^ULang:Vector<uft8>&imut: 
   7811 :Store64 [A], 16
   7815 :IncrementStackPointer [A]
   7816 :Debug_FuncStart 
   7817 :Debug_LineEnter 
   7818 :GetPointerOfStackSub [A],16
   7819 :Debug_LineEnter 
   7820 :StoreFromPtrToReg64 [D],[B]
   7821 :Read64 [D],[C],8
   7822 :StoreRegToReg64 [A],[D]
   7823 :StoreRegToReg64 [B],[E]

   //StackFrameSize:9

   7824 :StoreRegToReg64 [C],[F]
   7825 :Call {ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr}
   7829 :GetPointerOfStackSub [A],16
   7830 :StoreRegToReg64 [A],[F]
   7831 :Store64 [A], 16
   7835 :DecrementStackPointer [A]
   7836 :Debug_FuncEnd 
   7837 :Ret 
---ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&: 
   7838 :Debug_FuncStart 
   7839 :Debug_LineEnter 
   7840 :Store64 [A], 0
   7844 :StoreRegToPtr64 [A],[D]
   7845 :Debug_LineEnter 
   7846 :Store64 [B], 0
   7850 :Load64 [D],[B],8
   7851 :Debug_FuncEnd 
   7852 :Ret 
---ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&,[&],uptr: 
   7853 :Debug_FuncStart 
   7854 :Debug_LineEnter 
   7855 :StoreRegToReg64 [E],[A]
   7856 :StoreRegToPtr64 [A],[D]
   7857 :Debug_LineEnter 
   7858 :StoreRegToReg64 [F],[B]
   7859 :Load64 [D],[B],8
   7860 :Debug_FuncEnd 
   7861 :Ret 
---ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut: 
   7862 :Debug_FuncStart 
   7863 :Debug_LineEnter 
   7864 :Read64 [D],[A],8
   7865 :StoreRegToReg64 [A],[F]
   7866 :Debug_FuncEnd 
   7867 :Ret 
---ULang:StringSpan_t<uft8>:iData^ULang:StringSpan_t<uft8>&imut: 
   7868 :Debug_FuncStart 
   7869 :Debug_LineEnter 
   7870 :StoreFromPtrToReg64 [D],[A]
   7871 :StoreRegToReg64 [A],[F]
   7872 :Debug_FuncEnd 
   7873 :Ret 
---ULang:StringSpan_t<uft8>:Data^ULang:StringSpan_t<uft8>&: 
   7874 :Debug_FuncStart 
   7875 :Debug_LineEnter 
   7876 :StoreFromPtrToReg64 [D],[A]
   7877 :StoreRegToReg64 [A],[F]
   7878 :Debug_FuncEnd 
   7879 :Ret 
---ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut: 
   7880 :Store64 [A], 19
   7884 :IncrementStackPointer [A]
   7885 :Debug_FuncStart 

   //StackFrameSize:8

   7886 :Debug_LineEnter 
   7887 :StoreRegToReg64 [D],[A]
   7888 :StoreRegToReg64 [A],[B]

   //File:/Types/Vector.uc
   //Line:64

   7889 :StoreRegToReg64 [D],[C]
   7890 :StoreRegToReg64 [A],[D]
   7891 :Push64 [C]
   7892 :Push64 [E]
   7893 :Call {ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut}
   7897 :Pop64 [E]
   7898 :Pop64 [C]
   7899 :StoreRegToReg64 [E],[A]
   7900 :StoreRegToReg64 [A],[D]
   7901 :StoreRegToReg64 [F],[B]
   7902 :Push64 [B]
   7903 :Push64 [C]
   7904 :Push64 [E]
   7905 :Call {ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut}
   7909 :Pop64 [E]
   7910 :Pop64 [C]

   //File:/Types/Vector.uc
   //Line:65

   7911 :Pop64 [B]
   7912 :StoreRegToReg64 [F],[A]
   7913 :notequalto8 [B],[A],[F]
   7914 :LNot8 [F],[B]
   7915 :Jumpif [B],{7926}
   7919 :StoreRegOnStackSub8 [B],19
   7920 :Store8 [A],0
   7921 :StoreRegToReg8 [A],[F]
   7922 :Jump {8012}
   7926 :Debug_LineEnter 
   7927 :Store32 [A], 0
   7929 :StoreRegToReg32 [A],[B]

   //StackFrameSize:32

   7930 :StoreRegToReg32 [B],[D]
   7931 :StoreRegOnStackSub64 [D],18
   7932 :GetFromStackSub64 [B],18

   //File:/Types/Vector.uc
   //Line:65
   //Line:70

   7933 :StoreRegOnStackSub64 [B],18
   7934 :StoreRegToReg64 [C],[B]
   7935 :StoreRegToReg64 [B],[D]
   7936 :StoreRegToReg64 [B],[D]
   7937 :Push64 [C]
   7938 :Push64 [E]
   7939 :Call {ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut}
   7943 :Pop64 [E]
   7944 :Pop64 [C]
   7945 :StoreRegToReg64 [F],[A]
   7946 :GetFromStackSub64 [B],18
   7947 :lessthan8 [B],[A],[F]
   7948 :LNot8 [F],[B]
   7949 :Jumpif [B],{8009}
   7953 :StoreRegOnStackSub8 [B],10
   7954 :StoreRegToReg64 [C],[A]
   7955 :Debug_LineEnter 
   7956 :StoreRegToReg64 [A],[B]
   7957 :GetFromStackSub64 [D],18
   7958 :StoreRegOnStackSub64 [D],18
   7959 :StoreRegToReg64 [A],[D]
   7960 :StoreRegOnStackSub64 [E],9
   7961 :GetFromStackSub64 [E],18
   7962 :Call {ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr}
   7966 :StoreFromPtrToReg64 [F],[A]
   7967 :GetFromStackSub64 [B],9
   7968 :StoreRegOnStackSub64 [B],9
   7969 :GetFromStackSub64 [B],18
   7970 :StoreRegOnStackSub64 [B],18
   7971 :GetFromStackSub64 [D],9
   7972 :GetFromStackSub64 [E],18
   7973 :Push8 [A]
   7974 :Call {ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr}

   //File:/Types/Vector.uc
   //Line:70
   //Line:71

   7978 :Pop8 [A]
   7979 :StoreFromPtrToReg64 [F],[B]
   7980 :notequalto8 [A],[B],[F]
   7981 :LNot8 [F],[A]
   7982 :StoreRegToReg8 [A],[C]
   7983 :Jumpif [C],{7994}
   7987 :StoreRegOnStackSub8 [C],1
   7988 :Store8 [A],0
   7989 :StoreRegToReg8 [A],[F]
   7990 :Jump {8012}
   7994 :Debug_LineEnter 
   7995 :GetFromStackSub64 [A],18
   7996 :StoreRegOnStackSub64 [A],18
   7997 :Store64 [A], 1
   8001 :GetFromStackSub64 [D],18
   8002 :Add64 [D],[A],[F]
   8003 :StoreRegToReg64 [F],[D]
   8004 :StoreRegOnStackSub64 [D],18
   8005 :Jump {7932}
   8009 :Debug_LineEnter 
   8010 :Store8 [A],1
   8011 :StoreRegToReg8 [A],[F]
   8012 :Store64 [B], 19
   8016 :DecrementStackPointer [B]
   8017 :Debug_FuncEnd 
   8018 :Ret 
---ULang:StringSpan_t<uft8>:(&notequal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut: 
   8019 :Debug_FuncStart 

   //StackFrameSize:16

   8020 :Debug_LineEnter 
   8021 :StoreRegToReg64 [D],[A]
   8022 :StoreRegToReg64 [A],[B]

   //File:/Types/Vector.uc
   //Line:0

   8023 :StoreRegToReg64 [E],[C]
   8024 :StoreRegToReg64 [A],[D]

   //Line:73

   8025 :StoreRegToReg64 [C],[E]
   8026 :Call {ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut}
   8030 :LNot8 [F],[A]
   8031 :StoreRegToReg8 [A],[F]
   8032 :Debug_FuncEnd 
   8033 :Ret 
---ULang:StringSpan_t<uft8>:AsSpan^ULang:StringSpan_t<uft8>&: 
   8034 :Store64 [A], 16
   8038 :IncrementStackPointer [A]
   8039 :Debug_FuncStart 
   8040 :Debug_LineEnter 
   8041 :GetPointerOfStackSub [A],16
   8042 :Debug_LineEnter 
   8043 :StoreFromPtrToReg64 [D],[B]
   8044 :Read64 [D],[C],8

   //StackFrameSize:16

   8045 :StoreRegToReg64 [A],[D]
   8046 :StoreRegToReg64 [B],[E]
   8047 :StoreRegToReg64 [C],[F]

   //File:/Types/Vector.uc
   //Line:0

   8048 :Call {ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr}
   8052 :GetPointerOfStackSub [A],16
   8053 :StoreRegToReg64 [A],[F]
   8054 :Store64 [A], 16
   8058 :DecrementStackPointer [A]
   8059 :Debug_FuncEnd 
   8060 :Ret 
---ULang:StringSpan_t<uft8>:iAsSpan^ULang:StringSpan_t<uft8>&imut: 
   8061 :Store64 [A], 16
   8065 :IncrementStackPointer [A]
   8066 :Debug_FuncStart 
   8067 :Debug_LineEnter 
   8068 :GetPointerOfStackSub [A],16
   8069 :Debug_LineEnter 
   8070 :StoreFromPtrToReg64 [D],[B]
   8071 :Read64 [D],[C],8
   8072 :StoreRegToReg64 [A],[D]

   //File:/Types/String.uc
   //Line:12

   8073 :StoreRegToReg64 [B],[E]
   8074 :StoreRegToReg64 [C],[F]
   8075 :Call {ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr}

   //Line:13

   8079 :GetPointerOfStackSub [A],16
   8080 :StoreRegToReg64 [A],[F]
   8081 :Store64 [A], 16
   8085 :DecrementStackPointer [A]
   8086 :Debug_FuncEnd 

   //[A] = ULang:StringSpan_t<uft8>:(&_new&):(&this&)

   8087 :Ret 
---ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&: 

   //File:/Types/String.uc
   //Line:16

   8088 :Store64 [A], 16
   8092 :IncrementStackPointer [A]
   8093 :Debug_FuncStart 
   8094 :Debug_LineEnter 
   8095 :GetPointerOfStackSub [A],16

   //[A] = ULang:StringSpan_t<uft8>:(&_new&):(&this&)

   8096 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:19

   8097 :StoreRegToReg64 [D],[B]
   8098 :StoreRegToReg64 [D],[C]
   8099 :StoreRegToReg64 [B],[D]
   8100 :Push64 [A]
   8101 :Push64 [C]
   8102 :Call {ULang:Span<uft8>:Data^ULang:Span<uft8>&}
   8106 :Pop64 [C]
   8107 :Pop64 [A]
   8108 :StoreRegToReg64 [C],[B]

   //File:/Types/String.uc
   //Line:21

   8109 :StoreRegToReg64 [B],[D]
   8110 :StoreRegToReg64 [F],[E]
   8111 :Push64 [A]

   //StackFrameSize:19

   8112 :Push64 [E]
   8113 :Call {ULang:Span<uft8>:Size^ULang:Span<uft8>&imut}
   8117 :Pop64 [E]
   8118 :Pop64 [A]
   8119 :StoreRegToReg64 [A],[D]
   8120 :StoreRegToReg64 [E],[B]
   8121 :StoreRegToReg64 [B],[E]
   8122 :StoreRegToReg64 [F],[C]
   8123 :StoreRegToReg64 [C],[F]
   8124 :Call {ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&,[&],uptr}
   8128 :GetPointerOfStackSub [A],16
   8129 :StoreRegToReg64 [A],[F]
   8130 :Store64 [A], 16
   8134 :DecrementStackPointer [A]
   8135 :Debug_FuncEnd 
   8136 :Ret 
---ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&imut: 
   8137 :Store64 [A], 16
   8141 :IncrementStackPointer [A]
   8142 :Debug_FuncStart 
   8143 :Debug_LineEnter 
   8144 :GetPointerOfStackSub [A],16
   8145 :Debug_LineEnter 
   8146 :StoreRegToReg64 [D],[B]
   8147 :StoreRegToReg64 [D],[C]
   8148 :StoreRegToReg64 [B],[D]
   8149 :Push64 [A]
   8150 :Push64 [C]
   8151 :Call {ULang:Span<uft8>:Data^ULang:Span<uft8>&}

   //Line:26

   8155 :Pop64 [C]
   8156 :Pop64 [A]
   8157 :StoreRegToReg64 [C],[B]
   8158 :StoreRegToReg64 [B],[D]
   8159 :StoreRegToReg64 [F],[E]
   8160 :Push64 [A]
   8161 :Push64 [E]
   8162 :Call {ULang:Span<uft8>:Size^ULang:Span<uft8>&imut}
   8166 :Pop64 [E]
   8167 :Pop64 [A]
   8168 :StoreRegToReg64 [A],[D]
   8169 :StoreRegToReg64 [E],[B]
   8170 :StoreRegToReg64 [B],[E]
   8171 :StoreRegToReg64 [F],[C]
   8172 :StoreRegToReg64 [C],[F]
   8173 :Call {ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&,[&],uptr}
   8177 :GetPointerOfStackSub [A],16
   8178 :StoreRegToReg64 [A],[F]
   8179 :Store64 [A], 16
   8183 :DecrementStackPointer [A]

   //Line:28

   8184 :Debug_FuncEnd 
   8185 :Ret 
---ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr: 
   8186 :Store64 [A], 8
   8190 :IncrementStackPointer [A]
   8191 :Debug_FuncStart 
   8192 :Debug_LineEnter 
   8193 :StoreFromPtrToReg64 [D],[A]
   8194 :StoreRegToReg64 [E],[B]
   8195 :Store64 [C], 1
   8199 :MultU64 [B],[C],[F]
   8200 :StoreRegOnStackSub64 [F],8
   8201 :GetFromStackSub64 [F],8
   8202 :Add64 [A],[F],[F]
   8203 :Store64 [A], 8
   8207 :DecrementStackPointer [A]
   8208 :Debug_FuncEnd 
   8209 :Ret 
---ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&imut,uptr: 
   8210 :Store64 [A], 8
   8214 :IncrementStackPointer [A]
   8215 :Debug_FuncStart 
   8216 :Debug_LineEnter 
   8217 :StoreFromPtrToReg64 [D],[A]
   8218 :StoreRegToReg64 [E],[B]
   8219 :Store64 [C], 1

   //Line:26

   8223 :MultU64 [B],[C],[F]
   8224 :StoreRegOnStackSub64 [F],8
   8225 :GetFromStackSub64 [F],8
   8226 :Add64 [A],[F],[F]
   8227 :Store64 [A], 8
   8231 :DecrementStackPointer [A]
   8232 :Debug_FuncEnd 
   8233 :Ret 
---ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,ULang:Range_t<uintptr>: 
   8234 :Store64 [A], 48

   //Line:30

   8238 :IncrementStackPointer [A]
   8239 :Debug_FuncStart 
   8240 :Debug_LineEnter 
   8241 :Debug_LineEnter 
   8242 :Debug_LineEnter 
   8243 :StoreRegToReg64 [D],[A]
   8244 :StoreRegToReg64 [A],[D]
   8245 :Call {ULang:StringSpan_t<uft8>:AsSpan^ULang:StringSpan_t<uft8>&}
   8249 :StoreFromPtrToReg64 [F],[A]
   8250 :StoreRegOnStackSub64 [A],48
   8251 :Read64 [F],[A],8

   //File:/Types/String.uc
   //Line:32

   8252 :StoreRegOnStackSub64 [A],40
   8253 :GetPointerOfStackSub [A],48
   8254 :GetFromStackSub64 [B],64
   8255 :StoreRegOnStackSub64 [B],64
   8256 :GetFromStackSub64 [B],72
   8257 :StoreRegOnStackSub64 [B],72
   8258 :StoreRegToReg64 [A],[D]
   8259 :GetFromStackSub64 [B],64
   8260 :Push64 [B]
   8261 :GetFromStackSub64 [B],64
   8262 :Push64 [B]
   8263 :Call {ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>}

   //File:/Types/String.uc
   //Line:0

   8267 :Pop64 [A]
   8268 :Pop64 [A]

   //Line:34

   8269 :StoreFromPtrToReg64 [F],[A]
   8270 :StoreRegOnStackSub64 [A],32
   8271 :Read64 [F],[A],8
   8272 :StoreRegOnStackSub64 [A],24
   8273 :GetPointerOfStackSub [A],32
   8274 :StoreRegToReg64 [A],[D]
   8275 :Call {ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&}
   8279 :StoreFromPtrToReg64 [F],[A]
   8280 :StoreRegOnStackSub64 [A],16
   8281 :Read64 [F],[A],8
   8282 :StoreRegOnStackSub64 [A],8
   8283 :GetPointerOfStackSub [A],16
   8284 :StoreRegToReg64 [A],[F]
   8285 :Store64 [A], 48

   //StackFrameSize:16

   8289 :DecrementStackPointer [A]
   8290 :Debug_FuncEnd 
   8291 :Ret 
---ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&imut,ULang:Range_t<uintptr>: 

   //File:/Types/String.uc
   //Line:0

   8292 :Store64 [A], 48
   8296 :IncrementStackPointer [A]
   8297 :Debug_FuncStart 
   8298 :Debug_LineEnter 
   8299 :Debug_LineEnter 
   8300 :Debug_LineEnter 
   8301 :StoreRegToReg64 [D],[A]
   8302 :StoreRegToReg64 [A],[D]
   8303 :Call {ULang:StringSpan_t<uft8>:AsSpan^ULang:StringSpan_t<uft8>&}
   8307 :StoreFromPtrToReg64 [F],[A]
   8308 :StoreRegOnStackSub64 [A],48
   8309 :Read64 [F],[A],8
   8310 :StoreRegOnStackSub64 [A],40
   8311 :GetPointerOfStackSub [A],48
   8312 :GetFromStackSub64 [B],64
   8313 :StoreRegOnStackSub64 [B],64

   //StackFrameSize:16

   8314 :GetFromStackSub64 [B],72
   8315 :StoreRegOnStackSub64 [B],72
   8316 :StoreRegToReg64 [A],[D]

   //File:/Types/String.uc
   //Line:0

   8317 :GetFromStackSub64 [B],64
   8318 :Push64 [B]

   //Line:38

   8319 :GetFromStackSub64 [B],64
   8320 :Push64 [B]
   8321 :Call {ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>}
   8325 :Pop64 [A]
   8326 :Pop64 [A]
   8327 :StoreFromPtrToReg64 [F],[A]
   8328 :StoreRegOnStackSub64 [A],32
   8329 :Read64 [F],[A],8
   8330 :StoreRegOnStackSub64 [A],24
   8331 :GetPointerOfStackSub [A],32
   8332 :StoreRegToReg64 [A],[D]
   8333 :Call {ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&}
   8337 :StoreFromPtrToReg64 [F],[A]
   8338 :StoreRegOnStackSub64 [A],16
   8339 :Read64 [F],[A],8
   8340 :StoreRegOnStackSub64 [A],8
   8341 :GetPointerOfStackSub [A],16
   8342 :StoreRegToReg64 [A],[F]
   8343 :Store64 [A], 48
   8347 :DecrementStackPointer [A]
   8348 :Debug_FuncEnd 
   8349 :Ret 
---ULang:String_t<uft8>:(&_init&): 
   8350 :Debug_FuncStart 
   8351 :Debug_LineEnter 
   8352 :StoreRegToReg64 [D],[A]
   8353 :Debug_LineEnter 
   8354 :StoreRegToReg64 [A],[D]
   8355 :Call {ULang:Vector<uft8>:(&_new&)^ULang:Vector<uft8>&}
   8359 :Debug_FuncEnd 
   8360 :Ret 
---ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&: 

   //StackFrameSize:16

   8361 :Debug_FuncStart 
   8362 :StoreRegToReg64 [D],[A]
   8363 :StoreRegToReg64 [A],[D]

   //File:/Types/String.uc
   //Line:0

   8364 :Call {ULang:String_t<uft8>:(&_init&)}
   8368 :Debug_FuncEnd 
   8369 :Ret 
---ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut: 
   8370 :Store64 [A], 9
   8374 :IncrementStackPointer [A]
   8375 :Debug_FuncStart 
   8376 :StoreRegToReg64 [D],[A]
   8377 :StoreRegToReg64 [D],[B]
   8378 :StoreRegToReg64 [A],[D]
   8379 :Push64 [B]
   8380 :Push64 [E]
   8381 :Call {ULang:String_t<uft8>:(&_init&)}
   8385 :Pop64 [E]
   8386 :Pop64 [B]
   8387 :Debug_LineEnter 
   8388 :StoreRegToReg64 [B],[A]
   8389 :StoreRegToReg64 [E],[C]
   8390 :StoreRegToReg64 [C],[D]
   8391 :Push64 [A]
   8392 :Push64 [B]
   8393 :Push64 [E]
   8394 :Call {ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut}
   8398 :Pop64 [E]
   8399 :Pop64 [B]
   8400 :Pop64 [A]
   8401 :StoreRegToReg64 [A],[D]
   8402 :StoreRegToReg64 [E],[C]
   8403 :StoreRegToReg64 [F],[E]
   8404 :Push64 [B]
   8405 :Push64 [C]
   8406 :Call {ULang:String_t<uft8>:Resize^ULang:String_t<uft8>&,uptr}
   8410 :Pop64 [C]

   //File:/Types/String.uc
   //Line:41

   8411 :Pop64 [B]
   8412 :Debug_LineEnter 
   8413 :Store32 [A], 0
   8415 :StoreRegToReg32 [A],[E]
   8416 :StoreRegToReg32 [E],[D]
   8417 :StoreRegOnStackSub64 [D],9
   8418 :GetFromStackSub64 [D],9
   8419 :StoreRegOnStackSub64 [D],9
   8420 :StoreRegToReg64 [C],[D]
   8421 :StoreRegToReg64 [D],[E]
   8422 :StoreRegToReg64 [E],[D]
   8423 :Push64 [B]
   8424 :Push64 [C]
   8425 :Call {ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut}
   8429 :Pop64 [C]

   //StackFrameSize:8

   8430 :Pop64 [B]
   8431 :StoreRegToReg64 [F],[A]
   8432 :GetFromStackSub64 [D],9

   //File:/Types/String.uc
   //Line:42

   8433 :lessthan8 [D],[A],[F]
   8434 :LNot8 [F],[D]
   8435 :Jumpif [D],{8479}
   8439 :StoreRegOnStackSub8 [D],1
   8440 :StoreRegToReg64 [C],[A]
   8441 :GetFromStackSub64 [D],9
   8442 :StoreRegOnStackSub64 [D],9
   8443 :StoreRegToReg64 [A],[D]
   8444 :GetFromStackSub64 [E],9
   8445 :Push64 [B]
   8446 :Call {ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr}
   8450 :Pop64 [B]
   8451 :StoreFromPtrToReg64 [F],[A]

   //StackFrameSize:48

   8452 :StoreRegToReg64 [B],[C]
   8453 :StoreRegToReg64 [C],[D]
   8454 :GetFromStackSub64 [E],9

   //File:/Types/String.uc
   //Line:44
   //Line:42
   //Line:44

   8455 :StoreRegOnStackSub64 [E],9
   8456 :StoreRegToReg64 [C],[D]
   8457 :GetFromStackSub64 [E],9
   8458 :Push8 [A]
   8459 :Call {ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&,uptr}
   8463 :Pop8 [A]
   8464 :StoreRegToPtr8 [A],[F]
   8465 :GetFromStackSub64 [B],9
   8466 :StoreRegOnStackSub64 [B],9
   8467 :Store64 [B], 1
   8471 :GetFromStackSub64 [C],9
   8472 :Add64 [C],[B],[F]
   8473 :StoreRegToReg64 [F],[C]
   8474 :StoreRegOnStackSub64 [C],9
   8475 :Jump {8418}
   8479 :Store64 [A], 9
   8483 :DecrementStackPointer [A]
   8484 :Debug_FuncEnd 
   8485 :Ret 
---ULang:String_t<uft8>:iData^ULang:String_t<uft8>&imut: 
   8486 :Debug_FuncStart 
   8487 :Debug_LineEnter 
   8488 :StoreRegToReg64 [D],[A]
   8489 :StoreRegToReg64 [A],[D]
   8490 :Call {ULang:Vector<uft8>:iData^ULang:Vector<uft8>&imut}
   8494 :Debug_FuncEnd 
   8495 :Ret 
---ULang:String_t<uft8>:Data^ULang:String_t<uft8>&: 
   8496 :Debug_FuncStart 
   8497 :Debug_LineEnter 
   8498 :StoreRegToReg64 [D],[A]
   8499 :StoreRegToReg64 [A],[D]
   8500 :Call {ULang:Vector<uft8>:Data^ULang:Vector<uft8>&}
   8504 :Debug_FuncEnd 
   8505 :Ret 
---ULang:String_t<uft8>:Size^ULang:String_t<uft8>&imut: 
   8506 :Debug_FuncStart 
   8507 :Debug_LineEnter 

   //StackFrameSize:48

   8508 :StoreRegToReg64 [D],[A]
   8509 :StoreRegToReg64 [A],[D]
   8510 :Call {ULang:Vector<uft8>:Size^ULang:Vector<uft8>&imut}
   8514 :Debug_FuncEnd 
   8515 :Ret 
---ULang:String_t<uft8>:Capacity^ULang:String_t<uft8>&imut: 
   8516 :Debug_FuncStart 
   8517 :Debug_LineEnter 
   8518 :StoreRegToReg64 [D],[A]
   8519 :StoreRegToReg64 [A],[D]
   8520 :Call {ULang:Vector<uft8>:Capacity^ULang:Vector<uft8>&imut}
   8524 :Debug_FuncEnd 
   8525 :Ret 
---ULang:String_t<uft8>:Resize^ULang:String_t<uft8>&,uptr: 
   8526 :Debug_FuncStart 
   8527 :Debug_LineEnter 
   8528 :StoreRegToReg64 [D],[A]
   8529 :StoreRegToReg64 [E],[B]
   8530 :StoreRegToReg64 [A],[D]
   8531 :StoreRegToReg64 [B],[E]
   8532 :Call {ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr}
   8536 :Debug_FuncEnd 
   8537 :Ret 
---ULang:String_t<uft8>:Reserve^ULang:String_t<uft8>&,uptr: 
   8538 :Debug_FuncStart 
   8539 :Debug_LineEnter 
   8540 :StoreRegToReg64 [D],[A]
   8541 :StoreRegToReg64 [E],[B]
   8542 :StoreRegToReg64 [A],[D]
   8543 :StoreRegToReg64 [B],[E]
   8544 :Call {ULang:Vector<uft8>:Reserve^ULang:Vector<uft8>&,uptr}
   8548 :Debug_FuncEnd 
   8549 :Ret 
---ULang:String_t<uft8>:Clear^ULang:String_t<uft8>&: 
   8550 :Debug_FuncStart 
   8551 :Debug_LineEnter 
   8552 :StoreRegToReg64 [D],[A]
   8553 :StoreRegToReg64 [A],[D]
   8554 :Call {ULang:Vector<uft8>:Clear^ULang:Vector<uft8>&}
   8558 :Debug_FuncEnd 
   8559 :Ret 
---ULang:String_t<uft8>:Pop^ULang:String_t<uft8>&: 
   8560 :Debug_FuncStart 
   8561 :Debug_LineEnter 
   8562 :StoreRegToReg64 [D],[A]
   8563 :StoreRegToReg64 [A],[D]
   8564 :Call {ULang:Vector<uft8>:Pop^ULang:Vector<uft8>&}
   8568 :Debug_FuncEnd 

   //Line:0

   8569 :Ret 
---ULang:String_t<uft8>:Remove^ULang:String_t<uft8>&,uptr: 
   8570 :Debug_FuncStart 
   8571 :Debug_LineEnter 
   8572 :StoreRegToReg64 [D],[A]
   8573 :StoreRegToReg64 [E],[B]
   8574 :StoreRegToReg64 [A],[D]
   8575 :StoreRegToReg64 [B],[E]
   8576 :Call {ULang:Vector<uft8>:Remove^ULang:Vector<uft8>&,uptr}
   8580 :Debug_FuncEnd 
   8581 :Ret 
---ULang:String_t<uft8>:Push^ULang:String_t<uft8>&,&imut: 
   8582 :Debug_FuncStart 
   8583 :Debug_LineEnter 

   //StackFrameSize:9

   8584 :StoreRegToReg64 [D],[A]
   8585 :StoreRegToReg64 [E],[B]
   8586 :StoreRegToReg64 [A],[D]
   8587 :StoreRegToReg64 [B],[E]
   8588 :Call {ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,&imut}
   8592 :Debug_FuncEnd 
   8593 :Ret 
---ULang:String_t<uft8>:Push^ULang:String_t<uft8>&,mov: 
   8594 :Debug_FuncStart 
   8595 :Debug_LineEnter 
   8596 :StoreRegToReg64 [D],[A]
   8597 :StoreRegToReg8 [E],[B]

   //File:/Types/String.uc
   //Line:58

   8598 :StoreRegToReg64 [A],[D]
   8599 :StoreRegToReg8 [B],[E]
   8600 :Call {ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,mov}
   8604 :Debug_FuncEnd 
   8605 :Ret 
---ULang:String_t<uft8>:Insert^ULang:String_t<uft8>&,uptr,&imut: 
   8606 :Debug_FuncStart 
   8607 :Debug_LineEnter 
   8608 :StoreRegToReg64 [D],[A]
   8609 :StoreRegToReg64 [E],[B]
   8610 :StoreRegToReg64 [F],[C]
   8611 :StoreRegToReg64 [A],[D]
   8612 :StoreRegToReg64 [B],[E]
   8613 :StoreRegToReg64 [C],[F]
   8614 :Call {ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,&imut}
   8618 :Debug_FuncEnd 
   8619 :Ret 
---ULang:String_t<uft8>:Insert^ULang:String_t<uft8>&,uptr,mov: 
   8620 :Debug_FuncStart 
   8621 :Debug_LineEnter 
   8622 :StoreRegToReg64 [D],[A]

   //Line:59

   8623 :StoreRegToReg64 [E],[B]
   8624 :StoreRegToReg8 [F],[C]
   8625 :StoreRegToReg64 [A],[D]
   8626 :StoreRegToReg64 [B],[E]
   8627 :StoreRegToReg8 [C],[F]
   8628 :Call {ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,mov}
   8632 :Debug_FuncEnd 
   8633 :Ret 
---ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&,uptr: 
   8634 :Debug_FuncStart 
   8635 :Debug_LineEnter 
   8636 :Debug_LineEnter 
   8637 :StoreRegToReg64 [D],[A]
   8638 :StoreRegToReg64 [E],[B]
   8639 :StoreRegToReg64 [A],[D]
   8640 :StoreRegToReg64 [B],[E]
   8641 :Call {ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr}
   8645 :Debug_FuncEnd 
   8646 :Ret 
---ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&imut,uptr: 
   8647 :Debug_FuncStart 
   8648 :Debug_LineEnter 
   8649 :Debug_LineEnter 
   8650 :StoreRegToReg64 [D],[A]
   8651 :StoreRegToReg64 [E],[B]
   8652 :StoreRegToReg64 [A],[D]
   8653 :StoreRegToReg64 [B],[E]
   8654 :Call {ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr}
   8658 :Debug_FuncEnd 
   8659 :Ret 
---ULang:String_t<uft8>:Append^ULang:String_t<uft8>&,ULang:Span<uft8>imut: 
   8660 :Debug_FuncStart 
   8661 :Debug_LineEnter 
   8662 :StoreRegToReg64 [D],[A]
   8663 :GetFromStackSub64 [B],16
   8664 :StoreRegOnStackSub64 [B],16
   8665 :GetFromStackSub64 [B],24
   8666 :StoreRegOnStackSub64 [B],24
   8667 :StoreRegToReg64 [A],[D]
   8668 :GetFromStackSub64 [B],16
   8669 :Push64 [B]
   8670 :GetFromStackSub64 [B],16
   8671 :Push64 [B]
   8672 :Call {ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>imut}
   8676 :Pop64 [A]
   8677 :Pop64 [A]
   8678 :Debug_FuncEnd 
   8679 :Ret 
---ULang:String_t<uft8>:Append^ULang:String_t<uft8>&,ULang:Span<uft8>mov: 
   8680 :Debug_FuncStart 
   8681 :Debug_LineEnter 
   8682 :StoreRegToReg64 [D],[A]
   8683 :GetFromStackSub64 [B],16
   8684 :StoreRegOnStackSub64 [B],16
   8685 :GetFromStackSub64 [B],24
   8686 :StoreRegOnStackSub64 [B],24
   8687 :StoreRegToReg64 [A],[D]
   8688 :GetFromStackSub64 [B],16
   8689 :Push64 [B]
   8690 :GetFromStackSub64 [B],16
   8691 :Push64 [B]
   8692 :Call {ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>mov}
   8696 :Pop64 [A]
   8697 :Pop64 [A]
   8698 :Debug_FuncEnd 
   8699 :Ret 
---ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut: 
   8700 :Store64 [A], 32
   8704 :IncrementStackPointer [A]
   8705 :Debug_FuncStart 
   8706 :Debug_LineEnter 
   8707 :StoreRegToReg64 [D],[A]
   8708 :StoreRegToReg64 [A],[B]
   8709 :StoreRegToReg64 [A],[D]
   8710 :Push64 [E]

   //File:/Types/String.uc
   //Line:62

   8711 :Call {ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut}
   8715 :Pop64 [E]
   8716 :StoreFromPtrToReg64 [F],[A]
   8717 :StoreRegOnStackSub64 [A],32
   8718 :Read64 [F],[A],8
   8719 :StoreRegOnStackSub64 [A],24
   8720 :GetPointerOfStackSub [A],32

   //File:/Types/String.uc
   //Line:65

   8721 :StoreRegToReg64 [E],[B]
   8722 :StoreRegToReg64 [B],[D]
   8723 :Push64 [A]
   8724 :Call {ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut}
   8728 :Pop64 [A]
   8729 :StoreFromPtrToReg64 [F],[B]
   8730 :StoreRegOnStackSub64 [B],16

   //File:/Types/String.uc
   //Line:66

   8731 :Read64 [F],[B],8
   8732 :StoreRegOnStackSub64 [B],8
   8733 :GetPointerOfStackSub [B],16
   8734 :StoreRegToReg64 [A],[D]
   8735 :StoreRegToReg64 [B],[E]
   8736 :Call {ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut}
   8740 :Store64 [A], 32
   8744 :DecrementStackPointer [A]
   8745 :Debug_FuncEnd 
   8746 :Ret 
---ULang:String_t<uft8>:(&notequal&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut: 
   8747 :Debug_FuncStart 
   8748 :Debug_LineEnter 
   8749 :StoreRegToReg64 [D],[A]
   8750 :StoreRegToReg64 [A],[B]
   8751 :StoreRegToReg64 [E],[C]
   8752 :StoreRegToReg64 [A],[D]

   //File:/Types/String.uc
   //Line:69

   8753 :StoreRegToReg64 [C],[E]
   8754 :Call {ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut}
   8758 :LNot8 [F],[A]
   8759 :StoreRegToReg8 [A],[F]
   8760 :Debug_FuncEnd 
   8761 :Ret 
---ULang:String_t<uft8>:(&Plus&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut: 
   8762 :Store64 [A], 48
   8766 :IncrementStackPointer [A]
   8767 :Debug_FuncStart 
   8768 :Debug_LineEnter 
   8769 :StoreRegToReg64 [D],[A]
   8770 :StoreRegToReg64 [A],[B]
   8771 :StoreRegToReg64 [E],[C]
   8772 :StoreRegToReg64 [C],[D]
   8773 :Push64 [A]
   8774 :Call {ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut}
   8778 :Pop64 [A]
   8779 :StoreFromPtrToReg64 [F],[B]
   8780 :StoreRegOnStackSub64 [B],48
   8781 :Read64 [F],[B],8
   8782 :StoreRegOnStackSub64 [B],40
   8783 :StoreRegToReg64 [B],[C]
   8784 :StoreRegOnStackSub64 [C],32

   //File:/Types/String.uc
   //Line:73

   8785 :GetPointerOfStackSub [C],32
   8786 :StoreRegToReg64 [C],[B]
   8787 :StoreRegToReg64 [C],[D]
   8788 :GetPointerOfStackSub [E],48
   8789 :StoreRegToReg64 [E],[F]
   8790 :StoreRegToReg64 [F],[E]
   8791 :Push64 [A]
   8792 :Push64 [B]
   8793 :Call {ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut}

   //File:/Types/String.uc
   //Line:75

   8797 :Pop64 [B]
   8798 :Pop64 [A]
   8799 :StoreRegToReg64 [A],[D]
   8800 :GetFromStackSub64 [E],32
   8801 :Call {ULang:String_t<uft8>:(&Plus&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut}
   8805 :StoreFromPtrToReg64 [F],[A]
   8806 :StoreRegOnStackSub64 [A],24
   8807 :Read64 [F],[A],8
   8808 :StoreRegOnStackSub64 [A],16

   //File:/Types/String.uc
   //Line:76

   8809 :Read64 [F],[A],16
   8810 :StoreRegOnStackSub64 [A],8
   8811 :GetPointerOfStackSub [A],24
   8812 :StoreRegToReg64 [A],[F]
   8813 :Store64 [A], 48
   8817 :DecrementStackPointer [A]
   8818 :Debug_FuncEnd 
   8819 :Ret 
---ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:String_t<uft8>&imut: 
   8820 :Store64 [A], 24
   8824 :IncrementStackPointer [A]
   8825 :Debug_FuncStart 
   8826 :Debug_LineEnter 
   8827 :StoreRegToReg64 [D],[A]
   8828 :Debug_LineEnter 
   8829 :StoreRegToReg64 [A],[B]
   8830 :StoreRegToReg64 [E],[C]
   8831 :StoreRegToReg64 [C],[D]
   8832 :Push64 [A]
   8833 :Call {ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut}
   8837 :Pop64 [A]
   8838 :StoreFromPtrToReg64 [F],[B]
   8839 :StoreRegOnStackSub64 [B],24
   8840 :Read64 [F],[B],8
   8841 :StoreRegOnStackSub64 [B],16
   8842 :StoreRegToReg64 [B],[C]
   8843 :StoreRegOnStackSub64 [C],8
   8844 :GetPointerOfStackSub [C],8
   8845 :StoreRegToReg64 [C],[B]
   8846 :StoreRegToReg64 [C],[D]
   8847 :GetPointerOfStackSub [E],24
   8848 :StoreRegToReg64 [E],[F]

   //File:/Types/String.uc
   //Line:79

   8849 :StoreRegToReg64 [F],[E]

   //Line:82

   8850 :Push64 [A]
   8851 :Push64 [B]
   8852 :Call {ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut}
   8856 :Pop64 [B]
   8857 :Pop64 [A]
   8858 :StoreRegToReg64 [A],[D]
   8859 :GetFromStackSub64 [E],8
   8860 :Call {ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:String_t<uft8>&imut}
   8864 :Store64 [A], 24
   8868 :DecrementStackPointer [A]
   8869 :Debug_FuncEnd 
   8870 :Ret 
---ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut: 
   8871 :Store64 [A], 16

   //File:/Types/String.uc
   //Line:85

   8875 :IncrementStackPointer [A]
   8876 :Debug_FuncStart 
   8877 :Debug_LineEnter 
   8878 :StoreRegToReg64 [D],[A]
   8879 :StoreRegToReg64 [A],[B]
   8880 :StoreRegToReg64 [A],[D]
   8881 :Push64 [E]
   8882 :Call {ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut}
   8886 :Pop64 [E]
   8887 :StoreFromPtrToReg64 [F],[A]
   8888 :StoreRegOnStackSub64 [A],16
   8889 :Read64 [F],[A],8
   8890 :StoreRegOnStackSub64 [A],8
   8891 :GetPointerOfStackSub [A],16
   8892 :StoreRegToReg64 [E],[B]
   8893 :StoreRegToReg64 [A],[D]
   8894 :StoreRegToReg64 [B],[E]

   //File:/Types/String.uc
   //Line:86

   8895 :Call {ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut}
   8899 :Store64 [A], 16
   8903 :DecrementStackPointer [A]
   8904 :Debug_FuncEnd 
   8905 :Ret 
---ULang:String_t<uft8>:(&notequal&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut: 
   8906 :Debug_FuncStart 
   8907 :Debug_LineEnter 
   8908 :StoreRegToReg64 [D],[A]
   8909 :StoreRegToReg64 [A],[B]
   8910 :StoreRegToReg64 [E],[C]
   8911 :StoreRegToReg64 [A],[D]

   //StackFrameSize:32

   8912 :StoreRegToReg64 [C],[E]
   8913 :Call {ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut}
   8917 :LNot8 [F],[A]
   8918 :StoreRegToReg8 [A],[F]
   8919 :Debug_FuncEnd 
   8920 :Ret 
---ULang:String_t<uft8>:(&Plus&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut: 
   8921 :Store64 [A], 56
   8925 :IncrementStackPointer [A]
   8926 :Debug_FuncStart 
   8927 :Debug_LineEnter 
   8928 :StoreRegToReg64 [D],[A]
   8929 :StoreFromPtrToReg64 [A],[B]
   8930 :StoreRegOnStackSub64 [B],56
   8931 :StoreFromPtrToReg64 [A],[B]
   8932 :StoreRegOnStackSub64 [B],48
   8933 :StoreFromPtrToReg64 [A],[B]
   8934 :StoreRegOnStackSub64 [B],40
   8935 :GetFromStackSub64 [B],40
   8936 :StoreRegOnStackSub64 [B],48
   8937 :StoreFromPtrToReg64 [A],[B]
   8938 :StoreRegOnStackSub64 [B],8
   8939 :GetFromStackSub64 [B],8
   8940 :StoreRegOnStackSub64 [B],32
   8941 :Debug_LineEnter 
   8942 :GetPointerOfStackSub [B],32
   8943 :StoreRegToReg64 [E],[C]
   8944 :StoreRegToReg64 [B],[D]
   8945 :StoreRegToReg64 [C],[E]
   8946 :Call {ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut}
   8950 :Debug_LineEnter 
   8951 :GetFromStackSub64 [A],32
   8952 :StoreRegOnStackSub64 [A],32
   8953 :GetFromStackSub64 [A],24
   8954 :StoreRegOnStackSub64 [A],24
   8955 :GetFromStackSub64 [A],16
   8956 :StoreRegOnStackSub64 [A],16
   8957 :GetPointerOfStackSub [A],32
   8958 :StoreRegToReg64 [A],[F]
   8959 :Store64 [A], 56
   8963 :DecrementStackPointer [A]
   8964 :Debug_FuncEnd 
   8965 :Ret 
---ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut: 
   8966 :Store64 [A], 16
   8970 :IncrementStackPointer [A]
   8971 :Debug_FuncStart 

   //StackFrameSize:48

   8972 :Debug_LineEnter 
   8973 :StoreRegToReg64 [D],[A]
   8974 :StoreRegToReg64 [E],[B]

   //File:/Types/String.uc
   //Line:94

   8975 :StoreRegToReg64 [B],[D]
   8976 :Push64 [A]
   8977 :Call {ULang:StringSpan_t<uft8>:iAsSpan^ULang:StringSpan_t<uft8>&imut}
   8981 :Pop64 [A]
   8982 :StoreFromPtrToReg64 [F],[B]
   8983 :StoreRegOnStackSub64 [B],16
   8984 :Read64 [F],[B],8
   8985 :StoreRegOnStackSub64 [B],8
   8986 :StoreRegToReg64 [A],[D]
   8987 :GetFromStackSub64 [B],16
   8988 :Push64 [B]
   8989 :GetFromStackSub64 [B],16
   8990 :Push64 [B]
   8991 :Call {ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>imut}
   8995 :Pop64 [A]
   8996 :Pop64 [A]
   8997 :Store64 [A], 16
   9001 :DecrementStackPointer [A]
   9002 :Debug_FuncEnd 
   9003 :Ret 
---ULang:String_t<uft8>:AsSpan^ULang:String_t<uft8>&: 
   9004 :Store64 [A], 16
   9008 :IncrementStackPointer [A]
   9009 :Debug_FuncStart 
   9010 :Debug_LineEnter 
   9011 :GetPointerOfStackSub [A],16
   9012 :StoreRegToReg64 [A],[D]
   9013 :Call {ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&}
   9017 :GetPointerOfStackSub [A],16
   9018 :StoreRegToReg64 [A],[F]
   9019 :Store64 [A], 16
   9023 :DecrementStackPointer [A]
   9024 :Debug_FuncEnd 
   9025 :Ret 
---ULang:String_t<uft8>:iAsSpan^ULang:String_t<uft8>&imut: 
   9026 :Store64 [A], 16
   9030 :IncrementStackPointer [A]

   //File:/Types/String.uc
   //Line:94

   9031 :Debug_FuncStart 
   9032 :Debug_LineEnter 

   //Line:97

   9033 :GetPointerOfStackSub [A],16
   9034 :StoreRegToReg64 [A],[D]
   9035 :Call {ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&}
   9039 :GetPointerOfStackSub [A],16
   9040 :StoreRegToReg64 [A],[F]
   9041 :Store64 [A], 16
   9045 :DecrementStackPointer [A]
   9046 :Debug_FuncEnd 
   9047 :Ret 
---ULang:String_t<uft8>:Str^ULang:String_t<uft8>&: 
   9048 :Store64 [A], 16
   9052 :IncrementStackPointer [A]
   9053 :Debug_FuncStart 
   9054 :Debug_LineEnter 
   9055 :GetPointerOfStackSub [A],16
   9056 :StoreRegToReg64 [A],[D]
   9057 :Call {ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&}
   9061 :GetPointerOfStackSub [A],16
   9062 :StoreRegToReg64 [A],[F]
   9063 :Store64 [A], 16
   9067 :DecrementStackPointer [A]
   9068 :Debug_FuncEnd 
   9069 :Ret 
---ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut: 
   9070 :Store64 [A], 16
   9074 :IncrementStackPointer [A]
   9075 :Debug_FuncStart 
   9076 :Debug_LineEnter 

   //StackFrameSize:16

   9077 :GetPointerOfStackSub [A],16
   9078 :StoreRegToReg64 [A],[D]
   9079 :Call {ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&}
   9083 :GetPointerOfStackSub [A],16
   9084 :StoreRegToReg64 [A],[F]
   9085 :Store64 [A], 16
   9089 :DecrementStackPointer [A]
   9090 :Debug_FuncEnd 
   9091 :Ret 
---ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&,ULang:Range_t<uintptr>: 
   9092 :Store64 [A], 32
   9096 :IncrementStackPointer [A]
   9097 :Debug_FuncStart 
   9098 :Debug_LineEnter 
   9099 :Debug_LineEnter 
   9100 :StoreRegToReg64 [D],[A]
   9101 :StoreRegToReg64 [A],[D]
   9102 :Call {ULang:String_t<uft8>:Str^ULang:String_t<uft8>&}
   9106 :StoreFromPtrToReg64 [F],[A]
   9107 :StoreRegOnStackSub64 [A],32
   9108 :Read64 [F],[A],8
   9109 :StoreRegOnStackSub64 [A],24
   9110 :GetPointerOfStackSub [A],32
   9111 :GetFromStackSub64 [B],48
   9112 :StoreRegOnStackSub64 [B],48

   //File:/Types/String.uc
   //Line:103

   9113 :GetFromStackSub64 [B],56
   9114 :StoreRegOnStackSub64 [B],56
   9115 :StoreRegToReg64 [A],[D]
   9116 :GetFromStackSub64 [B],48
   9117 :Push64 [B]
   9118 :GetFromStackSub64 [B],48
   9119 :Push64 [B]
   9120 :Call {ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,ULang:Range_t<uintptr>}
   9124 :Pop64 [A]

   //StackFrameSize:56

   9125 :Pop64 [A]
   9126 :StoreFromPtrToReg64 [F],[A]
   9127 :StoreRegOnStackSub64 [A],16

   //File:/Types/String.uc
   //Line:106

   9128 :Read64 [F],[A],8
   9129 :StoreRegOnStackSub64 [A],8
   9130 :GetPointerOfStackSub [A],16
   9131 :StoreRegToReg64 [A],[F]
   9132 :Store64 [A], 32
   9136 :DecrementStackPointer [A]
   9137 :Debug_FuncEnd 
   9138 :Ret 
---ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&imut,ULang:Range_t<uintptr>: 
   9139 :Store64 [A], 32
   9143 :IncrementStackPointer [A]
   9144 :Debug_FuncStart 
   9145 :Debug_LineEnter 
   9146 :Debug_LineEnter 
   9147 :StoreRegToReg64 [D],[A]
   9148 :StoreRegToReg64 [A],[D]
   9149 :Call {ULang:String_t<uft8>:Str^ULang:String_t<uft8>&}
   9153 :StoreFromPtrToReg64 [F],[A]
   9154 :StoreRegOnStackSub64 [A],32
   9155 :Read64 [F],[A],8
   9156 :StoreRegOnStackSub64 [A],24
   9157 :GetPointerOfStackSub [A],32
   9158 :GetFromStackSub64 [B],48
   9159 :StoreRegOnStackSub64 [B],48
   9160 :GetFromStackSub64 [B],56
   9161 :StoreRegOnStackSub64 [B],56
   9162 :StoreRegToReg64 [A],[D]
   9163 :GetFromStackSub64 [B],48
   9164 :Push64 [B]
   9165 :GetFromStackSub64 [B],48
   9166 :Push64 [B]
   9167 :Call {ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,ULang:Range_t<uintptr>}

   //File:/Types/String.uc
   //Line:111

   9171 :Pop64 [A]
   9172 :Pop64 [A]
   9173 :StoreFromPtrToReg64 [F],[A]
   9174 :StoreRegOnStackSub64 [A],16
   9175 :Read64 [F],[A],8
   9176 :StoreRegOnStackSub64 [A],8
   9177 :GetPointerOfStackSub [A],16
   9178 :StoreRegToReg64 [A],[F]
   9179 :Store64 [A], 32
   9183 :DecrementStackPointer [A]
   9184 :Debug_FuncEnd 
   9185 :Ret 
---ULang:String_t<uft8>:(&_de-init&): 
   9186 :Store64 [A], 24
   9190 :IncrementStackPointer [A]
   9191 :Debug_FuncStart 
   9192 :Debug_LineEnter 
   9193 :GetPointerOfStackSub [A],24
   9194 :StoreRegToReg64 [A],[D]
   9195 :Call {ULang:Vector<uft8>:(&_drop&)^ULang:Vector<uft8>&}
   9199 :Store64 [A], 24
   9203 :DecrementStackPointer [A]

   //StackFrameSize:16

   9204 :Debug_FuncEnd 
   9205 :Ret 
---ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&: 
   9206 :Debug_FuncStart 

   //File:/Types/String.uc
   //Line:0

   9207 :Debug_LineEnter 
   9208 :Store64 [A], 0
   9212 :StoreRegToPtr64 [A],[D]
   9213 :Debug_LineEnter 
   9214 :Store64 [B], 0
   9218 :Load64 [D],[B],8
   9219 :Debug_FuncEnd 
   9220 :Ret 
---ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr: 
   9221 :Debug_FuncStart 
   9222 :Debug_LineEnter 
   9223 :StoreRegToReg64 [E],[A]

   //StackFrameSize:16

   9224 :StoreRegToPtr64 [A],[D]
   9225 :Debug_LineEnter 
   9226 :StoreRegToReg64 [F],[B]

   //File:/Types/String.uc
   //Line:0

   9227 :Load64 [D],[B],8
   9228 :Debug_FuncEnd 
   9229 :Ret 
---ULang:Span<uft16>:Size^ULang:Span<uft16>&imut: 
   9230 :Debug_FuncStart 
   9231 :Debug_LineEnter 
   9232 :Read64 [D],[A],8
   9233 :StoreRegToReg64 [A],[F]
   9234 :Debug_FuncEnd 
   9235 :Ret 
---ULang:Span<uft16>:Data^ULang:Span<uft16>&: 
   9236 :Debug_FuncStart 
   9237 :Debug_LineEnter 
   9238 :StoreFromPtrToReg64 [D],[A]
   9239 :StoreRegToReg64 [A],[F]
   9240 :Debug_FuncEnd 
   9241 :Ret 
---ULang:Span<uft16>:iData^ULang:Span<uft16>&imut: 
   9242 :Debug_FuncStart 
   9243 :Debug_LineEnter 

   //StackFrameSize:16

   9244 :StoreFromPtrToReg64 [D],[A]
   9245 :StoreRegToReg64 [A],[F]
   9246 :Debug_FuncEnd 

   //File:/Types/String.uc
   //Line:0

   9247 :Ret 
---ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,uptr: 
   9248 :Store64 [A], 8
   9252 :IncrementStackPointer [A]
   9253 :Debug_FuncStart 
   9254 :Debug_LineEnter 
   9255 :StoreFromPtrToReg64 [D],[A]
   9256 :StoreRegToReg64 [E],[B]
   9257 :Store64 [C], 2
   9261 :MultU64 [B],[C],[F]
   9262 :StoreRegOnStackSub64 [F],8
   9263 :GetFromStackSub64 [F],8

   //StackFrameSize:16

   9264 :Add64 [A],[F],[F]
   9265 :Store64 [A], 8
   9269 :DecrementStackPointer [A]
   9270 :Debug_FuncEnd 
   9271 :Ret 
---ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&imut,uptr: 
   9272 :Store64 [A], 8
   9276 :IncrementStackPointer [A]
   9277 :Debug_FuncStart 
   9278 :Debug_LineEnter 
   9279 :StoreFromPtrToReg64 [D],[A]
   9280 :StoreRegToReg64 [E],[B]
   9281 :Store64 [C], 2
   9285 :MultU64 [B],[C],[F]
   9286 :StoreRegOnStackSub64 [F],8

   //File:/Types/String.uc
   //Line:111
   //Line:119

   9287 :GetFromStackSub64 [F],8
   9288 :Add64 [A],[F],[F]
   9289 :Store64 [A], 8
   9293 :DecrementStackPointer [A]
   9294 :Debug_FuncEnd 
   9295 :Ret 
---ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>: 
   9296 :Store64 [A], 32
   9300 :IncrementStackPointer [A]
   9301 :Debug_FuncStart 
   9302 :Debug_LineEnter 
   9303 :GetPointerOfStackSub [A],32
   9304 :Debug_LineEnter 
   9305 :StoreFromPtrToReg64 [D],[B]
   9306 :GetPointerOfStackSub [C],56
   9307 :StoreRegToReg64 [C],[D]
   9308 :Push64 [A]
   9309 :Push64 [B]
   9310 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   9314 :Pop64 [B]
   9315 :Pop64 [A]
   9316 :Store64 [C], 2
   9320 :StoreRegToReg64 [F],[D]
   9321 :MultU64 [D],[C],[F]
   9322 :StoreRegToReg64 [F],[E]
   9323 :Add64 [B],[E],[F]
   9324 :GetPointerOfStackSub [B],56
   9325 :StoreRegToReg64 [B],[D]
   9326 :StoreRegOnStackSub64 [F],16
   9327 :Push64 [A]
   9328 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}

   //File:/Types/String.uc
   //Line:119
   //Line:120

   9332 :Pop64 [A]
   9333 :GetPointerOfStackSub [B],56
   9334 :StoreRegToReg64 [B],[D]
   9335 :StoreRegToReg64 [F],[C]
   9336 :Push64 [A]
   9337 :Push64 [C]
   9338 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   9342 :Pop64 [C]
   9343 :Pop64 [A]
   9344 :StoreRegToReg64 [F],[B]
   9345 :Sub64 [C],[B],[F]
   9346 :StoreRegToReg64 [A],[D]
   9347 :GetFromStackSub64 [E],16
   9348 :StoreRegOnStackSub64 [F],8
   9349 :GetFromStackSub64 [F],8
   9350 :Call {ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr}
   9354 :GetPointerOfStackSub [A],32
   9355 :StoreRegToReg64 [A],[F]
   9356 :Store64 [A], 32
   9360 :DecrementStackPointer [A]
   9361 :Debug_FuncEnd 
   9362 :Ret 
---ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&imut,ULang:Range_t<uintptr>: 
   9363 :Store64 [A], 32
   9367 :IncrementStackPointer [A]
   9368 :Debug_FuncStart 
   9369 :Debug_LineEnter 
   9370 :GetPointerOfStackSub [A],32
   9371 :Debug_LineEnter 
   9372 :StoreFromPtrToReg64 [D],[B]
   9373 :GetPointerOfStackSub [C],56

   //StackFrameSize:24

   9374 :StoreRegToReg64 [C],[D]
   9375 :Push64 [A]
   9376 :Push64 [B]

   //File:/Types/String.uc
   //Line:0

   9377 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   9381 :Pop64 [B]
   9382 :Pop64 [A]
   9383 :Store64 [C], 2
   9387 :StoreRegToReg64 [F],[D]
   9388 :MultU64 [D],[C],[F]
   9389 :StoreRegToReg64 [F],[E]
   9390 :Add64 [B],[E],[F]
   9391 :GetPointerOfStackSub [B],56
   9392 :StoreRegToReg64 [B],[D]
   9393 :StoreRegOnStackSub64 [F],16
   9394 :Push64 [A]

   //File:/Types/Span.uc
   //Line:7

   9395 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   9399 :Pop64 [A]
   9400 :GetPointerOfStackSub [B],56

   //Line:8

   9401 :StoreRegToReg64 [B],[D]
   9402 :StoreRegToReg64 [F],[C]
   9403 :Push64 [A]
   9404 :Push64 [C]
   9405 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}

   //[A] = ULang:Span<uft16>:(&_new&):(&this&)

   9409 :Pop64 [C]

   //File:/Types/Span.uc
   //Line:11

   9410 :Pop64 [A]
   9411 :StoreRegToReg64 [F],[B]
   9412 :Sub64 [C],[B],[F]

   //Line:12

   9413 :StoreRegToReg64 [A],[D]
   9414 :GetFromStackSub64 [E],16
   9415 :StoreRegOnStackSub64 [F],8
   9416 :GetFromStackSub64 [F],8
   9417 :Call {ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr}
   9421 :GetPointerOfStackSub [A],32
   9422 :StoreRegToReg64 [A],[F]
   9423 :Store64 [A], 32
   9427 :DecrementStackPointer [A]
   9428 :Debug_FuncEnd 
   9429 :Ret 
---ULang:Vector<uft16>:(&_new&)^ULang:Vector<uft16>&: 
   9430 :Debug_FuncStart 

   //File:/Types/Span.uc
   //Line:15

   9431 :Debug_LineEnter 
   9432 :Store64 [A], 0
   9436 :StoreRegToPtr64 [A],[D]

   //File:/Types/Span.uc
   //Line:18

   9437 :Debug_LineEnter 
   9438 :Store64 [B], 0
   9442 :Load64 [D],[B],8
   9443 :Debug_LineEnter 
   9444 :Store64 [C], 0
   9448 :Load64 [D],[C],16
   9449 :Debug_FuncEnd 
   9450 :Ret 
---ULang:Vector<uft16>:(&_drop&)^ULang:Vector<uft16>&: 
   9451 :Store64 [A], 1
   9455 :IncrementStackPointer [A]

   //StackFrameSize:8

   9456 :Debug_FuncStart 
   9457 :Debug_LineEnter 
   9458 :StoreFromPtrToReg64 [D],[A]

   //File:/Types/Span.uc
   //Line:19

   9459 :StoreRegToReg64 [A],[C]
   9460 :StoreRegToReg64 [C],[B]
   9461 :Debug_LineEnter 
   9462 :StoreRegToReg64 [B],[C]
   9463 :Store64 [E], 0
   9467 :notequalto8 [B],[E],[F]
   9468 :LNot8 [F],[B]
   9469 :Jumpif [B],{9477}
   9473 :StoreRegOnStackSub8 [B],1
   9474 :Debug_LineEnter 
   9475 :StoreFromPtrToReg64 [D],[A]
   9476 :Free [A]
   9477 :Store64 [A], 1

   //File:/Types/Span.uc
   //Line:0

   9481 :DecrementStackPointer [A]
   9482 :Debug_FuncEnd 

   //Line:21

   9483 :Ret 
---ULang:Vector<uft16>:iData^ULang:Vector<uft16>&imut: 
   9484 :Debug_FuncStart 
   9485 :Debug_LineEnter 
   9486 :StoreFromPtrToReg64 [D],[A]
   9487 :StoreRegToReg64 [A],[F]
   9488 :Debug_FuncEnd 
   9489 :Ret 
---ULang:Vector<uft16>:Data^ULang:Vector<uft16>&: 
   9490 :Debug_FuncStart 
   9491 :Debug_LineEnter 
   9492 :StoreFromPtrToReg64 [D],[A]
   9493 :StoreRegToReg64 [A],[F]
   9494 :Debug_FuncEnd 
   9495 :Ret 
---ULang:Vector<uft16>:Size^ULang:Vector<uft16>&imut: 
   9496 :Debug_FuncStart 
   9497 :Debug_LineEnter 
   9498 :Read64 [D],[A],8
   9499 :StoreRegToReg64 [A],[F]
   9500 :Debug_FuncEnd 
   9501 :Ret 
---ULang:Vector<uft16>:Capacity^ULang:Vector<uft16>&imut: 
   9502 :Debug_FuncStart 
   9503 :Debug_LineEnter 
   9504 :Read64 [D],[A],16
   9505 :StoreRegToReg64 [A],[F]
   9506 :Debug_FuncEnd 
   9507 :Ret 
---ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr: 
   9508 :Debug_FuncStart 
   9509 :Debug_LineEnter 
   9510 :StoreRegToReg64 [D],[A]
   9511 :StoreRegToReg64 [E],[B]
   9512 :StoreRegToReg64 [D],[C]
   9513 :StoreRegToReg64 [A],[D]
   9514 :StoreRegToReg64 [E],[F]
   9515 :StoreRegToReg64 [B],[E]
   9516 :Push64 [C]
   9517 :Push64 [F]
   9518 :Call {ULang:Vector<uft16>:Reserve^ULang:Vector<uft16>&,uptr}
   9522 :Pop64 [F]
   9523 :Pop64 [C]
   9524 :Debug_LineEnter 
   9525 :StoreRegToReg64 [F],[A]
   9526 :Load64 [C],[A],8
   9527 :Debug_FuncEnd 
   9528 :Ret 
---ULang:Vector<uft16>:Reserve^ULang:Vector<uft16>&,uptr: 
   9529 :Store64 [A], 92
   9533 :IncrementStackPointer [A]
   9534 :Debug_FuncStart 
   9535 :Debug_LineEnter 
   9536 :StoreRegToReg64 [E],[A]
   9537 :Read64 [D],[B],16
   9538 :greaterthan8 [A],[B],[F]
   9539 :LNot8 [F],[C]
   9540 :Jumpif [C],{9698}
   9544 :StoreRegOnStackSub8 [C],92
   9545 :Debug_LineEnter 

   //File:/Types/Span.uc
   //Line:0

   9546 :Read64 [D],[A],8
   9547 :StoreRegToReg64 [A],[B]

   //Line:22

   9548 :StoreRegToReg64 [B],[C]
   9549 :Debug_LineEnter 
   9550 :StoreFromPtrToReg64 [D],[B]
   9551 :StoreRegOnStackSub64 [D],91
   9552 :StoreRegToReg64 [B],[D]
   9553 :StoreRegToReg64 [D],[A]
   9554 :Debug_LineEnter 
   9555 :StoreRegToReg64 [E],[D]
   9556 :GetFromStackSub64 [B],91
   9557 :Load64 [B],[D],16
   9558 :Debug_LineEnter 
   9559 :StoreRegToReg64 [E],[B]
   9560 :Store64 [D], 2
   9564 :MultU64 [B],[D],[F]
   9565 :Malloc [F],[E]
   9566 :StoreRegOnStackSub64 [A],83
   9567 :Store64 [A], 0
   9571 :StoreRegOnStackSub64 [A],75
   9572 :StoreRegOnStackSub64 [B],67
   9573 :StoreRegOnStackSub64 [C],59
   9574 :StoreRegOnStackSub64 [D],51
   9575 :StoreRegOnStackSub64 [E],43
   9576 :GetFromStackSub64 [A],75
   9577 :GetFromStackSub64 [B],67
   9578 :equalto64 [A],[B],[F]
   9579 :Jumpif [F],{9606}
   9583 :StoreRegOnStackSub8 [F],35
   9584 :StoreRegOnStackSub64 [A],34
   9585 :GetFromStackSub64 [A],75
   9586 :GetFromStackSub64 [B],51
   9587 :MultU64 [A],[B],[F]
   9588 :StoreRegToReg64 [F],[A]
   9589 :GetFromStackSub64 [F],43
   9590 :Add64 [F],[A],[F]
   9591 :Debug_LineEnter 
   9592 :Store16 [A],0
   9593 :StoreRegToPtr16 [A],[F]
   9594 :Store64 [A], 1
   9598 :GetFromStackSub64 [B],75
   9599 :Add64 [B],[A],[F]
   9600 :StoreRegToReg64 [F],[A]
   9601 :StoreRegOnStackSub64 [A],75
   9602 :Jump {9576}
   9606 :GetFromStackSub64 [A],91
   9607 :GetFromStackSub64 [B],43
   9608 :StoreRegToPtr64 [B],[A]
   9609 :Debug_LineEnter 
   9610 :Store32 [B], 0
   9612 :StoreRegToReg32 [B],[D]
   9613 :StoreRegToReg32 [D],[C]
   9614 :StoreRegOnStackSub64 [C],26
   9615 :GetFromStackSub64 [C],26
   9616 :StoreRegOnStackSub64 [C],26

   //Line:10

   9617 :GetFromStackSub64 [C],59
   9618 :StoreRegOnStackSub64 [C],59
   9619 :GetFromStackSub64 [C],26
   9620 :GetFromStackSub64 [D],59
   9621 :lessthan8 [C],[D],[F]
   9622 :LNot8 [F],[C]

   //Line:11

   9623 :Jumpif [C],{9673}
   9627 :StoreRegOnStackSub8 [C],18
   9628 :Debug_LineEnter 

   //StackFrameSize:1

   9629 :GetFromStackSub64 [A],83
   9630 :StoreRegOnStackSub64 [A],83

   //[A] = ULang:Vector<uft16>:(&_new&):(&this&)

   9631 :GetFromStackSub64 [A],26

   //File:/Types/Vector.uc
   //Line:13

   9632 :StoreRegOnStackSub64 [A],26
   9633 :Store64 [A], 2
   9637 :GetFromStackSub64 [C],26
   9638 :MultU64 [C],[A],[F]
   9639 :StoreRegToReg64 [F],[C]
   9640 :GetFromStackSub64 [D],83
   9641 :Add64 [D],[C],[F]
   9642 :StoreFromPtrToReg64 [F],[D]
   9643 :GetFromStackSub64 [E],91
   9644 :StoreFromPtrToReg64 [E],[E]
   9645 :StoreRegOnStackSub64 [E],17
   9646 :GetFromStackSub64 [A],26
   9647 :StoreRegOnStackSub64 [A],26
   9648 :Store64 [A], 2
   9652 :GetFromStackSub64 [B],26
   9653 :MultU64 [B],[A],[F]
   9654 :StoreRegOnStackSub64 [F],9
   9655 :GetFromStackSub64 [F],9
   9656 :Add64 [E],[F],[F]
   9657 :StoreRegToPtr16 [D],[F]
   9658 :Debug_LineEnter 

   //[C] = ULang:Vector<uft16>:(&_drop&):(&this&)

   9659 :GetFromStackSub64 [A],26
   9660 :StoreRegOnStackSub64 [A],26
   9661 :Store64 [A], 1
   9665 :GetFromStackSub64 [B],26
   9666 :Add64 [B],[A],[F]
   9667 :StoreRegToReg64 [F],[A]
   9668 :StoreRegOnStackSub64 [A],26

   //File:/Types/Vector.uc
   //Line:18

   9669 :Jump {9615}
   9673 :Debug_LineEnter 
   9674 :GetFromStackSub64 [A],83

   //File:/Types/Vector.uc
   //Line:20

   9675 :StoreRegOnStackSub64 [A],83
   9676 :GetFromStackSub64 [D],83
   9677 :StoreRegToReg64 [D],[A]
   9678 :Debug_LineEnter 
   9679 :StoreRegToReg64 [A],[D]
   9680 :Store64 [E], 0
   9684 :equalto64 [A],[E],[F]
   9685 :LNot8 [F],[A]
   9686 :StoreRegOnStackSub8 [A],1

   //File:/Types/Vector.uc
   //Line:24

   9687 :GetFromStackSub8 [A],1
   9688 :StoreRegToReg8 [A],[B]
   9689 :Jumpif [B],{9698}
   9693 :Debug_LineEnter 
   9694 :GetFromStackSub64 [A],83
   9695 :StoreRegOnStackSub64 [A],83
   9696 :GetFromStackSub64 [A],83
   9697 :Free [A]
   9698 :Store64 [A], 92

   //Line:25

   9702 :DecrementStackPointer [A]
   9703 :Debug_FuncEnd 
   9704 :Ret 
---ULang:Vector<uft16>:Clear^ULang:Vector<uft16>&: 

   //StackFrameSize:92

   9705 :Debug_FuncStart 
   9706 :Debug_LineEnter 
   9707 :Store64 [A], 0
   9711 :Load64 [D],[A],8
   9712 :Debug_FuncEnd 
   9713 :Ret 
---ULang:Vector<uft16>:Pop^ULang:Vector<uft16>&: 
   9714 :Debug_FuncStart 
   9715 :Debug_FuncEnd 
   9716 :Ret 
---ULang:Vector<uft16>:Remove^ULang:Vector<uft16>&,uptr: 
   9717 :Debug_FuncStart 

   //Line:29

   9718 :Debug_FuncEnd 
   9719 :Ret 
---ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,&imut: 
   9720 :Store64 [A], 8
   9724 :IncrementStackPointer [A]
   9725 :Debug_FuncStart 
   9726 :Debug_LineEnter 

   //Line:33

   9727 :StoreRegToReg64 [D],[A]
   9728 :Read64 [D],[B],8
   9729 :Store64 [C], 1
   9733 :Add64 [B],[C],[F]
   9734 :StoreRegOnStackSub64 [D],8
   9735 :StoreRegToReg64 [A],[D]
   9736 :StoreRegToReg64 [F],[E]
   9737 :Call {ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr}
   9741 :Debug_LineEnter 
   9742 :StoreFromPtrToReg64 [E],[A]
   9743 :GetFromStackSub64 [B],8
   9744 :StoreRegOnStackSub64 [B],8
   9745 :GetFromStackSub64 [B],8
   9746 :StoreRegOnStackSub64 [B],8
   9747 :GetFromStackSub64 [B],8
   9748 :Read64 [B],[B],8
   9749 :StoreRegToReg64 [B],[C]
   9750 :Store64 [D], 1
   9754 :Sub64 [B],[D],[F]
   9755 :GetFromStackSub64 [D],8
   9756 :StoreRegToReg64 [F],[E]
   9757 :Push16 [A]
   9758 :Call {ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr}
   9762 :Pop16 [A]
   9763 :StoreRegToPtr16 [A],[F]

   //Line:0

   9764 :Store64 [B], 8
   9768 :DecrementStackPointer [B]
   9769 :Debug_FuncEnd 
   9770 :Ret 
---ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,mov: 
   9771 :Store64 [A], 10
   9775 :IncrementStackPointer [A]
   9776 :Debug_FuncStart 
   9777 :Debug_LineEnter 
   9778 :StoreRegToReg64 [D],[A]
   9779 :Read64 [D],[B],8
   9780 :Store64 [C], 1
   9784 :Add64 [B],[C],[F]
   9785 :StoreRegOnStackSub64 [D],10
   9786 :StoreRegToReg64 [A],[D]
   9787 :StoreRegOnStackSub16 [E],2
   9788 :StoreRegToReg64 [F],[E]
   9789 :Call {ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr}
   9793 :Debug_LineEnter 
   9794 :GetFromStackSub16 [A],2
   9795 :StoreRegOnStackSub32 [A],2
   9796 :GetFromStackSub64 [A],10
   9797 :StoreRegOnStackSub64 [A],10
   9798 :GetFromStackSub64 [A],10
   9799 :StoreRegOnStackSub64 [A],10
   9800 :GetFromStackSub64 [A],10

   //Line:36

   9801 :Read64 [A],[A],8
   9802 :StoreRegToReg64 [A],[B]
   9803 :Store64 [C], 1
   9807 :Sub64 [A],[C],[F]
   9808 :GetFromStackSub64 [D],10
   9809 :StoreRegToReg64 [F],[E]
   9810 :Call {ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr}
   9814 :GetFromStackSub16 [A],2
   9815 :StoreRegToPtr16 [A],[F]
   9816 :Store64 [A], 10
   9820 :DecrementStackPointer [A]
   9821 :Debug_FuncEnd 
   9822 :Ret 
---ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,&imut: 
   9823 :Debug_FuncStart 
   9824 :Debug_FuncEnd 
   9825 :Ret 
---ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,mov: 
   9826 :Debug_FuncStart 
   9827 :Debug_FuncEnd 
   9828 :Ret 
---ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>imut: 
   9829 :Debug_FuncStart 
   9830 :Debug_FuncEnd 

   //Line:35

   9831 :Ret 
---ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>mov: 
   9832 :Debug_FuncStart 
   9833 :Debug_FuncEnd 
   9834 :Ret 
---ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr: 
   9835 :Store64 [A], 8
   9839 :IncrementStackPointer [A]
   9840 :Debug_FuncStart 
   9841 :Debug_LineEnter 
   9842 :StoreFromPtrToReg64 [D],[A]
   9843 :StoreRegToReg64 [E],[B]
   9844 :Store64 [C], 2
   9848 :MultU64 [B],[C],[F]
   9849 :StoreRegOnStackSub64 [F],8
   9850 :GetFromStackSub64 [F],8

   //Line:39

   9851 :Add64 [A],[F],[F]
   9852 :Store64 [A], 8
   9856 :DecrementStackPointer [A]
   9857 :Debug_FuncEnd 
   9858 :Ret 
---ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&imut,uptr: 
   9859 :Store64 [A], 8
   9863 :IncrementStackPointer [A]
   9864 :Debug_FuncStart 
   9865 :Debug_LineEnter 

   //Line:40

   9866 :StoreFromPtrToReg64 [D],[A]
   9867 :StoreRegToReg64 [E],[B]
   9868 :Store64 [C], 2
   9872 :MultU64 [B],[C],[F]
   9873 :StoreRegOnStackSub64 [F],8
   9874 :GetFromStackSub64 [F],8
   9875 :Add64 [A],[F],[F]
   9876 :Store64 [A], 8
   9880 :DecrementStackPointer [A]
   9881 :Debug_FuncEnd 

   //File:/Types/Vector.uc
   //Line:42

   9882 :Ret 
---ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,ULang:Range_t<uintptr>: 
   9883 :Store64 [A], 32
   9887 :IncrementStackPointer [A]
   9888 :Debug_FuncStart 
   9889 :Debug_LineEnter 

   //[A] = ULang:Vector<uft16>:Clear:(&this&)

   9890 :Debug_LineEnter 
   9891 :StoreRegToReg64 [D],[A]
   9892 :StoreRegToReg64 [A],[D]
   9893 :Call {ULang:Vector<uft16>:AsSpan^ULang:Vector<uft16>&}

   //File:/Types/Vector.uc
   //Line:48

   9897 :StoreFromPtrToReg64 [F],[A]
   9898 :StoreRegOnStackSub64 [A],32
   9899 :Read64 [F],[A],8
   9900 :StoreRegOnStackSub64 [A],24
   9901 :GetPointerOfStackSub [A],32
   9902 :GetFromStackSub64 [B],48
   9903 :StoreRegOnStackSub64 [B],48
   9904 :GetFromStackSub64 [B],56
   9905 :StoreRegOnStackSub64 [B],56
   9906 :StoreRegToReg64 [A],[D]
   9907 :GetFromStackSub64 [B],48
   9908 :Push64 [B]
   9909 :GetFromStackSub64 [B],48
   9910 :Push64 [B]
   9911 :Call {ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>}
   9915 :Pop64 [A]
   9916 :Pop64 [A]
   9917 :StoreFromPtrToReg64 [F],[A]
   9918 :StoreRegOnStackSub64 [A],16
   9919 :Read64 [F],[A],8
   9920 :StoreRegOnStackSub64 [A],8
   9921 :GetPointerOfStackSub [A],16
   9922 :StoreRegToReg64 [A],[F]
   9923 :Store64 [A], 32
   9927 :DecrementStackPointer [A]
   9928 :Debug_FuncEnd 
   9929 :Ret 
---ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&imut,ULang:Range_t<uintptr>: 
   9930 :Store64 [A], 32
   9934 :IncrementStackPointer [A]
   9935 :Debug_FuncStart 
   9936 :Debug_LineEnter 
   9937 :Debug_LineEnter 
   9938 :StoreRegToReg64 [D],[A]
   9939 :StoreRegToReg64 [A],[D]
   9940 :Call {ULang:Vector<uft16>:AsSpan^ULang:Vector<uft16>&}
   9944 :StoreFromPtrToReg64 [F],[A]
   9945 :StoreRegOnStackSub64 [A],32

   //File:/Types/Vector.uc
   //Line:53

   9946 :Read64 [F],[A],8
   9947 :StoreRegOnStackSub64 [A],24
   9948 :GetPointerOfStackSub [A],32
   9949 :GetFromStackSub64 [B],48
   9950 :StoreRegOnStackSub64 [B],48
   9951 :GetFromStackSub64 [B],56
   9952 :StoreRegOnStackSub64 [B],56
   9953 :StoreRegToReg64 [A],[D]
   9954 :GetFromStackSub64 [B],48
   9955 :Push64 [B]
   9956 :GetFromStackSub64 [B],48
   9957 :Push64 [B]
   9958 :Call {ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>}

   //Line:54

   9962 :Pop64 [A]
   9963 :Pop64 [A]
   9964 :StoreFromPtrToReg64 [F],[A]
   9965 :StoreRegOnStackSub64 [A],16
   9966 :Read64 [F],[A],8
   9967 :StoreRegOnStackSub64 [A],8
   9968 :GetPointerOfStackSub [A],16
   9969 :StoreRegToReg64 [A],[F]
   9970 :Store64 [A], 32
   9974 :DecrementStackPointer [A]
   9975 :Debug_FuncEnd 
   9976 :Ret 
---ULang:Vector<uft16>:AsSpan^ULang:Vector<uft16>&: 
   9977 :Store64 [A], 16
   9981 :IncrementStackPointer [A]
   9982 :Debug_FuncStart 
   9983 :Debug_LineEnter 
   9984 :GetPointerOfStackSub [A],16
   9985 :Debug_LineEnter 
   9986 :StoreFromPtrToReg64 [D],[B]
   9987 :Read64 [D],[C],8
   9988 :StoreRegToReg64 [A],[D]
   9989 :StoreRegToReg64 [B],[E]
   9990 :StoreRegToReg64 [C],[F]
   9991 :Call {ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr}
   9995 :GetPointerOfStackSub [A],16
   9996 :StoreRegToReg64 [A],[F]
   9997 :Store64 [A], 16
   10001 :DecrementStackPointer [A]
   10002 :Debug_FuncEnd 
   10003 :Ret 
---ULang:Vector<uft16>:iAsSpan^ULang:Vector<uft16>&imut: 
   10004 :Store64 [A], 16

   //File:/Types/Vector.uc
   //Line:64

   10008 :IncrementStackPointer [A]
   10009 :Debug_FuncStart 
   10010 :Debug_LineEnter 
   10011 :GetPointerOfStackSub [A],16
   10012 :Debug_LineEnter 
   10013 :StoreFromPtrToReg64 [D],[B]
   10014 :Read64 [D],[C],8
   10015 :StoreRegToReg64 [A],[D]
   10016 :StoreRegToReg64 [B],[E]
   10017 :StoreRegToReg64 [C],[F]
   10018 :Call {ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr}
   10022 :GetPointerOfStackSub [A],16
   10023 :StoreRegToReg64 [A],[F]
   10024 :Store64 [A], 16
   10028 :DecrementStackPointer [A]
   10029 :Debug_FuncEnd 

   //File:/Types/Vector.uc
   //Line:65

   10030 :Ret 
---ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&: 
   10031 :Debug_FuncStart 
   10032 :Debug_LineEnter 
   10033 :Store64 [A], 0
   10037 :StoreRegToPtr64 [A],[D]
   10038 :Debug_LineEnter 
   10039 :Store64 [B], 0
   10043 :Load64 [D],[B],8
   10044 :Debug_FuncEnd 
   10045 :Ret 
---ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&,[&],uptr: 
   10046 :Debug_FuncStart 
   10047 :Debug_LineEnter 
   10048 :StoreRegToReg64 [E],[A]

   //StackFrameSize:32

   10049 :StoreRegToPtr64 [A],[D]
   10050 :Debug_LineEnter 
   10051 :StoreRegToReg64 [F],[B]

   //File:/Types/Vector.uc
   //Line:65
   //Line:70

   10052 :Load64 [D],[B],8
   10053 :Debug_FuncEnd 
   10054 :Ret 
---ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut: 
   10055 :Debug_FuncStart 
   10056 :Debug_LineEnter 
   10057 :Read64 [D],[A],8
   10058 :StoreRegToReg64 [A],[F]
   10059 :Debug_FuncEnd 
   10060 :Ret 
---ULang:StringSpan_t<uft16>:iData^ULang:StringSpan_t<uft16>&imut: 
   10061 :Debug_FuncStart 
   10062 :Debug_LineEnter 
   10063 :StoreFromPtrToReg64 [D],[A]
   10064 :StoreRegToReg64 [A],[F]
   10065 :Debug_FuncEnd 
   10066 :Ret 
---ULang:StringSpan_t<uft16>:Data^ULang:StringSpan_t<uft16>&: 
   10067 :Debug_FuncStart 
   10068 :Debug_LineEnter 
   10069 :StoreFromPtrToReg64 [D],[A]
   10070 :StoreRegToReg64 [A],[F]
   10071 :Debug_FuncEnd 
   10072 :Ret 
---ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut: 
   10073 :Store64 [A], 19
   10077 :IncrementStackPointer [A]
   10078 :Debug_FuncStart 
   10079 :Debug_LineEnter 
   10080 :StoreRegToReg64 [D],[A]
   10081 :StoreRegToReg64 [A],[B]
   10082 :StoreRegToReg64 [D],[C]
   10083 :StoreRegToReg64 [A],[D]
   10084 :Push64 [C]
   10085 :Push64 [E]
   10086 :Call {ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut}
   10090 :Pop64 [E]
   10091 :Pop64 [C]
   10092 :StoreRegToReg64 [E],[A]
   10093 :StoreRegToReg64 [A],[D]

   //StackFrameSize:32

   10094 :StoreRegToReg64 [F],[B]
   10095 :Push64 [B]
   10096 :Push64 [C]

   //File:/Types/Vector.uc
   //Line:70
   //Line:71

   10097 :Push64 [E]
   10098 :Call {ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut}
   10102 :Pop64 [E]
   10103 :Pop64 [C]
   10104 :Pop64 [B]
   10105 :StoreRegToReg64 [F],[A]
   10106 :notequalto8 [B],[A],[F]
   10107 :LNot8 [F],[B]
   10108 :Jumpif [B],{10119}
   10112 :StoreRegOnStackSub8 [B],19
   10113 :Store8 [A],0
   10114 :StoreRegToReg8 [A],[F]
   10115 :Jump {10205}
   10119 :Debug_LineEnter 
   10120 :Store32 [A], 0
   10122 :StoreRegToReg32 [A],[B]
   10123 :StoreRegToReg32 [B],[D]
   10124 :StoreRegOnStackSub64 [D],18
   10125 :GetFromStackSub64 [B],18
   10126 :StoreRegOnStackSub64 [B],18
   10127 :StoreRegToReg64 [C],[B]
   10128 :StoreRegToReg64 [B],[D]
   10129 :StoreRegToReg64 [B],[D]
   10130 :Push64 [C]
   10131 :Push64 [E]
   10132 :Call {ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut}
   10136 :Pop64 [E]
   10137 :Pop64 [C]
   10138 :StoreRegToReg64 [F],[A]

   //StackFrameSize:16

   10139 :GetFromStackSub64 [B],18
   10140 :lessthan8 [B],[A],[F]
   10141 :LNot8 [F],[B]

   //File:/Types/Vector.uc
   //Line:0

   10142 :Jumpif [B],{10202}
   10146 :StoreRegOnStackSub8 [B],10
   10147 :StoreRegToReg64 [C],[A]
   10148 :Debug_LineEnter 
   10149 :StoreRegToReg64 [A],[B]
   10150 :GetFromStackSub64 [D],18
   10151 :StoreRegOnStackSub64 [D],18
   10152 :StoreRegToReg64 [A],[D]
   10153 :StoreRegOnStackSub64 [E],9
   10154 :GetFromStackSub64 [E],18
   10155 :Call {ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr}
   10159 :StoreFromPtrToReg64 [F],[A]
   10160 :GetFromStackSub64 [B],9
   10161 :StoreRegOnStackSub64 [B],9
   10162 :GetFromStackSub64 [B],18
   10163 :StoreRegOnStackSub64 [B],18

   //StackFrameSize:16

   10164 :GetFromStackSub64 [D],9
   10165 :GetFromStackSub64 [E],18
   10166 :Push16 [A]

   //File:/Types/Vector.uc
   //Line:0

   10167 :Call {ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr}
   10171 :Pop16 [A]
   10172 :StoreFromPtrToReg64 [F],[B]
   10173 :notequalto8 [A],[B],[F]
   10174 :LNot8 [F],[A]
   10175 :StoreRegToReg8 [A],[C]
   10176 :Jumpif [C],{10187}
   10180 :StoreRegOnStackSub8 [C],1
   10181 :Store8 [A],0
   10182 :StoreRegToReg8 [A],[F]
   10183 :Jump {10205}
   10187 :Debug_LineEnter 
   10188 :GetFromStackSub64 [A],18
   10189 :StoreRegOnStackSub64 [A],18
   10190 :Store64 [A], 1
   10194 :GetFromStackSub64 [D],18
   10195 :Add64 [D],[A],[F]
   10196 :StoreRegToReg64 [F],[D]
   10197 :StoreRegOnStackSub64 [D],18

   //Line:13

   10198 :Jump {10125}
   10202 :Debug_LineEnter 
   10203 :Store8 [A],1
   10204 :StoreRegToReg8 [A],[F]
   10205 :Store64 [B], 19
   10209 :DecrementStackPointer [B]

   //Line:17

   10210 :Debug_FuncEnd 
   10211 :Ret 
---ULang:StringSpan_t<uft16>:(&notequal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut: 
   10212 :Debug_FuncStart 
   10213 :Debug_LineEnter 
   10214 :StoreRegToReg64 [D],[A]

   //[A] = ULang:StringSpan_t<uft16>:(&_new&):(&this&)

   10215 :StoreRegToReg64 [A],[B]

   //File:/Types/String.uc
   //Line:19

   10216 :StoreRegToReg64 [E],[C]
   10217 :StoreRegToReg64 [A],[D]
   10218 :StoreRegToReg64 [C],[E]
   10219 :Call {ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut}
   10223 :LNot8 [F],[A]
   10224 :StoreRegToReg8 [A],[F]
   10225 :Debug_FuncEnd 
   10226 :Ret 
---ULang:StringSpan_t<uft16>:AsSpan^ULang:StringSpan_t<uft16>&: 
   10227 :Store64 [A], 16

   //StackFrameSize:19

   10231 :IncrementStackPointer [A]
   10232 :Debug_FuncStart 
   10233 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:24

   10234 :GetPointerOfStackSub [A],16
   10235 :Debug_LineEnter 
   10236 :StoreFromPtrToReg64 [D],[B]
   10237 :Read64 [D],[C],8
   10238 :StoreRegToReg64 [A],[D]
   10239 :StoreRegToReg64 [B],[E]
   10240 :StoreRegToReg64 [C],[F]
   10241 :Call {ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr}
   10245 :GetPointerOfStackSub [A],16
   10246 :StoreRegToReg64 [A],[F]
   10247 :Store64 [A], 16
   10251 :DecrementStackPointer [A]
   10252 :Debug_FuncEnd 
   10253 :Ret 
---ULang:StringSpan_t<uft16>:iAsSpan^ULang:StringSpan_t<uft16>&imut: 
   10254 :Store64 [A], 16
   10258 :IncrementStackPointer [A]
   10259 :Debug_FuncStart 
   10260 :Debug_LineEnter 
   10261 :GetPointerOfStackSub [A],16
   10262 :Debug_LineEnter 
   10263 :StoreFromPtrToReg64 [D],[B]
   10264 :Read64 [D],[C],8
   10265 :StoreRegToReg64 [A],[D]
   10266 :StoreRegToReg64 [B],[E]
   10267 :StoreRegToReg64 [C],[F]
   10268 :Call {ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr}
   10272 :GetPointerOfStackSub [A],16
   10273 :StoreRegToReg64 [A],[F]

   //Line:26

   10274 :Store64 [A], 16
   10278 :DecrementStackPointer [A]
   10279 :Debug_FuncEnd 
   10280 :Ret 
---ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&: 
   10281 :Store64 [A], 16
   10285 :IncrementStackPointer [A]
   10286 :Debug_FuncStart 
   10287 :Debug_LineEnter 
   10288 :GetPointerOfStackSub [A],16
   10289 :Debug_LineEnter 
   10290 :StoreRegToReg64 [D],[B]
   10291 :StoreRegToReg64 [D],[C]
   10292 :StoreRegToReg64 [B],[D]
   10293 :Push64 [A]
   10294 :Push64 [C]
   10295 :Call {ULang:Span<uft16>:Data^ULang:Span<uft16>&}
   10299 :Pop64 [C]
   10300 :Pop64 [A]
   10301 :StoreRegToReg64 [C],[B]
   10302 :StoreRegToReg64 [B],[D]

   //Line:28

   10303 :StoreRegToReg64 [F],[E]
   10304 :Push64 [A]
   10305 :Push64 [E]
   10306 :Call {ULang:Span<uft16>:Size^ULang:Span<uft16>&imut}
   10310 :Pop64 [E]
   10311 :Pop64 [A]
   10312 :StoreRegToReg64 [A],[D]
   10313 :StoreRegToReg64 [E],[B]
   10314 :StoreRegToReg64 [B],[E]
   10315 :StoreRegToReg64 [F],[C]
   10316 :StoreRegToReg64 [C],[F]
   10317 :Call {ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&,[&],uptr}
   10321 :GetPointerOfStackSub [A],16
   10322 :StoreRegToReg64 [A],[F]
   10323 :Store64 [A], 16
   10327 :DecrementStackPointer [A]
   10328 :Debug_FuncEnd 
   10329 :Ret 
---ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&imut: 
   10330 :Store64 [A], 16
   10334 :IncrementStackPointer [A]
   10335 :Debug_FuncStart 
   10336 :Debug_LineEnter 
   10337 :GetPointerOfStackSub [A],16
   10338 :Debug_LineEnter 
   10339 :StoreRegToReg64 [D],[B]
   10340 :StoreRegToReg64 [D],[C]
   10341 :StoreRegToReg64 [B],[D]

   //Line:26

   10342 :Push64 [A]
   10343 :Push64 [C]
   10344 :Call {ULang:Span<uft16>:Data^ULang:Span<uft16>&}
   10348 :Pop64 [C]
   10349 :Pop64 [A]
   10350 :StoreRegToReg64 [C],[B]
   10351 :StoreRegToReg64 [B],[D]
   10352 :StoreRegToReg64 [F],[E]
   10353 :Push64 [A]
   10354 :Push64 [E]
   10355 :Call {ULang:Span<uft16>:Size^ULang:Span<uft16>&imut}
   10359 :Pop64 [E]
   10360 :Pop64 [A]
   10361 :StoreRegToReg64 [A],[D]
   10362 :StoreRegToReg64 [E],[B]
   10363 :StoreRegToReg64 [B],[E]
   10364 :StoreRegToReg64 [F],[C]
   10365 :StoreRegToReg64 [C],[F]
   10366 :Call {ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&,[&],uptr}
   10370 :GetPointerOfStackSub [A],16

   //File:/Types/String.uc
   //Line:32

   10371 :StoreRegToReg64 [A],[F]
   10372 :Store64 [A], 16
   10376 :DecrementStackPointer [A]
   10377 :Debug_FuncEnd 
   10378 :Ret 
---ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr: 
   10379 :Store64 [A], 8

   //StackFrameSize:16

   10383 :IncrementStackPointer [A]
   10384 :Debug_FuncStart 
   10385 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:0

   10386 :StoreFromPtrToReg64 [D],[A]
   10387 :StoreRegToReg64 [E],[B]

   //Line:34

   10388 :Store64 [C], 2
   10392 :MultU64 [B],[C],[F]
   10393 :StoreRegOnStackSub64 [F],8
   10394 :GetFromStackSub64 [F],8
   10395 :Add64 [A],[F],[F]
   10396 :Store64 [A], 8
   10400 :DecrementStackPointer [A]
   10401 :Debug_FuncEnd 
   10402 :Ret 
---ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&imut,uptr: 
   10403 :Store64 [A], 8
   10407 :IncrementStackPointer [A]

   //StackFrameSize:16

   10408 :Debug_FuncStart 
   10409 :Debug_LineEnter 
   10410 :StoreFromPtrToReg64 [D],[A]

   //File:/Types/String.uc
   //Line:0

   10411 :StoreRegToReg64 [E],[B]
   10412 :Store64 [C], 2
   10416 :MultU64 [B],[C],[F]
   10417 :StoreRegOnStackSub64 [F],8
   10418 :GetFromStackSub64 [F],8
   10419 :Add64 [A],[F],[F]
   10420 :Store64 [A], 8
   10424 :DecrementStackPointer [A]
   10425 :Debug_FuncEnd 
   10426 :Ret 
---ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,ULang:Range_t<uintptr>: 
   10427 :Store64 [A], 48
   10431 :IncrementStackPointer [A]
   10432 :Debug_FuncStart 

   //StackFrameSize:16

   10433 :Debug_LineEnter 
   10434 :Debug_LineEnter 
   10435 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:0

   10436 :StoreRegToReg64 [D],[A]
   10437 :StoreRegToReg64 [A],[D]

   //Line:38

   10438 :Call {ULang:StringSpan_t<uft16>:AsSpan^ULang:StringSpan_t<uft16>&}
   10442 :StoreFromPtrToReg64 [F],[A]
   10443 :StoreRegOnStackSub64 [A],48
   10444 :Read64 [F],[A],8
   10445 :StoreRegOnStackSub64 [A],40
   10446 :GetPointerOfStackSub [A],48
   10447 :GetFromStackSub64 [B],64
   10448 :StoreRegOnStackSub64 [B],64
   10449 :GetFromStackSub64 [B],72
   10450 :StoreRegOnStackSub64 [B],72
   10451 :StoreRegToReg64 [A],[D]
   10452 :GetFromStackSub64 [B],64
   10453 :Push64 [B]
   10454 :GetFromStackSub64 [B],64
   10455 :Push64 [B]
   10456 :Call {ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>}
   10460 :Pop64 [A]
   10461 :Pop64 [A]
   10462 :StoreFromPtrToReg64 [F],[A]
   10463 :StoreRegOnStackSub64 [A],32
   10464 :Read64 [F],[A],8
   10465 :StoreRegOnStackSub64 [A],24
   10466 :GetPointerOfStackSub [A],32
   10467 :StoreRegToReg64 [A],[D]
   10468 :Call {ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&}
   10472 :StoreFromPtrToReg64 [F],[A]
   10473 :StoreRegOnStackSub64 [A],16
   10474 :Read64 [F],[A],8
   10475 :StoreRegOnStackSub64 [A],8
   10476 :GetPointerOfStackSub [A],16
   10477 :StoreRegToReg64 [A],[F]
   10478 :Store64 [A], 48
   10482 :DecrementStackPointer [A]

   //File:/Types/String.uc
   //Line:0

   10483 :Debug_FuncEnd 
   10484 :Ret 
---ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&imut,ULang:Range_t<uintptr>: 

   //Line:39

   10485 :Store64 [A], 48
   10489 :IncrementStackPointer [A]
   10490 :Debug_FuncStart 
   10491 :Debug_LineEnter 
   10492 :Debug_LineEnter 
   10493 :Debug_LineEnter 
   10494 :StoreRegToReg64 [D],[A]
   10495 :StoreRegToReg64 [A],[D]
   10496 :Call {ULang:StringSpan_t<uft16>:AsSpan^ULang:StringSpan_t<uft16>&}
   10500 :StoreFromPtrToReg64 [F],[A]
   10501 :StoreRegOnStackSub64 [A],48
   10502 :Read64 [F],[A],8
   10503 :StoreRegOnStackSub64 [A],40
   10504 :GetPointerOfStackSub [A],48
   10505 :GetFromStackSub64 [B],64
   10506 :StoreRegOnStackSub64 [B],64
   10507 :GetFromStackSub64 [B],72
   10508 :StoreRegOnStackSub64 [B],72
   10509 :StoreRegToReg64 [A],[D]
   10510 :GetFromStackSub64 [B],64
   10511 :Push64 [B]
   10512 :GetFromStackSub64 [B],64
   10513 :Push64 [B]
   10514 :Call {ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>}
   10518 :Pop64 [A]
   10519 :Pop64 [A]
   10520 :StoreFromPtrToReg64 [F],[A]
   10521 :StoreRegOnStackSub64 [A],32
   10522 :Read64 [F],[A],8
   10523 :StoreRegOnStackSub64 [A],24
   10524 :GetPointerOfStackSub [A],32
   10525 :StoreRegToReg64 [A],[D]
   10526 :Call {ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&}

   //File:/Types/String.uc
   //Line:41

   10530 :StoreFromPtrToReg64 [F],[A]
   10531 :StoreRegOnStackSub64 [A],16
   10532 :Read64 [F],[A],8
   10533 :StoreRegOnStackSub64 [A],8
   10534 :GetPointerOfStackSub [A],16
   10535 :StoreRegToReg64 [A],[F]
   10536 :Store64 [A], 48
   10540 :DecrementStackPointer [A]
   10541 :Debug_FuncEnd 
   10542 :Ret 
---ULang:String_t<uft16>:(&_init&): 
   10543 :Debug_FuncStart 
   10544 :Debug_LineEnter 
   10545 :StoreRegToReg64 [D],[A]
   10546 :Debug_LineEnter 
   10547 :StoreRegToReg64 [A],[D]
   10548 :Call {ULang:Vector<uft16>:(&_new&)^ULang:Vector<uft16>&}

   //File:/Types/String.uc
   //Line:42

   10552 :Debug_FuncEnd 
   10553 :Ret 
---ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&: 
   10554 :Debug_FuncStart 
   10555 :StoreRegToReg64 [D],[A]
   10556 :StoreRegToReg64 [A],[D]
   10557 :Call {ULang:String_t<uft16>:(&_init&)}
   10561 :Debug_FuncEnd 
   10562 :Ret 
---ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut: 
   10563 :Store64 [A], 9
   10567 :IncrementStackPointer [A]
   10568 :Debug_FuncStart 
   10569 :StoreRegToReg64 [D],[A]
   10570 :StoreRegToReg64 [D],[B]

   //StackFrameSize:48

   10571 :StoreRegToReg64 [A],[D]
   10572 :Push64 [B]
   10573 :Push64 [E]

   //File:/Types/String.uc
   //Line:44
   //Line:42
   //Line:44

   10574 :Call {ULang:String_t<uft16>:(&_init&)}
   10578 :Pop64 [E]
   10579 :Pop64 [B]
   10580 :Debug_LineEnter 
   10581 :StoreRegToReg64 [B],[A]
   10582 :StoreRegToReg64 [E],[C]
   10583 :StoreRegToReg64 [C],[D]
   10584 :Push64 [A]
   10585 :Push64 [B]
   10586 :Push64 [E]
   10587 :Call {ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut}
   10591 :Pop64 [E]
   10592 :Pop64 [B]
   10593 :Pop64 [A]
   10594 :StoreRegToReg64 [A],[D]
   10595 :StoreRegToReg64 [E],[C]
   10596 :StoreRegToReg64 [F],[E]
   10597 :Push64 [B]
   10598 :Push64 [C]
   10599 :Call {ULang:String_t<uft16>:Resize^ULang:String_t<uft16>&,uptr}
   10603 :Pop64 [C]
   10604 :Pop64 [B]
   10605 :Debug_LineEnter 
   10606 :Store32 [A], 0
   10608 :StoreRegToReg32 [A],[E]
   10609 :StoreRegToReg32 [E],[D]
   10610 :StoreRegOnStackSub64 [D],9
   10611 :GetFromStackSub64 [D],9
   10612 :StoreRegOnStackSub64 [D],9
   10613 :StoreRegToReg64 [C],[D]
   10614 :StoreRegToReg64 [D],[E]
   10615 :StoreRegToReg64 [E],[D]
   10616 :Push64 [B]
   10617 :Push64 [C]
   10618 :Call {ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut}
   10622 :Pop64 [C]
   10623 :Pop64 [B]
   10624 :StoreRegToReg64 [F],[A]
   10625 :GetFromStackSub64 [D],9
   10626 :lessthan8 [D],[A],[F]

   //StackFrameSize:48

   10627 :LNot8 [F],[D]
   10628 :Jumpif [D],{10672}
   10632 :StoreRegOnStackSub8 [D],1
   10633 :StoreRegToReg64 [C],[A]
   10634 :GetFromStackSub64 [D],9
   10635 :StoreRegOnStackSub64 [D],9
   10636 :StoreRegToReg64 [A],[D]
   10637 :GetFromStackSub64 [E],9
   10638 :Push64 [B]
   10639 :Call {ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr}
   10643 :Pop64 [B]
   10644 :StoreFromPtrToReg64 [F],[A]
   10645 :StoreRegToReg64 [B],[C]
   10646 :StoreRegToReg64 [C],[D]
   10647 :GetFromStackSub64 [E],9
   10648 :StoreRegOnStackSub64 [E],9
   10649 :StoreRegToReg64 [C],[D]
   10650 :GetFromStackSub64 [E],9
   10651 :Push16 [A]
   10652 :Call {ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&,uptr}
   10656 :Pop16 [A]
   10657 :StoreRegToPtr16 [A],[F]
   10658 :GetFromStackSub64 [B],9
   10659 :StoreRegOnStackSub64 [B],9
   10660 :Store64 [B], 1
   10664 :GetFromStackSub64 [C],9
   10665 :Add64 [C],[B],[F]
   10666 :StoreRegToReg64 [F],[C]
   10667 :StoreRegOnStackSub64 [C],9
   10668 :Jump {10611}
   10672 :Store64 [A], 9
   10676 :DecrementStackPointer [A]
   10677 :Debug_FuncEnd 
   10678 :Ret 
---ULang:String_t<uft16>:iData^ULang:String_t<uft16>&imut: 
   10679 :Debug_FuncStart 
   10680 :Debug_LineEnter 
   10681 :StoreRegToReg64 [D],[A]
   10682 :StoreRegToReg64 [A],[D]
   10683 :Call {ULang:Vector<uft16>:iData^ULang:Vector<uft16>&imut}
   10687 :Debug_FuncEnd 

   //Line:0

   10688 :Ret 
---ULang:String_t<uft16>:Data^ULang:String_t<uft16>&: 
   10689 :Debug_FuncStart 
   10690 :Debug_LineEnter 
   10691 :StoreRegToReg64 [D],[A]
   10692 :StoreRegToReg64 [A],[D]
   10693 :Call {ULang:Vector<uft16>:Data^ULang:Vector<uft16>&}
   10697 :Debug_FuncEnd 
   10698 :Ret 
---ULang:String_t<uft16>:Size^ULang:String_t<uft16>&imut: 
   10699 :Debug_FuncStart 
   10700 :Debug_LineEnter 
   10701 :StoreRegToReg64 [D],[A]
   10702 :StoreRegToReg64 [A],[D]

   //StackFrameSize:9

   10703 :Call {ULang:Vector<uft16>:Size^ULang:Vector<uft16>&imut}
   10707 :Debug_FuncEnd 
   10708 :Ret 
---ULang:String_t<uft16>:Capacity^ULang:String_t<uft16>&imut: 
   10709 :Debug_FuncStart 
   10710 :Debug_LineEnter 
   10711 :StoreRegToReg64 [D],[A]
   10712 :StoreRegToReg64 [A],[D]
   10713 :Call {ULang:Vector<uft16>:Capacity^ULang:Vector<uft16>&imut}

   //File:/Types/String.uc
   //Line:58

   10717 :Debug_FuncEnd 
   10718 :Ret 
---ULang:String_t<uft16>:Resize^ULang:String_t<uft16>&,uptr: 
   10719 :Debug_FuncStart 
   10720 :Debug_LineEnter 
   10721 :StoreRegToReg64 [D],[A]
   10722 :StoreRegToReg64 [E],[B]
   10723 :StoreRegToReg64 [A],[D]
   10724 :StoreRegToReg64 [B],[E]
   10725 :Call {ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr}
   10729 :Debug_FuncEnd 
   10730 :Ret 
---ULang:String_t<uft16>:Reserve^ULang:String_t<uft16>&,uptr: 
   10731 :Debug_FuncStart 
   10732 :Debug_LineEnter 
   10733 :StoreRegToReg64 [D],[A]
   10734 :StoreRegToReg64 [E],[B]
   10735 :StoreRegToReg64 [A],[D]
   10736 :StoreRegToReg64 [B],[E]
   10737 :Call {ULang:Vector<uft16>:Reserve^ULang:Vector<uft16>&,uptr}
   10741 :Debug_FuncEnd 

   //Line:59

   10742 :Ret 
---ULang:String_t<uft16>:Clear^ULang:String_t<uft16>&: 
   10743 :Debug_FuncStart 
   10744 :Debug_LineEnter 
   10745 :StoreRegToReg64 [D],[A]
   10746 :StoreRegToReg64 [A],[D]
   10747 :Call {ULang:Vector<uft16>:Clear^ULang:Vector<uft16>&}
   10751 :Debug_FuncEnd 
   10752 :Ret 
---ULang:String_t<uft16>:Pop^ULang:String_t<uft16>&: 
   10753 :Debug_FuncStart 
   10754 :Debug_LineEnter 
   10755 :StoreRegToReg64 [D],[A]
   10756 :StoreRegToReg64 [A],[D]
   10757 :Call {ULang:Vector<uft16>:Pop^ULang:Vector<uft16>&}
   10761 :Debug_FuncEnd 
   10762 :Ret 
---ULang:String_t<uft16>:Remove^ULang:String_t<uft16>&,uptr: 
   10763 :Debug_FuncStart 
   10764 :Debug_LineEnter 
   10765 :StoreRegToReg64 [D],[A]
   10766 :StoreRegToReg64 [E],[B]
   10767 :StoreRegToReg64 [A],[D]
   10768 :StoreRegToReg64 [B],[E]
   10769 :Call {ULang:Vector<uft16>:Remove^ULang:Vector<uft16>&,uptr}
   10773 :Debug_FuncEnd 
   10774 :Ret 
---ULang:String_t<uft16>:Push^ULang:String_t<uft16>&,&imut: 
   10775 :Debug_FuncStart 
   10776 :Debug_LineEnter 
   10777 :StoreRegToReg64 [D],[A]
   10778 :StoreRegToReg64 [E],[B]
   10779 :StoreRegToReg64 [A],[D]
   10780 :StoreRegToReg64 [B],[E]
   10781 :Call {ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,&imut}
   10785 :Debug_FuncEnd 
   10786 :Ret 
---ULang:String_t<uft16>:Push^ULang:String_t<uft16>&,mov: 
   10787 :Debug_FuncStart 
   10788 :Debug_LineEnter 
   10789 :StoreRegToReg64 [D],[A]
   10790 :StoreRegToReg16 [E],[B]
   10791 :StoreRegToReg64 [A],[D]
   10792 :StoreRegToReg16 [B],[E]
   10793 :Call {ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,mov}
   10797 :Debug_FuncEnd 
   10798 :Ret 
---ULang:String_t<uft16>:Insert^ULang:String_t<uft16>&,uptr,&imut: 
   10799 :Debug_FuncStart 
   10800 :Debug_LineEnter 
   10801 :StoreRegToReg64 [D],[A]
   10802 :StoreRegToReg64 [E],[B]
   10803 :StoreRegToReg64 [F],[C]
   10804 :StoreRegToReg64 [A],[D]
   10805 :StoreRegToReg64 [B],[E]
   10806 :StoreRegToReg64 [C],[F]
   10807 :Call {ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,&imut}
   10811 :Debug_FuncEnd 
   10812 :Ret 
---ULang:String_t<uft16>:Insert^ULang:String_t<uft16>&,uptr,mov: 
   10813 :Debug_FuncStart 
   10814 :Debug_LineEnter 
   10815 :StoreRegToReg64 [D],[A]
   10816 :StoreRegToReg64 [E],[B]
   10817 :StoreRegToReg16 [F],[C]
   10818 :StoreRegToReg64 [A],[D]
   10819 :StoreRegToReg64 [B],[E]

   //File:/Types/String.uc
   //Line:61

   10820 :StoreRegToReg16 [C],[F]
   10821 :Call {ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,mov}
   10825 :Debug_FuncEnd 
   10826 :Ret 
---ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&,uptr: 
   10827 :Debug_FuncStart 
   10828 :Debug_LineEnter 
   10829 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:62

   10830 :StoreRegToReg64 [D],[A]
   10831 :StoreRegToReg64 [E],[B]
   10832 :StoreRegToReg64 [A],[D]
   10833 :StoreRegToReg64 [B],[E]
   10834 :Call {ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr}
   10838 :Debug_FuncEnd 
   10839 :Ret 
---ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&imut,uptr: 

   //File:/Types/String.uc
   //Line:65

   10840 :Debug_FuncStart 
   10841 :Debug_LineEnter 
   10842 :Debug_LineEnter 
   10843 :StoreRegToReg64 [D],[A]
   10844 :StoreRegToReg64 [E],[B]
   10845 :StoreRegToReg64 [A],[D]
   10846 :StoreRegToReg64 [B],[E]
   10847 :Call {ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr}
   10851 :Debug_FuncEnd 
   10852 :Ret 
---ULang:String_t<uft16>:Append^ULang:String_t<uft16>&,ULang:Span<uft16>imut: 
   10853 :Debug_FuncStart 
   10854 :Debug_LineEnter 
   10855 :StoreRegToReg64 [D],[A]
   10856 :GetFromStackSub64 [B],16
   10857 :StoreRegOnStackSub64 [B],16
   10858 :GetFromStackSub64 [B],24
   10859 :StoreRegOnStackSub64 [B],24

   //File:/Types/String.uc
   //Line:68

   10860 :StoreRegToReg64 [A],[D]
   10861 :GetFromStackSub64 [B],16
   10862 :Push64 [B]
   10863 :GetFromStackSub64 [B],16
   10864 :Push64 [B]
   10865 :Call {ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>imut}
   10869 :Pop64 [A]
   10870 :Pop64 [A]
   10871 :Debug_FuncEnd 

   //File:/Types/String.uc
   //Line:69

   10872 :Ret 
---ULang:String_t<uft16>:Append^ULang:String_t<uft16>&,ULang:Span<uft16>mov: 
   10873 :Debug_FuncStart 
   10874 :Debug_LineEnter 
   10875 :StoreRegToReg64 [D],[A]
   10876 :GetFromStackSub64 [B],16
   10877 :StoreRegOnStackSub64 [B],16
   10878 :GetFromStackSub64 [B],24
   10879 :StoreRegOnStackSub64 [B],24
   10880 :StoreRegToReg64 [A],[D]
   10881 :GetFromStackSub64 [B],16
   10882 :Push64 [B]
   10883 :GetFromStackSub64 [B],16

   //File:/Types/String.uc
   //Line:70

   10884 :Push64 [B]
   10885 :Call {ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>mov}
   10889 :Pop64 [A]
   10890 :Pop64 [A]
   10891 :Debug_FuncEnd 
   10892 :Ret 
---ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut: 
   10893 :Store64 [A], 32
   10897 :IncrementStackPointer [A]
   10898 :Debug_FuncStart 
   10899 :Debug_LineEnter 
   10900 :StoreRegToReg64 [D],[A]
   10901 :StoreRegToReg64 [A],[B]
   10902 :StoreRegToReg64 [A],[D]
   10903 :Push64 [E]

   //File:/Types/String.uc
   //Line:73

   10904 :Call {ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut}
   10908 :Pop64 [E]
   10909 :StoreFromPtrToReg64 [F],[A]
   10910 :StoreRegOnStackSub64 [A],32
   10911 :Read64 [F],[A],8
   10912 :StoreRegOnStackSub64 [A],24
   10913 :GetPointerOfStackSub [A],32
   10914 :StoreRegToReg64 [E],[B]
   10915 :StoreRegToReg64 [B],[D]

   //File:/Types/String.uc
   //Line:75

   10916 :Push64 [A]
   10917 :Call {ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut}
   10921 :Pop64 [A]
   10922 :StoreFromPtrToReg64 [F],[B]
   10923 :StoreRegOnStackSub64 [B],16
   10924 :Read64 [F],[B],8
   10925 :StoreRegOnStackSub64 [B],8
   10926 :GetPointerOfStackSub [B],16
   10927 :StoreRegToReg64 [A],[D]

   //File:/Types/String.uc
   //Line:76

   10928 :StoreRegToReg64 [B],[E]
   10929 :Call {ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut}
   10933 :Store64 [A], 32
   10937 :DecrementStackPointer [A]
   10938 :Debug_FuncEnd 
   10939 :Ret 
---ULang:String_t<uft16>:(&notequal&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut: 

   //File:/Types/String.uc
   //Line:78

   10940 :Debug_FuncStart 
   10941 :Debug_LineEnter 
   10942 :StoreRegToReg64 [D],[A]
   10943 :StoreRegToReg64 [A],[B]
   10944 :StoreRegToReg64 [E],[C]
   10945 :StoreRegToReg64 [A],[D]
   10946 :StoreRegToReg64 [C],[E]
   10947 :Call {ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut}
   10951 :LNot8 [F],[A]
   10952 :StoreRegToReg8 [A],[F]
   10953 :Debug_FuncEnd 

   //File:/Types/String.uc
   //Line:79

   10954 :Ret 
---ULang:String_t<uft16>:(&Plus&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut: 
   10955 :Store64 [A], 48
   10959 :IncrementStackPointer [A]
   10960 :Debug_FuncStart 
   10961 :Debug_LineEnter 
   10962 :StoreRegToReg64 [D],[A]
   10963 :StoreRegToReg64 [A],[B]
   10964 :StoreRegToReg64 [E],[C]
   10965 :StoreRegToReg64 [C],[D]
   10966 :Push64 [A]
   10967 :Call {ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut}
   10971 :Pop64 [A]
   10972 :StoreFromPtrToReg64 [F],[B]
   10973 :StoreRegOnStackSub64 [B],48
   10974 :Read64 [F],[B],8
   10975 :StoreRegOnStackSub64 [B],40
   10976 :StoreRegToReg64 [B],[C]
   10977 :StoreRegOnStackSub64 [C],32
   10978 :GetPointerOfStackSub [C],32
   10979 :StoreRegToReg64 [C],[B]
   10980 :StoreRegToReg64 [C],[D]

   //File:/Types/String.uc
   //Line:82

   10981 :GetPointerOfStackSub [E],48

   //Line:83

   10982 :StoreRegToReg64 [E],[F]
   10983 :StoreRegToReg64 [F],[E]
   10984 :Push64 [A]
   10985 :Push64 [B]
   10986 :Call {ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut}
   10990 :Pop64 [B]
   10991 :Pop64 [A]
   10992 :StoreRegToReg64 [A],[D]
   10993 :GetFromStackSub64 [E],32

   //File:/Types/String.uc
   //Line:85

   10994 :Call {ULang:String_t<uft16>:(&Plus&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut}
   10998 :StoreFromPtrToReg64 [F],[A]
   10999 :StoreRegOnStackSub64 [A],24
   11000 :Read64 [F],[A],8
   11001 :StoreRegOnStackSub64 [A],16
   11002 :Read64 [F],[A],16
   11003 :StoreRegOnStackSub64 [A],8
   11004 :GetPointerOfStackSub [A],24
   11005 :StoreRegToReg64 [A],[F]
   11006 :Store64 [A], 48
   11010 :DecrementStackPointer [A]
   11011 :Debug_FuncEnd 
   11012 :Ret 
---ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:String_t<uft16>&imut: 
   11013 :Store64 [A], 24
   11017 :IncrementStackPointer [A]
   11018 :Debug_FuncStart 
   11019 :Debug_LineEnter 
   11020 :StoreRegToReg64 [D],[A]
   11021 :Debug_LineEnter 
   11022 :StoreRegToReg64 [A],[B]
   11023 :StoreRegToReg64 [E],[C]
   11024 :StoreRegToReg64 [C],[D]
   11025 :Push64 [A]
   11026 :Call {ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut}
   11030 :Pop64 [A]

   //StackFrameSize:32

   11031 :StoreFromPtrToReg64 [F],[B]
   11032 :StoreRegOnStackSub64 [B],24
   11033 :Read64 [F],[B],8

   //File:/Types/String.uc
   //Line:89

   11034 :StoreRegOnStackSub64 [B],16
   11035 :StoreRegToReg64 [B],[C]
   11036 :StoreRegOnStackSub64 [C],8
   11037 :GetPointerOfStackSub [C],8
   11038 :StoreRegToReg64 [C],[B]
   11039 :StoreRegToReg64 [C],[D]
   11040 :GetPointerOfStackSub [E],24
   11041 :StoreRegToReg64 [E],[F]
   11042 :StoreRegToReg64 [F],[E]
   11043 :Push64 [A]
   11044 :Push64 [B]
   11045 :Call {ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut}
   11049 :Pop64 [B]
   11050 :Pop64 [A]
   11051 :StoreRegToReg64 [A],[D]
   11052 :GetFromStackSub64 [E],8
   11053 :Call {ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:String_t<uft16>&imut}
   11057 :Store64 [A], 24
   11061 :DecrementStackPointer [A]
   11062 :Debug_FuncEnd 
   11063 :Ret 
---ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut: 
   11064 :Store64 [A], 16
   11068 :IncrementStackPointer [A]
   11069 :Debug_FuncStart 
   11070 :Debug_LineEnter 
   11071 :StoreRegToReg64 [D],[A]
   11072 :StoreRegToReg64 [A],[B]
   11073 :StoreRegToReg64 [A],[D]
   11074 :Push64 [E]
   11075 :Call {ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut}

   //File:/Types/String.uc
   //Line:91

   11079 :Pop64 [E]
   11080 :StoreFromPtrToReg64 [F],[A]
   11081 :StoreRegOnStackSub64 [A],16
   11082 :Read64 [F],[A],8
   11083 :StoreRegOnStackSub64 [A],8
   11084 :GetPointerOfStackSub [A],16
   11085 :StoreRegToReg64 [E],[B]
   11086 :StoreRegToReg64 [A],[D]
   11087 :StoreRegToReg64 [B],[E]
   11088 :Call {ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut}
   11092 :Store64 [A], 16
   11096 :DecrementStackPointer [A]
   11097 :Debug_FuncEnd 
   11098 :Ret 
---ULang:String_t<uft16>:(&notequal&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut: 
   11099 :Debug_FuncStart 
   11100 :Debug_LineEnter 
   11101 :StoreRegToReg64 [D],[A]
   11102 :StoreRegToReg64 [A],[B]
   11103 :StoreRegToReg64 [E],[C]
   11104 :StoreRegToReg64 [A],[D]
   11105 :StoreRegToReg64 [C],[E]
   11106 :Call {ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut}
   11110 :LNot8 [F],[A]
   11111 :StoreRegToReg8 [A],[F]
   11112 :Debug_FuncEnd 
   11113 :Ret 
---ULang:String_t<uft16>:(&Plus&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut: 
   11114 :Store64 [A], 56
   11118 :IncrementStackPointer [A]
   11119 :Debug_FuncStart 
   11120 :Debug_LineEnter 
   11121 :StoreRegToReg64 [D],[A]
   11122 :StoreFromPtrToReg64 [A],[B]
   11123 :StoreRegOnStackSub64 [B],56
   11124 :StoreFromPtrToReg64 [A],[B]
   11125 :StoreRegOnStackSub64 [B],48
   11126 :StoreFromPtrToReg64 [A],[B]
   11127 :StoreRegOnStackSub64 [B],40
   11128 :GetFromStackSub64 [B],40
   11129 :StoreRegOnStackSub64 [B],48
   11130 :StoreFromPtrToReg64 [A],[B]
   11131 :StoreRegOnStackSub64 [B],8
   11132 :GetFromStackSub64 [B],8
   11133 :StoreRegOnStackSub64 [B],32
   11134 :Debug_LineEnter 
   11135 :GetPointerOfStackSub [B],32
   11136 :StoreRegToReg64 [E],[C]
   11137 :StoreRegToReg64 [B],[D]
   11138 :StoreRegToReg64 [C],[E]
   11139 :Call {ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut}
   11143 :Debug_LineEnter 
   11144 :GetFromStackSub64 [A],32
   11145 :StoreRegOnStackSub64 [A],32
   11146 :GetFromStackSub64 [A],24

   //StackFrameSize:24

   11147 :StoreRegOnStackSub64 [A],24
   11148 :GetFromStackSub64 [A],16
   11149 :StoreRegOnStackSub64 [A],16

   //File:/Types/String.uc
   //Line:94

   11150 :GetPointerOfStackSub [A],32
   11151 :StoreRegToReg64 [A],[F]

   //Line:97

   11152 :Store64 [A], 56
   11156 :DecrementStackPointer [A]
   11157 :Debug_FuncEnd 
   11158 :Ret 
---ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut: 
   11159 :Store64 [A], 16
   11163 :IncrementStackPointer [A]
   11164 :Debug_FuncStart 
   11165 :Debug_LineEnter 
   11166 :StoreRegToReg64 [D],[A]
   11167 :StoreRegToReg64 [E],[B]
   11168 :StoreRegToReg64 [B],[D]
   11169 :Push64 [A]
   11170 :Call {ULang:StringSpan_t<uft16>:iAsSpan^ULang:StringSpan_t<uft16>&imut}
   11174 :Pop64 [A]
   11175 :StoreFromPtrToReg64 [F],[B]
   11176 :StoreRegOnStackSub64 [B],16
   11177 :Read64 [F],[B],8
   11178 :StoreRegOnStackSub64 [B],8
   11179 :StoreRegToReg64 [A],[D]
   11180 :GetFromStackSub64 [B],16
   11181 :Push64 [B]
   11182 :GetFromStackSub64 [B],16
   11183 :Push64 [B]
   11184 :Call {ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>imut}
   11188 :Pop64 [A]
   11189 :Pop64 [A]
   11190 :Store64 [A], 16
   11194 :DecrementStackPointer [A]
   11195 :Debug_FuncEnd 

   //StackFrameSize:16

   11196 :Ret 
---ULang:String_t<uft16>:AsSpan^ULang:String_t<uft16>&: 
   11197 :Store64 [A], 16
   11201 :IncrementStackPointer [A]
   11202 :Debug_FuncStart 
   11203 :Debug_LineEnter 
   11204 :GetPointerOfStackSub [A],16
   11205 :StoreRegToReg64 [A],[D]
   11206 :Call {ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&}
   11210 :GetPointerOfStackSub [A],16
   11211 :StoreRegToReg64 [A],[F]
   11212 :Store64 [A], 16
   11216 :DecrementStackPointer [A]
   11217 :Debug_FuncEnd 
   11218 :Ret 
---ULang:String_t<uft16>:iAsSpan^ULang:String_t<uft16>&imut: 
   11219 :Store64 [A], 16
   11223 :IncrementStackPointer [A]
   11224 :Debug_FuncStart 
   11225 :Debug_LineEnter 
   11226 :GetPointerOfStackSub [A],16
   11227 :StoreRegToReg64 [A],[D]
   11228 :Call {ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&}

   //File:/Types/String.uc
   //Line:103

   11232 :GetPointerOfStackSub [A],16
   11233 :StoreRegToReg64 [A],[F]
   11234 :Store64 [A], 16
   11238 :DecrementStackPointer [A]
   11239 :Debug_FuncEnd 
   11240 :Ret 
---ULang:String_t<uft16>:Str^ULang:String_t<uft16>&: 
   11241 :Store64 [A], 16
   11245 :IncrementStackPointer [A]
   11246 :Debug_FuncStart 

   //File:/Types/String.uc
   //Line:106

   11247 :Debug_LineEnter 
   11248 :GetPointerOfStackSub [A],16
   11249 :StoreRegToReg64 [A],[D]
   11250 :Call {ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&}
   11254 :GetPointerOfStackSub [A],16
   11255 :StoreRegToReg64 [A],[F]
   11256 :Store64 [A], 16
   11260 :DecrementStackPointer [A]

   //Line:107

   11261 :Debug_FuncEnd 
   11262 :Ret 
---ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut: 
   11263 :Store64 [A], 16
   11267 :IncrementStackPointer [A]
   11268 :Debug_FuncStart 
   11269 :Debug_LineEnter 

   //Line:108

   11270 :GetPointerOfStackSub [A],16
   11271 :StoreRegToReg64 [A],[D]
   11272 :Call {ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&}
   11276 :GetPointerOfStackSub [A],16
   11277 :StoreRegToReg64 [A],[F]
   11278 :Store64 [A], 16
   11282 :DecrementStackPointer [A]
   11283 :Debug_FuncEnd 
   11284 :Ret 
---ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&,ULang:Range_t<uintptr>: 
   11285 :Store64 [A], 32
   11289 :IncrementStackPointer [A]

   //File:/Types/String.uc
   //Line:111

   11290 :Debug_FuncStart 
   11291 :Debug_LineEnter 
   11292 :Debug_LineEnter 
   11293 :StoreRegToReg64 [D],[A]
   11294 :StoreRegToReg64 [A],[D]
   11295 :Call {ULang:String_t<uft16>:Str^ULang:String_t<uft16>&}
   11299 :StoreFromPtrToReg64 [F],[A]
   11300 :StoreRegOnStackSub64 [A],32
   11301 :Read64 [F],[A],8
   11302 :StoreRegOnStackSub64 [A],24
   11303 :GetPointerOfStackSub [A],32
   11304 :GetFromStackSub64 [B],48
   11305 :StoreRegOnStackSub64 [B],48
   11306 :GetFromStackSub64 [B],56
   11307 :StoreRegOnStackSub64 [B],56
   11308 :StoreRegToReg64 [A],[D]
   11309 :GetFromStackSub64 [B],48
   11310 :Push64 [B]
   11311 :GetFromStackSub64 [B],48
   11312 :Push64 [B]
   11313 :Call {ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,ULang:Range_t<uintptr>}
   11317 :Pop64 [A]
   11318 :Pop64 [A]
   11319 :StoreFromPtrToReg64 [F],[A]
   11320 :StoreRegOnStackSub64 [A],16
   11321 :Read64 [F],[A],8
   11322 :StoreRegOnStackSub64 [A],8

   //StackFrameSize:16

   11323 :GetPointerOfStackSub [A],16
   11324 :StoreRegToReg64 [A],[F]
   11325 :Store64 [A], 32
   11329 :DecrementStackPointer [A]
   11330 :Debug_FuncEnd 
   11331 :Ret 
---ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&imut,ULang:Range_t<uintptr>: 
   11332 :Store64 [A], 32
   11336 :IncrementStackPointer [A]
   11337 :Debug_FuncStart 
   11338 :Debug_LineEnter 
   11339 :Debug_LineEnter 
   11340 :StoreRegToReg64 [D],[A]
   11341 :StoreRegToReg64 [A],[D]
   11342 :Call {ULang:String_t<uft16>:Str^ULang:String_t<uft16>&}

   //File:/Types/String.uc
   //Line:0

   11346 :StoreFromPtrToReg64 [F],[A]
   11347 :StoreRegOnStackSub64 [A],32
   11348 :Read64 [F],[A],8
   11349 :StoreRegOnStackSub64 [A],24
   11350 :GetPointerOfStackSub [A],32
   11351 :GetFromStackSub64 [B],48
   11352 :StoreRegOnStackSub64 [B],48
   11353 :GetFromStackSub64 [B],56
   11354 :StoreRegOnStackSub64 [B],56
   11355 :StoreRegToReg64 [A],[D]
   11356 :GetFromStackSub64 [B],48
   11357 :Push64 [B]
   11358 :GetFromStackSub64 [B],48
   11359 :Push64 [B]
   11360 :Call {ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,ULang:Range_t<uintptr>}
   11364 :Pop64 [A]
   11365 :Pop64 [A]

   //File:/Types/String.uc
   //Line:0

   11366 :StoreFromPtrToReg64 [F],[A]
   11367 :StoreRegOnStackSub64 [A],16
   11368 :Read64 [F],[A],8
   11369 :StoreRegOnStackSub64 [A],8
   11370 :GetPointerOfStackSub [A],16
   11371 :StoreRegToReg64 [A],[F]
   11372 :Store64 [A], 32
   11376 :DecrementStackPointer [A]
   11377 :Debug_FuncEnd 
   11378 :Ret 
---ULang:String_t<uft16>:(&_de-init&): 
   11379 :Store64 [A], 24

   //StackFrameSize:16

   11383 :IncrementStackPointer [A]
   11384 :Debug_FuncStart 
   11385 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:0

   11386 :GetPointerOfStackSub [A],24
   11387 :StoreRegToReg64 [A],[D]
   11388 :Call {ULang:Vector<uft16>:(&_drop&)^ULang:Vector<uft16>&}
   11392 :Store64 [A], 24
   11396 :DecrementStackPointer [A]
   11397 :Debug_FuncEnd 
   11398 :Ret 
---ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&: 
   11399 :Debug_FuncStart 
   11400 :Debug_LineEnter 
   11401 :Store64 [A], 0
   11405 :StoreRegToPtr64 [A],[D]

   //File:/Types/String.uc
   //Line:111
   //Line:119

   11406 :Debug_LineEnter 
   11407 :Store64 [B], 0
   11411 :Load64 [D],[B],8
   11412 :Debug_FuncEnd 
   11413 :Ret 
---ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr: 
   11414 :Debug_FuncStart 
   11415 :Debug_LineEnter 
   11416 :StoreRegToReg64 [E],[A]
   11417 :StoreRegToPtr64 [A],[D]
   11418 :Debug_LineEnter 
   11419 :StoreRegToReg64 [F],[B]
   11420 :Load64 [D],[B],8
   11421 :Debug_FuncEnd 
   11422 :Ret 
---ULang:Span<uft32>:Size^ULang:Span<uft32>&imut: 
   11423 :Debug_FuncStart 
   11424 :Debug_LineEnter 
   11425 :Read64 [D],[A],8
   11426 :StoreRegToReg64 [A],[F]
   11427 :Debug_FuncEnd 
   11428 :Ret 
---ULang:Span<uft32>:Data^ULang:Span<uft32>&: 
   11429 :Debug_FuncStart 
   11430 :Debug_LineEnter 
   11431 :StoreFromPtrToReg64 [D],[A]
   11432 :StoreRegToReg64 [A],[F]
   11433 :Debug_FuncEnd 
   11434 :Ret 
---ULang:Span<uft32>:iData^ULang:Span<uft32>&imut: 
   11435 :Debug_FuncStart 
   11436 :Debug_LineEnter 
   11437 :StoreFromPtrToReg64 [D],[A]
   11438 :StoreRegToReg64 [A],[F]
   11439 :Debug_FuncEnd 
   11440 :Ret 
---ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,uptr: 
   11441 :Store64 [A], 8
   11445 :IncrementStackPointer [A]
   11446 :Debug_FuncStart 
   11447 :Debug_LineEnter 

   //StackFrameSize:32

   11448 :StoreFromPtrToReg64 [D],[A]
   11449 :StoreRegToReg64 [E],[B]
   11450 :Store64 [C], 4
   11454 :MultU64 [B],[C],[F]
   11455 :StoreRegOnStackSub64 [F],8
   11456 :GetFromStackSub64 [F],8
   11457 :Add64 [A],[F],[F]
   11458 :Store64 [A], 8
   11462 :DecrementStackPointer [A]
   11463 :Debug_FuncEnd 
   11464 :Ret 
---ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&imut,uptr: 
   11465 :Store64 [A], 8
   11469 :IncrementStackPointer [A]
   11470 :Debug_FuncStart 
   11471 :Debug_LineEnter 
   11472 :StoreFromPtrToReg64 [D],[A]
   11473 :StoreRegToReg64 [E],[B]
   11474 :Store64 [C], 4
   11478 :MultU64 [B],[C],[F]
   11479 :StoreRegOnStackSub64 [F],8
   11480 :GetFromStackSub64 [F],8
   11481 :Add64 [A],[F],[F]
   11482 :Store64 [A], 8
   11486 :DecrementStackPointer [A]
   11487 :Debug_FuncEnd 
   11488 :Ret 
---ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>: 
   11489 :Store64 [A], 32

   //StackFrameSize:24

   11493 :IncrementStackPointer [A]
   11494 :Debug_FuncStart 
   11495 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:0

   11496 :GetPointerOfStackSub [A],32
   11497 :Debug_LineEnter 
   11498 :StoreFromPtrToReg64 [D],[B]
   11499 :GetPointerOfStackSub [C],56
   11500 :StoreRegToReg64 [C],[D]
   11501 :Push64 [A]
   11502 :Push64 [B]
   11503 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   11507 :Pop64 [B]
   11508 :Pop64 [A]
   11509 :Store64 [C], 4
   11513 :StoreRegToReg64 [F],[D]

   //File:/Types/Span.uc
   //Line:7

   11514 :MultU64 [D],[C],[F]
   11515 :StoreRegToReg64 [F],[E]
   11516 :Add64 [B],[E],[F]
   11517 :GetPointerOfStackSub [B],56
   11518 :StoreRegToReg64 [B],[D]
   11519 :StoreRegOnStackSub64 [F],16

   //Line:8

   11520 :Push64 [A]
   11521 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   11525 :Pop64 [A]
   11526 :GetPointerOfStackSub [B],56
   11527 :StoreRegToReg64 [B],[D]

   //[A] = ULang:Span<uft32>:(&_new&):(&this&)

   11528 :StoreRegToReg64 [F],[C]

   //File:/Types/Span.uc
   //Line:11

   11529 :Push64 [A]
   11530 :Push64 [C]
   11531 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   11535 :Pop64 [C]
   11536 :Pop64 [A]

   //[A] = ULang:Span<uft32>:(&_new&):(&this&)

   11537 :StoreRegToReg64 [F],[B]

   //File:/Types/Span.uc
   //Line:13

   11538 :Sub64 [C],[B],[F]
   11539 :StoreRegToReg64 [A],[D]
   11540 :GetFromStackSub64 [E],16
   11541 :StoreRegOnStackSub64 [F],8
   11542 :GetFromStackSub64 [F],8
   11543 :Call {ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr}
   11547 :GetPointerOfStackSub [A],32
   11548 :StoreRegToReg64 [A],[F]
   11549 :Store64 [A], 32

   //StackFrameSize:8

   11553 :DecrementStackPointer [A]
   11554 :Debug_FuncEnd 
   11555 :Ret 
---ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&imut,ULang:Range_t<uintptr>: 

   //File:/Types/Span.uc
   //Line:18

   11556 :Store64 [A], 32
   11560 :IncrementStackPointer [A]
   11561 :Debug_FuncStart 
   11562 :Debug_LineEnter 
   11563 :GetPointerOfStackSub [A],32
   11564 :Debug_LineEnter 
   11565 :StoreFromPtrToReg64 [D],[B]
   11566 :GetPointerOfStackSub [C],56
   11567 :StoreRegToReg64 [C],[D]
   11568 :Push64 [A]
   11569 :Push64 [B]
   11570 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}
   11574 :Pop64 [B]

   //StackFrameSize:8

   11575 :Pop64 [A]
   11576 :Store64 [C], 4
   11580 :StoreRegToReg64 [F],[D]
   11581 :MultU64 [D],[C],[F]
   11582 :StoreRegToReg64 [F],[E]
   11583 :Add64 [B],[E],[F]
   11584 :GetPointerOfStackSub [B],56
   11585 :StoreRegToReg64 [B],[D]
   11586 :StoreRegOnStackSub64 [F],16
   11587 :Push64 [A]
   11588 :Call {ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut}
   11592 :Pop64 [A]
   11593 :GetPointerOfStackSub [B],56
   11594 :StoreRegToReg64 [B],[D]
   11595 :StoreRegToReg64 [F],[C]
   11596 :Push64 [A]

   //StackFrameSize:32

   11597 :Push64 [C]
   11598 :Call {ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut}

   //Line:21

   11602 :Pop64 [C]
   11603 :Pop64 [A]
   11604 :StoreRegToReg64 [F],[B]
   11605 :Sub64 [C],[B],[F]
   11606 :StoreRegToReg64 [A],[D]
   11607 :GetFromStackSub64 [E],16
   11608 :StoreRegOnStackSub64 [F],8
   11609 :GetFromStackSub64 [F],8
   11610 :Call {ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr}
   11614 :GetPointerOfStackSub [A],32
   11615 :StoreRegToReg64 [A],[F]
   11616 :Store64 [A], 32
   11620 :DecrementStackPointer [A]
   11621 :Debug_FuncEnd 
   11622 :Ret 
---ULang:Vector<uft32>:(&_new&)^ULang:Vector<uft32>&: 
   11623 :Debug_FuncStart 
   11624 :Debug_LineEnter 
   11625 :Store64 [A], 0
   11629 :StoreRegToPtr64 [A],[D]
   11630 :Debug_LineEnter 
   11631 :Store64 [B], 0
   11635 :Load64 [D],[B],8
   11636 :Debug_LineEnter 
   11637 :Store64 [C], 0
   11641 :Load64 [D],[C],16
   11642 :Debug_FuncEnd 
   11643 :Ret 
---ULang:Vector<uft32>:(&_drop&)^ULang:Vector<uft32>&: 
   11644 :Store64 [A], 1
   11648 :IncrementStackPointer [A]
   11649 :Debug_FuncStart 
   11650 :Debug_LineEnter 
   11651 :StoreFromPtrToReg64 [D],[A]
   11652 :StoreRegToReg64 [A],[C]
   11653 :StoreRegToReg64 [C],[B]
   11654 :Debug_LineEnter 
   11655 :StoreRegToReg64 [B],[C]
   11656 :Store64 [E], 0
   11660 :notequalto8 [B],[E],[F]
   11661 :LNot8 [F],[B]

   //StackFrameSize:32

   11662 :Jumpif [B],{11670}
   11666 :StoreRegOnStackSub8 [B],1

   //Line:22

   11667 :Debug_LineEnter 
   11668 :StoreFromPtrToReg64 [D],[A]
   11669 :Free [A]
   11670 :Store64 [A], 1
   11674 :DecrementStackPointer [A]
   11675 :Debug_FuncEnd 
   11676 :Ret 
---ULang:Vector<uft32>:iData^ULang:Vector<uft32>&imut: 
   11677 :Debug_FuncStart 
   11678 :Debug_LineEnter 
   11679 :StoreFromPtrToReg64 [D],[A]
   11680 :StoreRegToReg64 [A],[F]
   11681 :Debug_FuncEnd 
   11682 :Ret 
---ULang:Vector<uft32>:Data^ULang:Vector<uft32>&: 
   11683 :Debug_FuncStart 
   11684 :Debug_LineEnter 
   11685 :StoreFromPtrToReg64 [D],[A]
   11686 :StoreRegToReg64 [A],[F]
   11687 :Debug_FuncEnd 
   11688 :Ret 
---ULang:Vector<uft32>:Size^ULang:Vector<uft32>&imut: 
   11689 :Debug_FuncStart 
   11690 :Debug_LineEnter 
   11691 :Read64 [D],[A],8
   11692 :StoreRegToReg64 [A],[F]
   11693 :Debug_FuncEnd 
   11694 :Ret 
---ULang:Vector<uft32>:Capacity^ULang:Vector<uft32>&imut: 
   11695 :Debug_FuncStart 
   11696 :Debug_LineEnter 
   11697 :Read64 [D],[A],16
   11698 :StoreRegToReg64 [A],[F]
   11699 :Debug_FuncEnd 
   11700 :Ret 
---ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr: 
   11701 :Debug_FuncStart 
   11702 :Debug_LineEnter 
   11703 :StoreRegToReg64 [D],[A]
   11704 :StoreRegToReg64 [E],[B]
   11705 :StoreRegToReg64 [D],[C]
   11706 :StoreRegToReg64 [A],[D]
   11707 :StoreRegToReg64 [E],[F]
   11708 :StoreRegToReg64 [B],[E]
   11709 :Push64 [C]
   11710 :Push64 [F]
   11711 :Call {ULang:Vector<uft32>:Reserve^ULang:Vector<uft32>&,uptr}
   11715 :Pop64 [F]
   11716 :Pop64 [C]
   11717 :Debug_LineEnter 
   11718 :StoreRegToReg64 [F],[A]
   11719 :Load64 [C],[A],8
   11720 :Debug_FuncEnd 
   11721 :Ret 
---ULang:Vector<uft32>:Reserve^ULang:Vector<uft32>&,uptr: 
   11722 :Store64 [A], 92
   11726 :IncrementStackPointer [A]
   11727 :Debug_FuncStart 
   11728 :Debug_LineEnter 
   11729 :StoreRegToReg64 [E],[A]

   //File:/Types/Vector.uc
   //Line:9

   11730 :Read64 [D],[B],16
   11731 :greaterthan8 [A],[B],[F]
   11732 :LNot8 [F],[C]
   11733 :Jumpif [C],{11892}
   11737 :StoreRegOnStackSub8 [C],92
   11738 :Debug_LineEnter 
   11739 :Read64 [D],[A],8
   11740 :StoreRegToReg64 [A],[B]
   11741 :StoreRegToReg64 [B],[C]

   //Line:11

   11742 :Debug_LineEnter 
   11743 :StoreFromPtrToReg64 [D],[B]
   11744 :StoreRegOnStackSub64 [D],91
   11745 :StoreRegToReg64 [B],[D]
   11746 :StoreRegToReg64 [D],[A]
   11747 :Debug_LineEnter 

   //StackFrameSize:1

   11748 :StoreRegToReg64 [E],[D]
   11749 :GetFromStackSub64 [B],91

   //[A] = ULang:Vector<uft32>:(&_new&):(&this&)

   11750 :Load64 [B],[D],16

   //File:/Types/Vector.uc
   //Line:13

   11751 :Debug_LineEnter 
   11752 :StoreRegToReg64 [E],[B]
   11753 :Store64 [D], 4
   11757 :MultU64 [B],[D],[F]
   11758 :Malloc [F],[E]
   11759 :StoreRegOnStackSub64 [A],83
   11760 :Store64 [A], 0
   11764 :StoreRegOnStackSub64 [A],75
   11765 :StoreRegOnStackSub64 [B],67
   11766 :StoreRegOnStackSub64 [C],59
   11767 :StoreRegOnStackSub64 [D],51

   //Line:15

   11768 :StoreRegOnStackSub64 [E],43
   11769 :GetFromStackSub64 [A],75
   11770 :GetFromStackSub64 [B],67
   11771 :equalto64 [A],[B],[F]
   11772 :Jumpif [F],{11800}
   11776 :StoreRegOnStackSub8 [F],35
   11777 :StoreRegOnStackSub64 [A],34

   //[C] = ULang:Vector<uft32>:(&_drop&):(&this&)

   11778 :GetFromStackSub64 [A],75
   11779 :GetFromStackSub64 [B],51
   11780 :MultU64 [A],[B],[F]
   11781 :StoreRegToReg64 [F],[A]

   //File:/Types/Vector.uc
   //Line:17

   11782 :GetFromStackSub64 [F],43
   11783 :Add64 [F],[A],[F]
   11784 :Debug_LineEnter 
   11785 :Store32 [A], 0
   11787 :StoreRegToPtr32 [A],[F]

   //File:/Types/Vector.uc
   //Line:18

   11788 :Store64 [A], 1
   11792 :GetFromStackSub64 [B],75
   11793 :Add64 [B],[A],[F]

   //File:/Types/Vector.uc
   //Line:20

   11794 :StoreRegToReg64 [F],[A]
   11795 :StoreRegOnStackSub64 [A],75
   11796 :Jump {11769}

   //File:/Types/Vector.uc
   //Line:21

   11800 :GetFromStackSub64 [A],91
   11801 :GetFromStackSub64 [B],43
   11802 :StoreRegToPtr64 [B],[A]
   11803 :Debug_LineEnter 
   11804 :Store32 [B], 0

   //File:/Types/Vector.uc
   //Line:24

   11806 :StoreRegToReg32 [B],[D]
   11807 :StoreRegToReg32 [D],[C]
   11808 :StoreRegOnStackSub64 [C],26
   11809 :GetFromStackSub64 [C],26
   11810 :StoreRegOnStackSub64 [C],26
   11811 :GetFromStackSub64 [C],59
   11812 :StoreRegOnStackSub64 [C],59
   11813 :GetFromStackSub64 [C],26
   11814 :GetFromStackSub64 [D],59
   11815 :lessthan8 [C],[D],[F]
   11816 :LNot8 [F],[C]
   11817 :Jumpif [C],{11867}

   //Line:25

   11821 :StoreRegOnStackSub8 [C],18
   11822 :Debug_LineEnter 
   11823 :GetFromStackSub64 [A],83

   //StackFrameSize:92

   11824 :StoreRegOnStackSub64 [A],83
   11825 :GetFromStackSub64 [A],26
   11826 :StoreRegOnStackSub64 [A],26

   //File:/Types/Vector.uc
   //Line:28

   11827 :Store64 [A], 4
   11831 :GetFromStackSub64 [C],26
   11832 :MultU64 [C],[A],[F]
   11833 :StoreRegToReg64 [F],[C]
   11834 :GetFromStackSub64 [D],83
   11835 :Add64 [D],[C],[F]
   11836 :StoreFromPtrToReg64 [F],[D]

   //Line:29

   11837 :GetFromStackSub64 [E],91
   11838 :StoreFromPtrToReg64 [E],[E]
   11839 :StoreRegOnStackSub64 [E],17
   11840 :GetFromStackSub64 [A],26

   //Line:30

   11841 :StoreRegOnStackSub64 [A],26
   11842 :Store64 [A], 4

   //Line:33

   11846 :GetFromStackSub64 [B],26
   11847 :MultU64 [B],[A],[F]
   11848 :StoreRegOnStackSub64 [F],9
   11849 :GetFromStackSub64 [F],9

   //Line:34

   11850 :Add64 [E],[F],[F]
   11851 :StoreRegToPtr32 [D],[F]
   11852 :Debug_LineEnter 
   11853 :GetFromStackSub64 [A],26
   11854 :StoreRegOnStackSub64 [A],26
   11855 :Store64 [A], 1
   11859 :GetFromStackSub64 [B],26
   11860 :Add64 [B],[A],[F]
   11861 :StoreRegToReg64 [F],[A]
   11862 :StoreRegOnStackSub64 [A],26
   11863 :Jump {11809}
   11867 :Debug_LineEnter 
   11868 :GetFromStackSub64 [A],83
   11869 :StoreRegOnStackSub64 [A],83
   11870 :GetFromStackSub64 [D],83
   11871 :StoreRegToReg64 [D],[A]
   11872 :Debug_LineEnter 
   11873 :StoreRegToReg64 [A],[D]
   11874 :Store64 [E], 0
   11878 :equalto64 [A],[E],[F]
   11879 :LNot8 [F],[A]
   11880 :StoreRegOnStackSub8 [A],1
   11881 :GetFromStackSub8 [A],1
   11882 :StoreRegToReg8 [A],[B]

   //Line:0

   11883 :Jumpif [B],{11892}
   11887 :Debug_LineEnter 
   11888 :GetFromStackSub64 [A],83
   11889 :StoreRegOnStackSub64 [A],83
   11890 :GetFromStackSub64 [A],83
   11891 :Free [A]
   11892 :Store64 [A], 92
   11896 :DecrementStackPointer [A]
   11897 :Debug_FuncEnd 
   11898 :Ret 
---ULang:Vector<uft32>:Clear^ULang:Vector<uft32>&: 
   11899 :Debug_FuncStart 
   11900 :Debug_LineEnter 
   11901 :Store64 [A], 0
   11905 :Load64 [D],[A],8
   11906 :Debug_FuncEnd 
   11907 :Ret 
---ULang:Vector<uft32>:Pop^ULang:Vector<uft32>&: 
   11908 :Debug_FuncStart 
   11909 :Debug_FuncEnd 
   11910 :Ret 
---ULang:Vector<uft32>:Remove^ULang:Vector<uft32>&,uptr: 
   11911 :Debug_FuncStart 
   11912 :Debug_FuncEnd 
   11913 :Ret 
---ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,&imut: 
   11914 :Store64 [A], 8
   11918 :IncrementStackPointer [A]
   11919 :Debug_FuncStart 
   11920 :Debug_LineEnter 

   //Line:36

   11921 :StoreRegToReg64 [D],[A]
   11922 :Read64 [D],[B],8
   11923 :Store64 [C], 1
   11927 :Add64 [B],[C],[F]
   11928 :StoreRegOnStackSub64 [D],8
   11929 :StoreRegToReg64 [A],[D]
   11930 :StoreRegToReg64 [F],[E]
   11931 :Call {ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr}
   11935 :Debug_LineEnter 
   11936 :StoreFromPtrToReg64 [E],[A]
   11937 :GetFromStackSub64 [B],8
   11938 :StoreRegOnStackSub64 [B],8
   11939 :GetFromStackSub64 [B],8
   11940 :StoreRegOnStackSub64 [B],8
   11941 :GetFromStackSub64 [B],8
   11942 :Read64 [B],[B],8
   11943 :StoreRegToReg64 [B],[C]
   11944 :Store64 [D], 1
   11948 :Sub64 [B],[D],[F]
   11949 :GetFromStackSub64 [D],8
   11950 :StoreRegToReg64 [F],[E]

   //Line:35

   11951 :Push32 [A]
   11952 :Call {ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr}
   11956 :Pop32 [A]
   11957 :StoreRegToPtr32 [A],[F]
   11958 :Store64 [B], 8
   11962 :DecrementStackPointer [B]
   11963 :Debug_FuncEnd 
   11964 :Ret 
---ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,mov: 
   11965 :Store64 [A], 12
   11969 :IncrementStackPointer [A]
   11970 :Debug_FuncStart 

   //Line:39

   11971 :Debug_LineEnter 
   11972 :StoreRegToReg64 [D],[A]
   11973 :Read64 [D],[B],8
   11974 :Store64 [C], 1
   11978 :Add64 [B],[C],[F]
   11979 :StoreRegOnStackSub64 [D],12
   11980 :StoreRegToReg64 [A],[D]
   11981 :StoreRegOnStackSub32 [E],4
   11982 :StoreRegToReg64 [F],[E]
   11983 :Call {ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr}
   11987 :Debug_LineEnter 
   11988 :GetFromStackSub32 [A],4
   11989 :StoreRegOnStackSub32 [A],4
   11990 :GetFromStackSub64 [A],12
   11991 :StoreRegOnStackSub64 [A],12
   11992 :GetFromStackSub64 [A],12
   11993 :StoreRegOnStackSub64 [A],12
   11994 :GetFromStackSub64 [A],12
   11995 :Read64 [A],[A],8
   11996 :StoreRegToReg64 [A],[B]
   11997 :Store64 [C], 1
   12001 :Sub64 [A],[C],[F]

   //File:/Types/Vector.uc
   //Line:42

   12002 :GetFromStackSub64 [D],12
   12003 :StoreRegToReg64 [F],[E]
   12004 :Call {ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr}
   12008 :GetFromStackSub32 [A],4
   12009 :StoreRegToPtr32 [A],[F]

   //[A] = ULang:Vector<uft32>:Clear:(&this&)

   12010 :Store64 [A], 12

   //StackFrameSize:8

   12014 :DecrementStackPointer [A]
   12015 :Debug_FuncEnd 
   12016 :Ret 
---ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,&imut: 

   //File:/Types/Vector.uc
   //Line:48

   12017 :Debug_FuncStart 
   12018 :Debug_FuncEnd 
   12019 :Ret 
---ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,mov: 
   12020 :Debug_FuncStart 
   12021 :Debug_FuncEnd 
   12022 :Ret 
---ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>imut: 
   12023 :Debug_FuncStart 
   12024 :Debug_FuncEnd 
   12025 :Ret 
---ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>mov: 
   12026 :Debug_FuncStart 
   12027 :Debug_FuncEnd 
   12028 :Ret 
---ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr: 
   12029 :Store64 [A], 8
   12033 :IncrementStackPointer [A]
   12034 :Debug_FuncStart 
   12035 :Debug_LineEnter 
   12036 :StoreFromPtrToReg64 [D],[A]
   12037 :StoreRegToReg64 [E],[B]
   12038 :Store64 [C], 4
   12042 :MultU64 [B],[C],[F]
   12043 :StoreRegOnStackSub64 [F],8
   12044 :GetFromStackSub64 [F],8
   12045 :Add64 [A],[F],[F]
   12046 :Store64 [A], 8
   12050 :DecrementStackPointer [A]
   12051 :Debug_FuncEnd 
   12052 :Ret 
---ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&imut,uptr: 
   12053 :Store64 [A], 8
   12057 :IncrementStackPointer [A]
   12058 :Debug_FuncStart 
   12059 :Debug_LineEnter 
   12060 :StoreFromPtrToReg64 [D],[A]
   12061 :StoreRegToReg64 [E],[B]
   12062 :Store64 [C], 4

   //File:/Types/Vector.uc
   //Line:53

   12066 :MultU64 [B],[C],[F]
   12067 :StoreRegOnStackSub64 [F],8
   12068 :GetFromStackSub64 [F],8
   12069 :Add64 [A],[F],[F]
   12070 :Store64 [A], 8
   12074 :DecrementStackPointer [A]
   12075 :Debug_FuncEnd 
   12076 :Ret 
---ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,ULang:Range_t<uintptr>: 
   12077 :Store64 [A], 32
   12081 :IncrementStackPointer [A]

   //Line:54

   12082 :Debug_FuncStart 
   12083 :Debug_LineEnter 
   12084 :Debug_LineEnter 
   12085 :StoreRegToReg64 [D],[A]
   12086 :StoreRegToReg64 [A],[D]
   12087 :Call {ULang:Vector<uft32>:AsSpan^ULang:Vector<uft32>&}
   12091 :StoreFromPtrToReg64 [F],[A]
   12092 :StoreRegOnStackSub64 [A],32
   12093 :Read64 [F],[A],8
   12094 :StoreRegOnStackSub64 [A],24
   12095 :GetPointerOfStackSub [A],32
   12096 :GetFromStackSub64 [B],48
   12097 :StoreRegOnStackSub64 [B],48
   12098 :GetFromStackSub64 [B],56
   12099 :StoreRegOnStackSub64 [B],56
   12100 :StoreRegToReg64 [A],[D]
   12101 :GetFromStackSub64 [B],48
   12102 :Push64 [B]
   12103 :GetFromStackSub64 [B],48
   12104 :Push64 [B]
   12105 :Call {ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>}
   12109 :Pop64 [A]
   12110 :Pop64 [A]
   12111 :StoreFromPtrToReg64 [F],[A]
   12112 :StoreRegOnStackSub64 [A],16
   12113 :Read64 [F],[A],8
   12114 :StoreRegOnStackSub64 [A],8
   12115 :GetPointerOfStackSub [A],16
   12116 :StoreRegToReg64 [A],[F]
   12117 :Store64 [A], 32
   12121 :DecrementStackPointer [A]
   12122 :Debug_FuncEnd 
   12123 :Ret 
---ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&imut,ULang:Range_t<uintptr>: 
   12124 :Store64 [A], 32

   //File:/Types/Vector.uc
   //Line:64

   12128 :IncrementStackPointer [A]
   12129 :Debug_FuncStart 
   12130 :Debug_LineEnter 
   12131 :Debug_LineEnter 
   12132 :StoreRegToReg64 [D],[A]
   12133 :StoreRegToReg64 [A],[D]
   12134 :Call {ULang:Vector<uft32>:AsSpan^ULang:Vector<uft32>&}
   12138 :StoreFromPtrToReg64 [F],[A]
   12139 :StoreRegOnStackSub64 [A],32
   12140 :Read64 [F],[A],8
   12141 :StoreRegOnStackSub64 [A],24
   12142 :GetPointerOfStackSub [A],32
   12143 :GetFromStackSub64 [B],48
   12144 :StoreRegOnStackSub64 [B],48
   12145 :GetFromStackSub64 [B],56
   12146 :StoreRegOnStackSub64 [B],56

   //StackFrameSize:8

   12147 :StoreRegToReg64 [A],[D]
   12148 :GetFromStackSub64 [B],48
   12149 :Push64 [B]

   //File:/Types/Vector.uc
   //Line:65

   12150 :GetFromStackSub64 [B],48
   12151 :Push64 [B]
   12152 :Call {ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>}
   12156 :Pop64 [A]
   12157 :Pop64 [A]
   12158 :StoreFromPtrToReg64 [F],[A]
   12159 :StoreRegOnStackSub64 [A],16
   12160 :Read64 [F],[A],8
   12161 :StoreRegOnStackSub64 [A],8
   12162 :GetPointerOfStackSub [A],16
   12163 :StoreRegToReg64 [A],[F]
   12164 :Store64 [A], 32
   12168 :DecrementStackPointer [A]

   //StackFrameSize:32

   12169 :Debug_FuncEnd 
   12170 :Ret 
---ULang:Vector<uft32>:AsSpan^ULang:Vector<uft32>&: 
   12171 :Store64 [A], 16
   12175 :IncrementStackPointer [A]
   12176 :Debug_FuncStart 
   12177 :Debug_LineEnter 
   12178 :GetPointerOfStackSub [A],16
   12179 :Debug_LineEnter 
   12180 :StoreFromPtrToReg64 [D],[B]
   12181 :Read64 [D],[C],8
   12182 :StoreRegToReg64 [A],[D]
   12183 :StoreRegToReg64 [B],[E]
   12184 :StoreRegToReg64 [C],[F]
   12185 :Call {ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr}
   12189 :GetPointerOfStackSub [A],16
   12190 :StoreRegToReg64 [A],[F]
   12191 :Store64 [A], 16
   12195 :DecrementStackPointer [A]
   12196 :Debug_FuncEnd 
   12197 :Ret 
---ULang:Vector<uft32>:iAsSpan^ULang:Vector<uft32>&imut: 
   12198 :Store64 [A], 16
   12202 :IncrementStackPointer [A]
   12203 :Debug_FuncStart 
   12204 :Debug_LineEnter 
   12205 :GetPointerOfStackSub [A],16
   12206 :Debug_LineEnter 
   12207 :StoreFromPtrToReg64 [D],[B]
   12208 :Read64 [D],[C],8
   12209 :StoreRegToReg64 [A],[D]
   12210 :StoreRegToReg64 [B],[E]
   12211 :StoreRegToReg64 [C],[F]
   12212 :Call {ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr}
   12216 :GetPointerOfStackSub [A],16

   //File:/Types/Vector.uc
   //Line:70
   //Line:71

   12217 :StoreRegToReg64 [A],[F]
   12218 :Store64 [A], 16
   12222 :DecrementStackPointer [A]
   12223 :Debug_FuncEnd 
   12224 :Ret 
---ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&: 
   12225 :Debug_FuncStart 
   12226 :Debug_LineEnter 
   12227 :Store64 [A], 0
   12231 :StoreRegToPtr64 [A],[D]
   12232 :Debug_LineEnter 
   12233 :Store64 [B], 0
   12237 :Load64 [D],[B],8
   12238 :Debug_FuncEnd 
   12239 :Ret 
---ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&,[&],uptr: 
   12240 :Debug_FuncStart 
   12241 :Debug_LineEnter 
   12242 :StoreRegToReg64 [E],[A]
   12243 :StoreRegToPtr64 [A],[D]
   12244 :Debug_LineEnter 
   12245 :StoreRegToReg64 [F],[B]
   12246 :Load64 [D],[B],8
   12247 :Debug_FuncEnd 
   12248 :Ret 
---ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut: 
   12249 :Debug_FuncStart 
   12250 :Debug_LineEnter 
   12251 :Read64 [D],[A],8
   12252 :StoreRegToReg64 [A],[F]
   12253 :Debug_FuncEnd 
   12254 :Ret 
---ULang:StringSpan_t<uft32>:iData^ULang:StringSpan_t<uft32>&imut: 
   12255 :Debug_FuncStart 
   12256 :Debug_LineEnter 
   12257 :StoreFromPtrToReg64 [D],[A]
   12258 :StoreRegToReg64 [A],[F]

   //StackFrameSize:16

   12259 :Debug_FuncEnd 
   12260 :Ret 
---ULang:StringSpan_t<uft32>:Data^ULang:StringSpan_t<uft32>&: 
   12261 :Debug_FuncStart 

   //File:/Types/Vector.uc
   //Line:0

   12262 :Debug_LineEnter 
   12263 :StoreFromPtrToReg64 [D],[A]

   //Line:73

   12264 :StoreRegToReg64 [A],[F]
   12265 :Debug_FuncEnd 
   12266 :Ret 
---ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut: 
   12267 :Store64 [A], 19
   12271 :IncrementStackPointer [A]
   12272 :Debug_FuncStart 
   12273 :Debug_LineEnter 
   12274 :StoreRegToReg64 [D],[A]
   12275 :StoreRegToReg64 [A],[B]
   12276 :StoreRegToReg64 [D],[C]
   12277 :StoreRegToReg64 [A],[D]
   12278 :Push64 [C]
   12279 :Push64 [E]
   12280 :Call {ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut}

   //StackFrameSize:16

   12284 :Pop64 [E]
   12285 :Pop64 [C]
   12286 :StoreRegToReg64 [E],[A]

   //File:/Types/Vector.uc
   //Line:0

   12287 :StoreRegToReg64 [A],[D]
   12288 :StoreRegToReg64 [F],[B]

   //Line:74

   12289 :Push64 [B]
   12290 :Push64 [C]
   12291 :Push64 [E]
   12292 :Call {ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut}
   12296 :Pop64 [E]
   12297 :Pop64 [C]
   12298 :Pop64 [B]
   12299 :StoreRegToReg64 [F],[A]
   12300 :notequalto8 [B],[A],[F]
   12301 :LNot8 [F],[B]
   12302 :Jumpif [B],{12313}
   12306 :StoreRegOnStackSub8 [B],19
   12307 :Store8 [A],0
   12308 :StoreRegToReg8 [A],[F]
   12309 :Jump {12399}
   12313 :Debug_LineEnter 
   12314 :Store32 [A], 0
   12316 :StoreRegToReg32 [A],[B]
   12317 :StoreRegToReg32 [B],[D]

   //Line:13

   12318 :StoreRegOnStackSub64 [D],18
   12319 :GetFromStackSub64 [B],18
   12320 :StoreRegOnStackSub64 [B],18
   12321 :StoreRegToReg64 [C],[B]
   12322 :StoreRegToReg64 [B],[D]
   12323 :StoreRegToReg64 [B],[D]
   12324 :Push64 [C]
   12325 :Push64 [E]

   //[A] = ULang:StringSpan_t<uft32>:(&_new&):(&this&)

   12326 :Call {ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut}

   //Line:17

   12330 :Pop64 [E]
   12331 :Pop64 [C]
   12332 :StoreRegToReg64 [F],[A]
   12333 :GetFromStackSub64 [B],18
   12334 :lessthan8 [B],[A],[F]

   //[A] = ULang:StringSpan_t<uft32>:(&_new&):(&this&)

   12335 :LNot8 [F],[B]

   //File:/Types/String.uc
   //Line:19

   12336 :Jumpif [B],{12396}
   12340 :StoreRegOnStackSub8 [B],10
   12341 :StoreRegToReg64 [C],[A]

   //File:/Types/String.uc
   //Line:20

   12342 :Debug_LineEnter 
   12343 :StoreRegToReg64 [A],[B]
   12344 :GetFromStackSub64 [D],18
   12345 :StoreRegOnStackSub64 [D],18
   12346 :StoreRegToReg64 [A],[D]
   12347 :StoreRegOnStackSub64 [E],9

   //File:/Types/String.uc
   //Line:21

   12348 :GetFromStackSub64 [E],18
   12349 :Call {ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr}
   12353 :StoreFromPtrToReg64 [F],[A]

   //File:/Types/String.uc
   //Line:24

   12354 :GetFromStackSub64 [B],9
   12355 :StoreRegOnStackSub64 [B],9
   12356 :GetFromStackSub64 [B],18
   12357 :StoreRegOnStackSub64 [B],18
   12358 :GetFromStackSub64 [D],9
   12359 :GetFromStackSub64 [E],18
   12360 :Push32 [A]
   12361 :Call {ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr}
   12365 :Pop32 [A]
   12366 :StoreFromPtrToReg64 [F],[B]
   12367 :notequalto8 [A],[B],[F]
   12368 :LNot8 [F],[A]
   12369 :StoreRegToReg8 [A],[C]
   12370 :Jumpif [C],{12381}
   12374 :StoreRegOnStackSub8 [C],1
   12375 :Store8 [A],0
   12376 :StoreRegToReg8 [A],[F]
   12377 :Jump {12399}
   12381 :Debug_LineEnter 
   12382 :GetFromStackSub64 [A],18
   12383 :StoreRegOnStackSub64 [A],18
   12384 :Store64 [A], 1
   12388 :GetFromStackSub64 [D],18
   12389 :Add64 [D],[A],[F]
   12390 :StoreRegToReg64 [F],[D]
   12391 :StoreRegOnStackSub64 [D],18
   12392 :Jump {12319}
   12396 :Debug_LineEnter 
   12397 :Store8 [A],1
   12398 :StoreRegToReg8 [A],[F]
   12399 :Store64 [B], 19
   12403 :DecrementStackPointer [B]
   12404 :Debug_FuncEnd 
   12405 :Ret 
---ULang:StringSpan_t<uft32>:(&notequal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut: 
   12406 :Debug_FuncStart 
   12407 :Debug_LineEnter 
   12408 :StoreRegToReg64 [D],[A]
   12409 :StoreRegToReg64 [A],[B]
   12410 :StoreRegToReg64 [E],[C]
   12411 :StoreRegToReg64 [A],[D]
   12412 :StoreRegToReg64 [C],[E]
   12413 :Call {ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut}
   12417 :LNot8 [F],[A]
   12418 :StoreRegToReg8 [A],[F]
   12419 :Debug_FuncEnd 
   12420 :Ret 
---ULang:StringSpan_t<uft32>:AsSpan^ULang:StringSpan_t<uft32>&: 
   12421 :Store64 [A], 16
   12425 :IncrementStackPointer [A]
   12426 :Debug_FuncStart 
   12427 :Debug_LineEnter 
   12428 :GetPointerOfStackSub [A],16
   12429 :Debug_LineEnter 
   12430 :StoreFromPtrToReg64 [D],[B]
   12431 :Read64 [D],[C],8
   12432 :StoreRegToReg64 [A],[D]
   12433 :StoreRegToReg64 [B],[E]
   12434 :StoreRegToReg64 [C],[F]
   12435 :Call {ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr}
   12439 :GetPointerOfStackSub [A],16
   12440 :StoreRegToReg64 [A],[F]
   12441 :Store64 [A], 16
   12445 :DecrementStackPointer [A]
   12446 :Debug_FuncEnd 
   12447 :Ret 
---ULang:StringSpan_t<uft32>:iAsSpan^ULang:StringSpan_t<uft32>&imut: 
   12448 :Store64 [A], 16
   12452 :IncrementStackPointer [A]
   12453 :Debug_FuncStart 
   12454 :Debug_LineEnter 
   12455 :GetPointerOfStackSub [A],16
   12456 :Debug_LineEnter 
   12457 :StoreFromPtrToReg64 [D],[B]
   12458 :Read64 [D],[C],8
   12459 :StoreRegToReg64 [A],[D]
   12460 :StoreRegToReg64 [B],[E]
   12461 :StoreRegToReg64 [C],[F]

   //Line:26

   12462 :Call {ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr}
   12466 :GetPointerOfStackSub [A],16
   12467 :StoreRegToReg64 [A],[F]
   12468 :Store64 [A], 16
   12472 :DecrementStackPointer [A]
   12473 :Debug_FuncEnd 
   12474 :Ret 
---ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&: 
   12475 :Store64 [A], 16
   12479 :IncrementStackPointer [A]
   12480 :Debug_FuncStart 
   12481 :Debug_LineEnter 
   12482 :GetPointerOfStackSub [A],16
   12483 :Debug_LineEnter 
   12484 :StoreRegToReg64 [D],[B]
   12485 :StoreRegToReg64 [D],[C]
   12486 :StoreRegToReg64 [B],[D]
   12487 :Push64 [A]
   12488 :Push64 [C]
   12489 :Call {ULang:Span<uft32>:Data^ULang:Span<uft32>&}
   12493 :Pop64 [C]
   12494 :Pop64 [A]
   12495 :StoreRegToReg64 [C],[B]
   12496 :StoreRegToReg64 [B],[D]
   12497 :StoreRegToReg64 [F],[E]
   12498 :Push64 [A]
   12499 :Push64 [E]
   12500 :Call {ULang:Span<uft32>:Size^ULang:Span<uft32>&imut}
   12504 :Pop64 [E]
   12505 :Pop64 [A]

   //File:/Types/String.uc
   //Line:0

   12506 :StoreRegToReg64 [A],[D]
   12507 :StoreRegToReg64 [E],[B]

   //Line:34

   12508 :StoreRegToReg64 [B],[E]
   12509 :StoreRegToReg64 [F],[C]
   12510 :StoreRegToReg64 [C],[F]
   12511 :Call {ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&,[&],uptr}
   12515 :GetPointerOfStackSub [A],16
   12516 :StoreRegToReg64 [A],[F]
   12517 :Store64 [A], 16
   12521 :DecrementStackPointer [A]
   12522 :Debug_FuncEnd 
   12523 :Ret 
---ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&imut: 
   12524 :Store64 [A], 16

   //StackFrameSize:16

   12528 :IncrementStackPointer [A]
   12529 :Debug_FuncStart 
   12530 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:0

   12531 :GetPointerOfStackSub [A],16
   12532 :Debug_LineEnter 

   //Line:35

   12533 :StoreRegToReg64 [D],[B]
   12534 :StoreRegToReg64 [D],[C]
   12535 :StoreRegToReg64 [B],[D]
   12536 :Push64 [A]
   12537 :Push64 [C]
   12538 :Call {ULang:Span<uft32>:Data^ULang:Span<uft32>&}
   12542 :Pop64 [C]
   12543 :Pop64 [A]
   12544 :StoreRegToReg64 [C],[B]
   12545 :StoreRegToReg64 [B],[D]
   12546 :StoreRegToReg64 [F],[E]
   12547 :Push64 [A]
   12548 :Push64 [E]
   12549 :Call {ULang:Span<uft32>:Size^ULang:Span<uft32>&imut}

   //StackFrameSize:16

   12553 :Pop64 [E]
   12554 :Pop64 [A]
   12555 :StoreRegToReg64 [A],[D]

   //File:/Types/String.uc
   //Line:0

   12556 :StoreRegToReg64 [E],[B]
   12557 :StoreRegToReg64 [B],[E]

   //Line:38

   12558 :StoreRegToReg64 [F],[C]
   12559 :StoreRegToReg64 [C],[F]
   12560 :Call {ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&,[&],uptr}
   12564 :GetPointerOfStackSub [A],16
   12565 :StoreRegToReg64 [A],[F]
   12566 :Store64 [A], 16
   12570 :DecrementStackPointer [A]
   12571 :Debug_FuncEnd 
   12572 :Ret 
---ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr: 
   12573 :Store64 [A], 8
   12577 :IncrementStackPointer [A]
   12578 :Debug_FuncStart 
   12579 :Debug_LineEnter 
   12580 :StoreFromPtrToReg64 [D],[A]
   12581 :StoreRegToReg64 [E],[B]
   12582 :Store64 [C], 4
   12586 :MultU64 [B],[C],[F]
   12587 :StoreRegOnStackSub64 [F],8
   12588 :GetFromStackSub64 [F],8
   12589 :Add64 [A],[F],[F]
   12590 :Store64 [A], 8
   12594 :DecrementStackPointer [A]
   12595 :Debug_FuncEnd 
   12596 :Ret 
---ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&imut,uptr: 
   12597 :Store64 [A], 8
   12601 :IncrementStackPointer [A]
   12602 :Debug_FuncStart 

   //File:/Types/String.uc
   //Line:0

   12603 :Debug_LineEnter 
   12604 :StoreFromPtrToReg64 [D],[A]

   //Line:39

   12605 :StoreRegToReg64 [E],[B]
   12606 :Store64 [C], 4
   12610 :MultU64 [B],[C],[F]
   12611 :StoreRegOnStackSub64 [F],8
   12612 :GetFromStackSub64 [F],8
   12613 :Add64 [A],[F],[F]
   12614 :Store64 [A], 8
   12618 :DecrementStackPointer [A]
   12619 :Debug_FuncEnd 
   12620 :Ret 
---ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,ULang:Range_t<uintptr>: 
   12621 :Store64 [A], 48
   12625 :IncrementStackPointer [A]
   12626 :Debug_FuncStart 
   12627 :Debug_LineEnter 
   12628 :Debug_LineEnter 
   12629 :Debug_LineEnter 
   12630 :StoreRegToReg64 [D],[A]
   12631 :StoreRegToReg64 [A],[D]
   12632 :Call {ULang:StringSpan_t<uft32>:AsSpan^ULang:StringSpan_t<uft32>&}
   12636 :StoreFromPtrToReg64 [F],[A]
   12637 :StoreRegOnStackSub64 [A],48
   12638 :Read64 [F],[A],8
   12639 :StoreRegOnStackSub64 [A],40
   12640 :GetPointerOfStackSub [A],48
   12641 :GetFromStackSub64 [B],64
   12642 :StoreRegOnStackSub64 [B],64
   12643 :GetFromStackSub64 [B],72
   12644 :StoreRegOnStackSub64 [B],72
   12645 :StoreRegToReg64 [A],[D]
   12646 :GetFromStackSub64 [B],64

   //StackFrameSize:8

   12647 :Push64 [B]
   12648 :GetFromStackSub64 [B],64
   12649 :Push64 [B]

   //File:/Types/String.uc
   //Line:41

   12650 :Call {ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>}
   12654 :Pop64 [A]
   12655 :Pop64 [A]
   12656 :StoreFromPtrToReg64 [F],[A]
   12657 :StoreRegOnStackSub64 [A],32
   12658 :Read64 [F],[A],8
   12659 :StoreRegOnStackSub64 [A],24
   12660 :GetPointerOfStackSub [A],32
   12661 :StoreRegToReg64 [A],[D]
   12662 :Call {ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&}
   12666 :StoreFromPtrToReg64 [F],[A]
   12667 :StoreRegOnStackSub64 [A],16
   12668 :Read64 [F],[A],8

   //StackFrameSize:8

   12669 :StoreRegOnStackSub64 [A],8
   12670 :GetPointerOfStackSub [A],16
   12671 :StoreRegToReg64 [A],[F]

   //File:/Types/String.uc
   //Line:42

   12672 :Store64 [A], 48
   12676 :DecrementStackPointer [A]
   12677 :Debug_FuncEnd 
   12678 :Ret 
---ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&imut,ULang:Range_t<uintptr>: 
   12679 :Store64 [A], 48
   12683 :IncrementStackPointer [A]
   12684 :Debug_FuncStart 
   12685 :Debug_LineEnter 
   12686 :Debug_LineEnter 
   12687 :Debug_LineEnter 
   12688 :StoreRegToReg64 [D],[A]
   12689 :StoreRegToReg64 [A],[D]
   12690 :Call {ULang:StringSpan_t<uft32>:AsSpan^ULang:StringSpan_t<uft32>&}

   //File:/Types/String.uc
   //Line:44
   //Line:42
   //Line:44

   12694 :StoreFromPtrToReg64 [F],[A]
   12695 :StoreRegOnStackSub64 [A],48
   12696 :Read64 [F],[A],8
   12697 :StoreRegOnStackSub64 [A],40
   12698 :GetPointerOfStackSub [A],48
   12699 :GetFromStackSub64 [B],64
   12700 :StoreRegOnStackSub64 [B],64
   12701 :GetFromStackSub64 [B],72
   12702 :StoreRegOnStackSub64 [B],72
   12703 :StoreRegToReg64 [A],[D]
   12704 :GetFromStackSub64 [B],64
   12705 :Push64 [B]
   12706 :GetFromStackSub64 [B],64
   12707 :Push64 [B]
   12708 :Call {ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>}
   12712 :Pop64 [A]
   12713 :Pop64 [A]
   12714 :StoreFromPtrToReg64 [F],[A]
   12715 :StoreRegOnStackSub64 [A],32
   12716 :Read64 [F],[A],8
   12717 :StoreRegOnStackSub64 [A],24
   12718 :GetPointerOfStackSub [A],32
   12719 :StoreRegToReg64 [A],[D]
   12720 :Call {ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&}
   12724 :StoreFromPtrToReg64 [F],[A]
   12725 :StoreRegOnStackSub64 [A],16
   12726 :Read64 [F],[A],8
   12727 :StoreRegOnStackSub64 [A],8
   12728 :GetPointerOfStackSub [A],16
   12729 :StoreRegToReg64 [A],[F]
   12730 :Store64 [A], 48
   12734 :DecrementStackPointer [A]
   12735 :Debug_FuncEnd 
   12736 :Ret 
---ULang:String_t<uft32>:(&_init&): 
   12737 :Debug_FuncStart 
   12738 :Debug_LineEnter 
   12739 :StoreRegToReg64 [D],[A]
   12740 :Debug_LineEnter 
   12741 :StoreRegToReg64 [A],[D]
   12742 :Call {ULang:Vector<uft32>:(&_new&)^ULang:Vector<uft32>&}
   12746 :Debug_FuncEnd 

   //StackFrameSize:48

   12747 :Ret 
---ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&: 
   12748 :Debug_FuncStart 
   12749 :StoreRegToReg64 [D],[A]

   //File:/Types/String.uc
   //Line:45
   //Line:44
   //Line:45

   12750 :StoreRegToReg64 [A],[D]
   12751 :Call {ULang:String_t<uft32>:(&_init&)}
   12755 :Debug_FuncEnd 
   12756 :Ret 
---ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut: 
   12757 :Store64 [A], 9
   12761 :IncrementStackPointer [A]
   12762 :Debug_FuncStart 
   12763 :StoreRegToReg64 [D],[A]
   12764 :StoreRegToReg64 [D],[B]
   12765 :StoreRegToReg64 [A],[D]
   12766 :Push64 [B]
   12767 :Push64 [E]
   12768 :Call {ULang:String_t<uft32>:(&_init&)}
   12772 :Pop64 [E]
   12773 :Pop64 [B]
   12774 :Debug_LineEnter 
   12775 :StoreRegToReg64 [B],[A]
   12776 :StoreRegToReg64 [E],[C]
   12777 :StoreRegToReg64 [C],[D]
   12778 :Push64 [A]
   12779 :Push64 [B]
   12780 :Push64 [E]
   12781 :Call {ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut}
   12785 :Pop64 [E]
   12786 :Pop64 [B]
   12787 :Pop64 [A]
   12788 :StoreRegToReg64 [A],[D]
   12789 :StoreRegToReg64 [E],[C]
   12790 :StoreRegToReg64 [F],[E]
   12791 :Push64 [B]
   12792 :Push64 [C]
   12793 :Call {ULang:String_t<uft32>:Resize^ULang:String_t<uft32>&,uptr}
   12797 :Pop64 [C]
   12798 :Pop64 [B]
   12799 :Debug_LineEnter 
   12800 :Store32 [A], 0
   12802 :StoreRegToReg32 [A],[E]
   12803 :StoreRegToReg32 [E],[D]
   12804 :StoreRegOnStackSub64 [D],9
   12805 :GetFromStackSub64 [D],9

   //File:/Types/String.uc
   //Line:49

   12806 :StoreRegOnStackSub64 [D],9
   12807 :StoreRegToReg64 [C],[D]

   //Line:0

   12808 :StoreRegToReg64 [D],[E]
   12809 :StoreRegToReg64 [E],[D]
   12810 :Push64 [B]
   12811 :Push64 [C]
   12812 :Call {ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut}
   12816 :Pop64 [C]
   12817 :Pop64 [B]
   12818 :StoreRegToReg64 [F],[A]
   12819 :GetFromStackSub64 [D],9
   12820 :lessthan8 [D],[A],[F]
   12821 :LNot8 [F],[D]
   12822 :Jumpif [D],{12866}
   12826 :StoreRegOnStackSub8 [D],1
   12827 :StoreRegToReg64 [C],[A]
   12828 :GetFromStackSub64 [D],9
   12829 :StoreRegOnStackSub64 [D],9
   12830 :StoreRegToReg64 [A],[D]
   12831 :GetFromStackSub64 [E],9
   12832 :Push64 [B]
   12833 :Call {ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr}

   //File:/Types/String.uc
   //Line:58

   12837 :Pop64 [B]
   12838 :StoreFromPtrToReg64 [F],[A]
   12839 :StoreRegToReg64 [B],[C]
   12840 :StoreRegToReg64 [C],[D]
   12841 :GetFromStackSub64 [E],9
   12842 :StoreRegOnStackSub64 [E],9
   12843 :StoreRegToReg64 [C],[D]
   12844 :GetFromStackSub64 [E],9
   12845 :Push32 [A]
   12846 :Call {ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&,uptr}
   12850 :Pop32 [A]
   12851 :StoreRegToPtr32 [A],[F]
   12852 :GetFromStackSub64 [B],9
   12853 :StoreRegOnStackSub64 [B],9
   12854 :Store64 [B], 1
   12858 :GetFromStackSub64 [C],9
   12859 :Add64 [C],[B],[F]
   12860 :StoreRegToReg64 [F],[C]
   12861 :StoreRegOnStackSub64 [C],9

   //Line:59

   12862 :Jump {12805}
   12866 :Store64 [A], 9
   12870 :DecrementStackPointer [A]
   12871 :Debug_FuncEnd 
   12872 :Ret 
---ULang:String_t<uft32>:iData^ULang:String_t<uft32>&imut: 
   12873 :Debug_FuncStart 
   12874 :Debug_LineEnter 
   12875 :StoreRegToReg64 [D],[A]
   12876 :StoreRegToReg64 [A],[D]
   12877 :Call {ULang:Vector<uft32>:iData^ULang:Vector<uft32>&imut}
   12881 :Debug_FuncEnd 
   12882 :Ret 
---ULang:String_t<uft32>:Data^ULang:String_t<uft32>&: 
   12883 :Debug_FuncStart 
   12884 :Debug_LineEnter 
   12885 :StoreRegToReg64 [D],[A]
   12886 :StoreRegToReg64 [A],[D]
   12887 :Call {ULang:Vector<uft32>:Data^ULang:Vector<uft32>&}
   12891 :Debug_FuncEnd 
   12892 :Ret 
---ULang:String_t<uft32>:Size^ULang:String_t<uft32>&imut: 
   12893 :Debug_FuncStart 
   12894 :Debug_LineEnter 
   12895 :StoreRegToReg64 [D],[A]
   12896 :StoreRegToReg64 [A],[D]
   12897 :Call {ULang:Vector<uft32>:Size^ULang:Vector<uft32>&imut}
   12901 :Debug_FuncEnd 
   12902 :Ret 
---ULang:String_t<uft32>:Capacity^ULang:String_t<uft32>&imut: 
   12903 :Debug_FuncStart 
   12904 :Debug_LineEnter 
   12905 :StoreRegToReg64 [D],[A]
   12906 :StoreRegToReg64 [A],[D]
   12907 :Call {ULang:Vector<uft32>:Capacity^ULang:Vector<uft32>&imut}
   12911 :Debug_FuncEnd 
   12912 :Ret 
---ULang:String_t<uft32>:Resize^ULang:String_t<uft32>&,uptr: 
   12913 :Debug_FuncStart 
   12914 :Debug_LineEnter 
   12915 :StoreRegToReg64 [D],[A]
   12916 :StoreRegToReg64 [E],[B]
   12917 :StoreRegToReg64 [A],[D]
   12918 :StoreRegToReg64 [B],[E]
   12919 :Call {ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr}
   12923 :Debug_FuncEnd 
   12924 :Ret 
---ULang:String_t<uft32>:Reserve^ULang:String_t<uft32>&,uptr: 
   12925 :Debug_FuncStart 
   12926 :Debug_LineEnter 
   12927 :StoreRegToReg64 [D],[A]
   12928 :StoreRegToReg64 [E],[B]
   12929 :StoreRegToReg64 [A],[D]
   12930 :StoreRegToReg64 [B],[E]
   12931 :Call {ULang:Vector<uft32>:Reserve^ULang:Vector<uft32>&,uptr}
   12935 :Debug_FuncEnd 
   12936 :Ret 
---ULang:String_t<uft32>:Clear^ULang:String_t<uft32>&: 
   12937 :Debug_FuncStart 
   12938 :Debug_LineEnter 
   12939 :StoreRegToReg64 [D],[A]

   //File:/Types/String.uc
   //Line:61

   12940 :StoreRegToReg64 [A],[D]
   12941 :Call {ULang:Vector<uft32>:Clear^ULang:Vector<uft32>&}
   12945 :Debug_FuncEnd 
   12946 :Ret 
---ULang:String_t<uft32>:Pop^ULang:String_t<uft32>&: 
   12947 :Debug_FuncStart 
   12948 :Debug_LineEnter 
   12949 :StoreRegToReg64 [D],[A]

   //File:/Types/String.uc
   //Line:62

   12950 :StoreRegToReg64 [A],[D]
   12951 :Call {ULang:Vector<uft32>:Pop^ULang:Vector<uft32>&}
   12955 :Debug_FuncEnd 
   12956 :Ret 
---ULang:String_t<uft32>:Remove^ULang:String_t<uft32>&,uptr: 
   12957 :Debug_FuncStart 
   12958 :Debug_LineEnter 
   12959 :StoreRegToReg64 [D],[A]

   //File:/Types/String.uc
   //Line:65

   12960 :StoreRegToReg64 [E],[B]
   12961 :StoreRegToReg64 [A],[D]
   12962 :StoreRegToReg64 [B],[E]
   12963 :Call {ULang:Vector<uft32>:Remove^ULang:Vector<uft32>&,uptr}
   12967 :Debug_FuncEnd 
   12968 :Ret 
---ULang:String_t<uft32>:Push^ULang:String_t<uft32>&,&imut: 
   12969 :Debug_FuncStart 

   //File:/Types/String.uc
   //Line:66

   12970 :Debug_LineEnter 
   12971 :StoreRegToReg64 [D],[A]
   12972 :StoreRegToReg64 [E],[B]
   12973 :StoreRegToReg64 [A],[D]
   12974 :StoreRegToReg64 [B],[E]
   12975 :Call {ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,&imut}
   12979 :Debug_FuncEnd 

   //File:/Types/String.uc
   //Line:68

   12980 :Ret 
---ULang:String_t<uft32>:Push^ULang:String_t<uft32>&,mov: 
   12981 :Debug_FuncStart 
   12982 :Debug_LineEnter 
   12983 :StoreRegToReg64 [D],[A]
   12984 :StoreRegToReg32 [E],[B]
   12985 :StoreRegToReg64 [A],[D]
   12986 :StoreRegToReg32 [B],[E]
   12987 :Call {ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,mov}
   12991 :Debug_FuncEnd 

   //File:/Types/String.uc
   //Line:69

   12992 :Ret 
---ULang:String_t<uft32>:Insert^ULang:String_t<uft32>&,uptr,&imut: 
   12993 :Debug_FuncStart 
   12994 :Debug_LineEnter 
   12995 :StoreRegToReg64 [D],[A]
   12996 :StoreRegToReg64 [E],[B]
   12997 :StoreRegToReg64 [F],[C]
   12998 :StoreRegToReg64 [A],[D]
   12999 :StoreRegToReg64 [B],[E]
   13000 :StoreRegToReg64 [C],[F]
   13001 :Call {ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,&imut}
   13005 :Debug_FuncEnd 
   13006 :Ret 
---ULang:String_t<uft32>:Insert^ULang:String_t<uft32>&,uptr,mov: 
   13007 :Debug_FuncStart 
   13008 :Debug_LineEnter 
   13009 :StoreRegToReg64 [D],[A]
   13010 :StoreRegToReg64 [E],[B]
   13011 :StoreRegToReg32 [F],[C]
   13012 :StoreRegToReg64 [A],[D]
   13013 :StoreRegToReg64 [B],[E]

   //File:/Types/String.uc
   //Line:72

   13014 :StoreRegToReg32 [C],[F]
   13015 :Call {ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,mov}
   13019 :Debug_FuncEnd 
   13020 :Ret 
---ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&,uptr: 
   13021 :Debug_FuncStart 
   13022 :Debug_LineEnter 
   13023 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:73

   13024 :StoreRegToReg64 [D],[A]
   13025 :StoreRegToReg64 [E],[B]
   13026 :StoreRegToReg64 [A],[D]
   13027 :StoreRegToReg64 [B],[E]
   13028 :Call {ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr}
   13032 :Debug_FuncEnd 
   13033 :Ret 
---ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&imut,uptr: 
   13034 :Debug_FuncStart 
   13035 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:75

   13036 :Debug_LineEnter 
   13037 :StoreRegToReg64 [D],[A]
   13038 :StoreRegToReg64 [E],[B]
   13039 :StoreRegToReg64 [A],[D]
   13040 :StoreRegToReg64 [B],[E]
   13041 :Call {ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr}
   13045 :Debug_FuncEnd 
   13046 :Ret 
---ULang:String_t<uft32>:Append^ULang:String_t<uft32>&,ULang:Span<uft32>imut: 
   13047 :Debug_FuncStart 

   //File:/Types/String.uc
   //Line:76

   13048 :Debug_LineEnter 
   13049 :StoreRegToReg64 [D],[A]
   13050 :GetFromStackSub64 [B],16
   13051 :StoreRegOnStackSub64 [B],16
   13052 :GetFromStackSub64 [B],24
   13053 :StoreRegOnStackSub64 [B],24
   13054 :StoreRegToReg64 [A],[D]
   13055 :GetFromStackSub64 [B],16
   13056 :Push64 [B]
   13057 :GetFromStackSub64 [B],16
   13058 :Push64 [B]
   13059 :Call {ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>imut}
   13063 :Pop64 [A]
   13064 :Pop64 [A]
   13065 :Debug_FuncEnd 
   13066 :Ret 
---ULang:String_t<uft32>:Append^ULang:String_t<uft32>&,ULang:Span<uft32>mov: 
   13067 :Debug_FuncStart 
   13068 :Debug_LineEnter 
   13069 :StoreRegToReg64 [D],[A]
   13070 :GetFromStackSub64 [B],16
   13071 :StoreRegOnStackSub64 [B],16
   13072 :GetFromStackSub64 [B],24
   13073 :StoreRegOnStackSub64 [B],24

   //File:/Types/String.uc
   //Line:79

   13074 :StoreRegToReg64 [A],[D]
   13075 :GetFromStackSub64 [B],16
   13076 :Push64 [B]
   13077 :GetFromStackSub64 [B],16
   13078 :Push64 [B]
   13079 :Call {ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>mov}
   13083 :Pop64 [A]
   13084 :Pop64 [A]
   13085 :Debug_FuncEnd 
   13086 :Ret 
---ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut: 
   13087 :Store64 [A], 32
   13091 :IncrementStackPointer [A]
   13092 :Debug_FuncStart 
   13093 :Debug_LineEnter 
   13094 :StoreRegToReg64 [D],[A]
   13095 :StoreRegToReg64 [A],[B]
   13096 :StoreRegToReg64 [A],[D]
   13097 :Push64 [E]
   13098 :Call {ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut}

   //Line:83

   13102 :Pop64 [E]
   13103 :StoreFromPtrToReg64 [F],[A]
   13104 :StoreRegOnStackSub64 [A],32
   13105 :Read64 [F],[A],8
   13106 :StoreRegOnStackSub64 [A],24
   13107 :GetPointerOfStackSub [A],32
   13108 :StoreRegToReg64 [E],[B]
   13109 :StoreRegToReg64 [B],[D]
   13110 :Push64 [A]
   13111 :Call {ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut}
   13115 :Pop64 [A]
   13116 :StoreFromPtrToReg64 [F],[B]
   13117 :StoreRegOnStackSub64 [B],16
   13118 :Read64 [F],[B],8
   13119 :StoreRegOnStackSub64 [B],8
   13120 :GetPointerOfStackSub [B],16
   13121 :StoreRegToReg64 [A],[D]
   13122 :StoreRegToReg64 [B],[E]
   13123 :Call {ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut}
   13127 :Store64 [A], 32
   13131 :DecrementStackPointer [A]
   13132 :Debug_FuncEnd 
   13133 :Ret 
---ULang:String_t<uft32>:(&notequal&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut: 

   //File:/Types/String.uc
   //Line:86

   13134 :Debug_FuncStart 
   13135 :Debug_LineEnter 
   13136 :StoreRegToReg64 [D],[A]
   13137 :StoreRegToReg64 [A],[B]
   13138 :StoreRegToReg64 [E],[C]
   13139 :StoreRegToReg64 [A],[D]
   13140 :StoreRegToReg64 [C],[E]
   13141 :Call {ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut}
   13145 :LNot8 [F],[A]
   13146 :StoreRegToReg8 [A],[F]
   13147 :Debug_FuncEnd 
   13148 :Ret 
---ULang:String_t<uft32>:(&Plus&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut: 
   13149 :Store64 [A], 48
   13153 :IncrementStackPointer [A]

   //File:/Types/String.uc
   //Line:89

   13154 :Debug_FuncStart 
   13155 :Debug_LineEnter 
   13156 :StoreRegToReg64 [D],[A]
   13157 :StoreRegToReg64 [A],[B]
   13158 :StoreRegToReg64 [E],[C]
   13159 :StoreRegToReg64 [C],[D]
   13160 :Push64 [A]
   13161 :Call {ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut}
   13165 :Pop64 [A]
   13166 :StoreFromPtrToReg64 [F],[B]
   13167 :StoreRegOnStackSub64 [B],48
   13168 :Read64 [F],[B],8
   13169 :StoreRegOnStackSub64 [B],40
   13170 :StoreRegToReg64 [B],[C]
   13171 :StoreRegOnStackSub64 [C],32
   13172 :GetPointerOfStackSub [C],32
   13173 :StoreRegToReg64 [C],[B]
   13174 :StoreRegToReg64 [C],[D]
   13175 :GetPointerOfStackSub [E],48
   13176 :StoreRegToReg64 [E],[F]
   13177 :StoreRegToReg64 [F],[E]
   13178 :Push64 [A]
   13179 :Push64 [B]
   13180 :Call {ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut}
   13184 :Pop64 [B]
   13185 :Pop64 [A]
   13186 :StoreRegToReg64 [A],[D]
   13187 :GetFromStackSub64 [E],32
   13188 :Call {ULang:String_t<uft32>:(&Plus&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut}
   13192 :StoreFromPtrToReg64 [F],[A]
   13193 :StoreRegOnStackSub64 [A],24
   13194 :Read64 [F],[A],8
   13195 :StoreRegOnStackSub64 [A],16
   13196 :Read64 [F],[A],16
   13197 :StoreRegOnStackSub64 [A],8
   13198 :GetPointerOfStackSub [A],24

   //File:/Types/String.uc
   //Line:91

   13199 :StoreRegToReg64 [A],[F]
   13200 :Store64 [A], 48
   13204 :DecrementStackPointer [A]
   13205 :Debug_FuncEnd 
   13206 :Ret 
---ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:String_t<uft32>&imut: 
   13207 :Store64 [A], 24

   //StackFrameSize:48

   13211 :IncrementStackPointer [A]
   13212 :Debug_FuncStart 
   13213 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:94

   13214 :StoreRegToReg64 [D],[A]
   13215 :Debug_LineEnter 
   13216 :StoreRegToReg64 [A],[B]
   13217 :StoreRegToReg64 [E],[C]
   13218 :StoreRegToReg64 [C],[D]
   13219 :Push64 [A]
   13220 :Call {ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut}
   13224 :Pop64 [A]
   13225 :StoreFromPtrToReg64 [F],[B]
   13226 :StoreRegOnStackSub64 [B],24
   13227 :Read64 [F],[B],8
   13228 :StoreRegOnStackSub64 [B],16
   13229 :StoreRegToReg64 [B],[C]
   13230 :StoreRegOnStackSub64 [C],8
   13231 :GetPointerOfStackSub [C],8
   13232 :StoreRegToReg64 [C],[B]
   13233 :StoreRegToReg64 [C],[D]
   13234 :GetPointerOfStackSub [E],24
   13235 :StoreRegToReg64 [E],[F]
   13236 :StoreRegToReg64 [F],[E]
   13237 :Push64 [A]
   13238 :Push64 [B]
   13239 :Call {ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut}
   13243 :Pop64 [B]
   13244 :Pop64 [A]
   13245 :StoreRegToReg64 [A],[D]
   13246 :GetFromStackSub64 [E],8
   13247 :Call {ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:String_t<uft32>&imut}
   13251 :Store64 [A], 24
   13255 :DecrementStackPointer [A]
   13256 :Debug_FuncEnd 
   13257 :Ret 
---ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut: 
   13258 :Store64 [A], 16
   13262 :IncrementStackPointer [A]
   13263 :Debug_FuncStart 
   13264 :Debug_LineEnter 
   13265 :StoreRegToReg64 [D],[A]
   13266 :StoreRegToReg64 [A],[B]

   //StackFrameSize:24

   13267 :StoreRegToReg64 [A],[D]
   13268 :Push64 [E]
   13269 :Call {ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut}
   13273 :Pop64 [E]
   13274 :StoreFromPtrToReg64 [F],[A]
   13275 :StoreRegOnStackSub64 [A],16
   13276 :Read64 [F],[A],8
   13277 :StoreRegOnStackSub64 [A],8
   13278 :GetPointerOfStackSub [A],16
   13279 :StoreRegToReg64 [E],[B]
   13280 :StoreRegToReg64 [A],[D]
   13281 :StoreRegToReg64 [B],[E]
   13282 :Call {ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut}
   13286 :Store64 [A], 16
   13290 :DecrementStackPointer [A]
   13291 :Debug_FuncEnd 
   13292 :Ret 
---ULang:String_t<uft32>:(&notequal&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut: 
   13293 :Debug_FuncStart 
   13294 :Debug_LineEnter 
   13295 :StoreRegToReg64 [D],[A]
   13296 :StoreRegToReg64 [A],[B]
   13297 :StoreRegToReg64 [E],[C]
   13298 :StoreRegToReg64 [A],[D]
   13299 :StoreRegToReg64 [C],[E]
   13300 :Call {ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut}
   13304 :LNot8 [F],[A]
   13305 :StoreRegToReg8 [A],[F]
   13306 :Debug_FuncEnd 
   13307 :Ret 
---ULang:String_t<uft32>:(&Plus&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut: 
   13308 :Store64 [A], 56
   13312 :IncrementStackPointer [A]
   13313 :Debug_FuncStart 
   13314 :Debug_LineEnter 
   13315 :StoreRegToReg64 [D],[A]

   //StackFrameSize:16

   13316 :StoreFromPtrToReg64 [A],[B]
   13317 :StoreRegOnStackSub64 [B],56
   13318 :StoreFromPtrToReg64 [A],[B]

   //File:/Types/String.uc
   //Line:101

   13319 :StoreRegOnStackSub64 [B],48
   13320 :StoreFromPtrToReg64 [A],[B]
   13321 :StoreRegOnStackSub64 [B],40
   13322 :GetFromStackSub64 [B],40
   13323 :StoreRegOnStackSub64 [B],48
   13324 :StoreFromPtrToReg64 [A],[B]
   13325 :StoreRegOnStackSub64 [B],8
   13326 :GetFromStackSub64 [B],8
   13327 :StoreRegOnStackSub64 [B],32
   13328 :Debug_LineEnter 
   13329 :GetPointerOfStackSub [B],32
   13330 :StoreRegToReg64 [E],[C]
   13331 :StoreRegToReg64 [B],[D]
   13332 :StoreRegToReg64 [C],[E]
   13333 :Call {ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut}
   13337 :Debug_LineEnter 
   13338 :GetFromStackSub64 [A],32
   13339 :StoreRegOnStackSub64 [A],32
   13340 :GetFromStackSub64 [A],24
   13341 :StoreRegOnStackSub64 [A],24
   13342 :GetFromStackSub64 [A],16
   13343 :StoreRegOnStackSub64 [A],16
   13344 :GetPointerOfStackSub [A],32
   13345 :StoreRegToReg64 [A],[F]
   13346 :Store64 [A], 56
   13350 :DecrementStackPointer [A]
   13351 :Debug_FuncEnd 

   //File:/Types/String.uc
   //Line:103

   13352 :Ret 
---ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut: 
   13353 :Store64 [A], 16
   13357 :IncrementStackPointer [A]
   13358 :Debug_FuncStart 
   13359 :Debug_LineEnter 
   13360 :StoreRegToReg64 [D],[A]
   13361 :StoreRegToReg64 [E],[B]
   13362 :StoreRegToReg64 [B],[D]
   13363 :Push64 [A]

   //StackFrameSize:56

   13364 :Call {ULang:StringSpan_t<uft32>:iAsSpan^ULang:StringSpan_t<uft32>&imut}
   13368 :Pop64 [A]
   13369 :StoreFromPtrToReg64 [F],[B]
   13370 :StoreRegOnStackSub64 [B],16
   13371 :Read64 [F],[B],8
   13372 :StoreRegOnStackSub64 [B],8
   13373 :StoreRegToReg64 [A],[D]
   13374 :GetFromStackSub64 [B],16
   13375 :Push64 [B]
   13376 :GetFromStackSub64 [B],16
   13377 :Push64 [B]
   13378 :Call {ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>imut}
   13382 :Pop64 [A]
   13383 :Pop64 [A]
   13384 :Store64 [A], 16
   13388 :DecrementStackPointer [A]
   13389 :Debug_FuncEnd 

   //Line:108

   13390 :Ret 
---ULang:String_t<uft32>:AsSpan^ULang:String_t<uft32>&: 
   13391 :Store64 [A], 16
   13395 :IncrementStackPointer [A]
   13396 :Debug_FuncStart 
   13397 :Debug_LineEnter 
   13398 :GetPointerOfStackSub [A],16
   13399 :StoreRegToReg64 [A],[D]
   13400 :Call {ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&}
   13404 :GetPointerOfStackSub [A],16
   13405 :StoreRegToReg64 [A],[F]
   13406 :Store64 [A], 16

   //File:/Types/String.uc
   //Line:111

   13410 :DecrementStackPointer [A]
   13411 :Debug_FuncEnd 
   13412 :Ret 
---ULang:String_t<uft32>:iAsSpan^ULang:String_t<uft32>&imut: 
   13413 :Store64 [A], 16
   13417 :IncrementStackPointer [A]
   13418 :Debug_FuncStart 
   13419 :Debug_LineEnter 
   13420 :GetPointerOfStackSub [A],16
   13421 :StoreRegToReg64 [A],[D]
   13422 :Call {ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&}
   13426 :GetPointerOfStackSub [A],16
   13427 :StoreRegToReg64 [A],[F]
   13428 :Store64 [A], 16
   13432 :DecrementStackPointer [A]
   13433 :Debug_FuncEnd 
   13434 :Ret 
---ULang:String_t<uft32>:Str^ULang:String_t<uft32>&: 
   13435 :Store64 [A], 16
   13439 :IncrementStackPointer [A]
   13440 :Debug_FuncStart 
   13441 :Debug_LineEnter 
   13442 :GetPointerOfStackSub [A],16

   //StackFrameSize:16

   13443 :StoreRegToReg64 [A],[D]
   13444 :Call {ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&}
   13448 :GetPointerOfStackSub [A],16
   13449 :StoreRegToReg64 [A],[F]
   13450 :Store64 [A], 16
   13454 :DecrementStackPointer [A]
   13455 :Debug_FuncEnd 
   13456 :Ret 
---ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut: 
   13457 :Store64 [A], 16
   13461 :IncrementStackPointer [A]
   13462 :Debug_FuncStart 

   //StackFrameSize:16

   13463 :Debug_LineEnter 
   13464 :GetPointerOfStackSub [A],16
   13465 :StoreRegToReg64 [A],[D]

   //File:/Types/String.uc
   //Line:0

   13466 :Call {ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&}
   13470 :GetPointerOfStackSub [A],16
   13471 :StoreRegToReg64 [A],[F]
   13472 :Store64 [A], 16
   13476 :DecrementStackPointer [A]
   13477 :Debug_FuncEnd 
   13478 :Ret 
---ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&,ULang:Range_t<uintptr>: 
   13479 :Store64 [A], 32

   //StackFrameSize:16

   13483 :IncrementStackPointer [A]
   13484 :Debug_FuncStart 
   13485 :Debug_LineEnter 

   //File:/Types/String.uc
   //Line:0

   13486 :Debug_LineEnter 
   13487 :StoreRegToReg64 [D],[A]
   13488 :StoreRegToReg64 [A],[D]
   13489 :Call {ULang:String_t<uft32>:Str^ULang:String_t<uft32>&}
   13493 :StoreFromPtrToReg64 [F],[A]
   13494 :StoreRegOnStackSub64 [A],32
   13495 :Read64 [F],[A],8
   13496 :StoreRegOnStackSub64 [A],24
   13497 :GetPointerOfStackSub [A],32
   13498 :GetFromStackSub64 [B],48
   13499 :StoreRegOnStackSub64 [B],48
   13500 :GetFromStackSub64 [B],56
   13501 :StoreRegOnStackSub64 [B],56
   13502 :StoreRegToReg64 [A],[D]

   //StackFrameSize:16

   13503 :GetFromStackSub64 [B],48
   13504 :Push64 [B]
   13505 :GetFromStackSub64 [B],48

   //File:/Types/String.uc
   //Line:0

   13506 :Push64 [B]
   13507 :Call {ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,ULang:Range_t<uintptr>}
   13511 :Pop64 [A]
   13512 :Pop64 [A]
   13513 :StoreFromPtrToReg64 [F],[A]
   13514 :StoreRegOnStackSub64 [A],16
   13515 :Read64 [F],[A],8
   13516 :StoreRegOnStackSub64 [A],8
   13517 :GetPointerOfStackSub [A],16
   13518 :StoreRegToReg64 [A],[F]
   13519 :Store64 [A], 32

   //StackFrameSize:32

   13523 :DecrementStackPointer [A]
   13524 :Debug_FuncEnd 
   13525 :Ret 
---ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&imut,ULang:Range_t<uintptr>: 

   //File:/Types/String.uc
   //Line:111
   //Line:119

   13526 :Store64 [A], 32
   13530 :IncrementStackPointer [A]
   13531 :Debug_FuncStart 
   13532 :Debug_LineEnter 
   13533 :Debug_LineEnter 
   13534 :StoreRegToReg64 [D],[A]
   13535 :StoreRegToReg64 [A],[D]
   13536 :Call {ULang:String_t<uft32>:Str^ULang:String_t<uft32>&}
   13540 :StoreFromPtrToReg64 [F],[A]
   13541 :StoreRegOnStackSub64 [A],32
   13542 :Read64 [F],[A],8
   13543 :StoreRegOnStackSub64 [A],24
   13544 :GetPointerOfStackSub [A],32
   13545 :GetFromStackSub64 [B],48
   13546 :StoreRegOnStackSub64 [B],48
   13547 :GetFromStackSub64 [B],56
   13548 :StoreRegOnStackSub64 [B],56
   13549 :StoreRegToReg64 [A],[D]
   13550 :GetFromStackSub64 [B],48
   13551 :Push64 [B]
   13552 :GetFromStackSub64 [B],48
   13553 :Push64 [B]
   13554 :Call {ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,ULang:Range_t<uintptr>}
   13558 :Pop64 [A]
   13559 :Pop64 [A]
   13560 :StoreFromPtrToReg64 [F],[A]
   13561 :StoreRegOnStackSub64 [A],16
   13562 :Read64 [F],[A],8
   13563 :StoreRegOnStackSub64 [A],8
   13564 :GetPointerOfStackSub [A],16
   13565 :StoreRegToReg64 [A],[F]
   13566 :Store64 [A], 32
   13570 :DecrementStackPointer [A]

   //File:/Types/String.uc
   //Line:119
   //Line:120

   13571 :Debug_FuncEnd 
   13572 :Ret 
---ULang:String_t<uft32>:(&_de-init&): 
   13573 :Store64 [A], 24
   13577 :IncrementStackPointer [A]
   13578 :Debug_FuncStart 
   13579 :Debug_LineEnter 
   13580 :GetPointerOfStackSub [A],24
   13581 :StoreRegToReg64 [A],[D]
   13582 :Call {ULang:Vector<uft32>:(&_drop&)^ULang:Vector<uft32>&}
   13586 :Store64 [A], 24
   13590 :DecrementStackPointer [A]
   13591 :Debug_FuncEnd 
   13592 :Ret 
---ULang:Vec2i_t<sint32>:(&_new&)^ULang:Vec2i_t<sint32>&: 
   13593 :Debug_FuncStart 
   13594 :Debug_LineEnter 
   13595 :Store32 [A], 0
   13597 :StoreRegToPtr32 [A],[D]
   13598 :Debug_LineEnter 
   13599 :Store32 [B], 0
   13601 :Load32 [D],[B],4
   13602 :Debug_FuncEnd 
   13603 :Ret 
---ULang:Vec2i_t<sint32>:(&_new&)^ULang:Vec2i_t<sint32>&,i32,i32: 
   13604 :Debug_FuncStart 
   13605 :Debug_LineEnter 
   13606 :StoreRegToReg32 [E],[A]
   13607 :StoreRegToPtr32 [A],[D]
   13608 :Debug_LineEnter 
   13609 :StoreRegToReg32 [F],[B]
   13610 :Load32 [D],[B],4
   13611 :Debug_FuncEnd 
   13612 :Ret 
---ULang:Vec2i_t<sint32>:(&equal&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut: 

   //StackFrameSize:24

   13613 :Store64 [A], 2
   13617 :IncrementStackPointer [A]
   13618 :Debug_FuncStart 
   13619 :StoreRegToReg64 [D],[A]
   13620 :Debug_LineEnter 
   13621 :Read32 [A],[B],4
   13622 :Read32 [E],[C],4
   13623 :equalto32 [B],[C],[F]
   13624 :StoreRegToReg64 [D],[A]
   13625 :StoreFromPtrToReg32 [A],[B]
   13626 :StoreFromPtrToReg32 [E],[A]
   13627 :StoreRegOnStackSub8 [F],2
   13628 :equalto32 [B],[A],[F]
   13629 :StoreRegOnStackSub8 [F],1
   13630 :GetFromStackSub8 [F],2
   13631 :GetFromStackSub8 [A],1
   13632 :LAnd8 [F],[A],[F]
   13633 :Store64 [A], 2
   13637 :DecrementStackPointer [A]

   //Line:43

   13638 :Debug_FuncEnd 
   13639 :Ret 
---ULang:Vec2i_t<sint32>:(&notequal&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut: 
   13640 :Debug_FuncStart 
   13641 :Debug_LineEnter 
   13642 :StoreRegToReg64 [D],[A]
   13643 :StoreRegToReg64 [A],[B]

   //[A] = ULang:Vec2i_t<sint32>:(&_new&):(&this&)

   13644 :StoreRegToReg64 [E],[C]

   //File:/Types/Vec2.uc
   //Line:45

   13645 :StoreRegToReg64 [A],[D]
   13646 :StoreRegToReg64 [C],[E]
   13647 :Call {ULang:Vec2i_t<sint32>:(&equal&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut}

   //StackFrameSize:2

   13651 :LNot8 [F],[A]
   13652 :StoreRegToReg8 [A],[F]

   //[A] = ULang:Vec2i_t<sint32>:(&_new&):(&this&)

   13653 :Debug_FuncEnd 
   13654 :Ret 
---ULang:Vec2i_t<sint32>:(&Compound_Plus&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut: 

   //File:/Types/Vec2.uc
   //Line:49

   13655 :Store64 [A], 4
   13659 :IncrementStackPointer [A]
   13660 :Debug_FuncStart 
   13661 :StoreRegToReg64 [D],[A]
   13662 :Debug_LineEnter 
   13663 :StoreRegToReg64 [D],[B]
   13664 :StoreFromPtrToReg32 [B],[C]
   13665 :StoreFromPtrToReg32 [E],[F]
   13666 :StoreRegOnStackSub32 [F],4
   13667 :GetFromStackSub32 [F],4
   13668 :Add32 [C],[F],[F]
   13669 :StoreRegToPtr32 [F],[A]
   13670 :StoreRegToReg64 [D],[A]
   13671 :Debug_LineEnter 
   13672 :StoreRegToReg64 [D],[B]
   13673 :Read32 [B],[C],4
   13674 :Read32 [E],[B],4
   13675 :Add32 [C],[B],[F]
   13676 :Load32 [A],[F],4
   13677 :Store64 [A], 4
   13681 :DecrementStackPointer [A]
   13682 :Debug_FuncEnd 
   13683 :Ret 
---ULang:Vec2i_t<sint32>:(&Compound_Sub&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut: 
   13684 :Store64 [A], 4
   13688 :IncrementStackPointer [A]
   13689 :Debug_FuncStart 
   13690 :StoreRegToReg64 [D],[A]

   //StackFrameSize:4

   13691 :Debug_LineEnter 
   13692 :StoreRegToReg64 [D],[B]
   13693 :StoreFromPtrToReg32 [B],[C]
   13694 :StoreFromPtrToReg32 [E],[F]

   //File:/Types/Vec2.uc
   //Line:55

   13695 :StoreRegOnStackSub32 [F],4
   13696 :GetFromStackSub32 [F],4
   13697 :Sub32 [C],[F],[F]
   13698 :StoreRegToPtr32 [F],[A]
   13699 :StoreRegToReg64 [D],[A]
   13700 :Debug_LineEnter 
   13701 :StoreRegToReg64 [D],[B]
   13702 :Read32 [B],[C],4
   13703 :Read32 [E],[B],4

   //Line:56

   13704 :Sub32 [C],[B],[F]
   13705 :Load32 [A],[F],4
   13706 :Store64 [A], 4
   13710 :DecrementStackPointer [A]
   13711 :Debug_FuncEnd 
   13712 :Ret 
---ULang:Vec2i_t<sint32>:(&Plus&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut: 
   13713 :Store64 [A], 40
   13717 :IncrementStackPointer [A]

   //StackFrameSize:4

   13718 :Debug_FuncStart 
   13719 :Debug_LineEnter 
   13720 :StoreRegToReg64 [D],[A]
   13721 :StoreFromPtrToReg64 [A],[B]

   //File:/Types/Vec2.uc
   //Line:59

   13722 :StoreRegOnStackSub64 [B],40
   13723 :StoreFromPtrToReg64 [A],[B]
   13724 :StoreRegOnStackSub64 [B],32
   13725 :StoreFromPtrToReg64 [A],[B]
   13726 :StoreRegOnStackSub64 [B],24
   13727 :GetFromStackSub64 [B],24
   13728 :StoreRegOnStackSub64 [B],32
   13729 :StoreFromPtrToReg64 [A],[B]
   13730 :StoreRegOnStackSub64 [B],8

   //Line:60

   13731 :GetFromStackSub64 [B],8
   13732 :StoreRegOnStackSub64 [B],16
   13733 :Debug_LineEnter 
   13734 :GetPointerOfStackSub [B],16
   13735 :StoreRegToReg64 [E],[C]
   13736 :StoreRegToReg64 [B],[D]
   13737 :StoreRegToReg64 [C],[E]
   13738 :Call {ULang:Vec2i_t<sint32>:(&Compound_Plus&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut}
   13742 :Debug_LineEnter 
   13743 :GetFromStackSub64 [A],16
   13744 :StoreRegOnStackSub64 [A],16

   //StackFrameSize:40

   13745 :GetFromStackSub64 [F],16
   13746 :Store64 [A], 40
   13750 :DecrementStackPointer [A]
   13751 :Debug_FuncEnd 
   13752 :Ret 
---ULang:Vec2i_t<sint32>:(&Minus&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut: 
   13753 :Store64 [A], 40
   13757 :IncrementStackPointer [A]
   13758 :Debug_FuncStart 
   13759 :Debug_LineEnter 
   13760 :StoreRegToReg64 [D],[A]
   13761 :StoreFromPtrToReg64 [A],[B]

   //Line:64

   13762 :StoreRegOnStackSub64 [B],40
   13763 :StoreFromPtrToReg64 [A],[B]
   13764 :StoreRegOnStackSub64 [B],32
   13765 :StoreFromPtrToReg64 [A],[B]
   13766 :StoreRegOnStackSub64 [B],24
   13767 :GetFromStackSub64 [B],24
   13768 :StoreRegOnStackSub64 [B],32
   13769 :StoreFromPtrToReg64 [A],[B]
   13770 :StoreRegOnStackSub64 [B],8

   //Line:65

   13771 :GetFromStackSub64 [B],8
   13772 :StoreRegOnStackSub64 [B],16
   13773 :Debug_LineEnter 
   13774 :GetPointerOfStackSub [B],16
   13775 :StoreRegToReg64 [E],[C]
   13776 :StoreRegToReg64 [B],[D]
   13777 :StoreRegToReg64 [C],[E]
   13778 :Call {ULang:Vec2i_t<sint32>:(&Compound_Sub&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut}
   13782 :Debug_LineEnter 

   //StackFrameSize:40

   13783 :GetFromStackSub64 [A],16
   13784 :StoreRegOnStackSub64 [A],16
   13785 :GetFromStackSub64 [F],16

   //File:/Types/Vec2.uc
   //Line:68

   13786 :Store64 [A], 40
   13790 :DecrementStackPointer [A]
   13791 :Debug_FuncEnd 
   13792 :Ret 
---ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&: 
   13793 :Debug_FuncStart 
   13794 :Debug_LineEnter 
   13795 :Storef32 [A], 0.000000
   13797 :StoreRegToPtr32 [A],[D]
   13798 :Debug_LineEnter 
   13799 :Storef32 [B], 0.000000
   13801 :Load32 [D],[B],4
   13802 :Debug_LineEnter 
   13803 :Storef32 [C], 0.000000
   13805 :Load32 [D],[C],8
   13806 :Debug_FuncEnd 
   13807 :Ret 
---ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&,f32,f32,f32: 
   13808 :Debug_FuncStart 

   //Line:70

   13809 :Debug_LineEnter 
   13810 :StoreRegToReg32 [E],[A]
   13811 :StoreRegToPtr32 [A],[D]
   13812 :Debug_LineEnter 
   13813 :StoreRegToReg32 [F],[B]
   13814 :Load32 [D],[B],4
   13815 :Debug_LineEnter 
   13816 :GetFromStackSub32 [C],12
   13817 :StoreRegOnStackSub32 [C],12
   13818 :GetFromStackSub32 [C],12
   13819 :Load32 [D],[C],8
   13820 :Debug_FuncEnd 
   13821 :Ret 
---ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&,ULang:Vec2f_t<float32>&imut,f32: 
   13822 :Debug_FuncStart 
   13823 :Debug_LineEnter 

   //File:/Types/Vec3.uc
   //Line:10

   13824 :StoreFromPtrToReg32 [E],[A]
   13825 :StoreRegToPtr32 [A],[D]
   13826 :Debug_LineEnter 
   13827 :Read32 [E],[B],4

   //Line:11

   13828 :Load32 [D],[B],4
   13829 :Debug_LineEnter 
   13830 :StoreRegToReg32 [F],[C]
   13831 :Load32 [D],[C],8

   //Line:12

   13832 :Debug_FuncEnd 
   13833 :Ret 
---ULang:Vec3f_t<float32>:(&equal&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&: 
   13834 :Store64 [A], 4

   //[A] = ULang:Vec3f_t<float32>:(&_new&):(&this&)

   13838 :IncrementStackPointer [A]

   //File:/Types/Vec3.uc
   //Line:15

   13839 :Debug_FuncStart 
   13840 :StoreRegToReg64 [D],[A]
   13841 :Debug_LineEnter 

   //Line:16

   13842 :Read32 [A],[B],8
   13843 :Read32 [E],[C],8
   13844 :equaltof32 [B],[C],[F]

   //Line:17

   13845 :StoreRegToReg64 [D],[A]
   13846 :Read32 [A],[B],4
   13847 :Read32 [E],[A],4
   13848 :StoreRegOnStackSub8 [F],4
   13849 :equaltof32 [B],[A],[F]
   13850 :StoreRegOnStackSub8 [F],3
   13851 :GetFromStackSub8 [F],4

   //[A] = ULang:Vec3f_t<float32>:(&_new&):(&this&)

   13852 :GetFromStackSub8 [A],3

   //File:/Types/Vec3.uc
   //Line:20

   13853 :LAnd8 [F],[A],[F]
   13854 :StoreRegToReg64 [D],[A]
   13855 :StoreFromPtrToReg32 [A],[B]

   //Line:21

   13856 :StoreFromPtrToReg32 [E],[A]
   13857 :StoreRegOnStackSub8 [F],2
   13858 :equaltof32 [B],[A],[F]

   //Line:22

   13859 :StoreRegOnStackSub8 [F],1
   13860 :GetFromStackSub8 [F],2
   13861 :GetFromStackSub8 [A],1

   //StackFrameSize:4

   13862 :LAnd8 [F],[A],[F]
   13863 :Store64 [A], 4
   13867 :DecrementStackPointer [A]
   13868 :Debug_FuncEnd 
   13869 :Ret 
---ULang:Vec3f_t<float32>:(&notequal&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&: 
   13870 :Debug_FuncStart 
   13871 :Debug_LineEnter 
   13872 :StoreRegToReg64 [D],[A]
   13873 :StoreRegToReg64 [A],[B]
   13874 :StoreRegToReg64 [E],[C]
   13875 :StoreRegToReg64 [A],[D]
   13876 :StoreRegToReg64 [C],[E]
   13877 :Call {ULang:Vec3f_t<float32>:(&equal&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&}
   13881 :LNot8 [F],[A]
   13882 :StoreRegToReg8 [A],[F]
   13883 :Debug_FuncEnd 
   13884 :Ret 
---ULang:Vec3f_t<float32>:(&Compound_Plus&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut: 
   13885 :Store64 [A], 4
   13889 :IncrementStackPointer [A]
   13890 :Debug_FuncStart 
   13891 :StoreRegToReg64 [D],[A]
   13892 :Debug_LineEnter 
   13893 :StoreRegToReg64 [D],[B]
   13894 :StoreFromPtrToReg32 [B],[C]
   13895 :StoreFromPtrToReg32 [E],[F]
   13896 :StoreRegOnStackSub32 [F],4
   13897 :GetFromStackSub32 [F],4
   13898 :Addf32 [C],[F],[F]

   //File:/Types/Vec3.uc
   //Line:28

   13899 :StoreRegToPtr32 [F],[A]
   13900 :StoreRegToReg64 [D],[A]
   13901 :Debug_LineEnter 
   13902 :StoreRegToReg64 [D],[B]
   13903 :Read32 [B],[C],4
   13904 :Read32 [E],[B],4
   13905 :Addf32 [C],[B],[F]
   13906 :Load32 [A],[F],4
   13907 :StoreRegToReg64 [D],[A]
   13908 :Debug_LineEnter 
   13909 :StoreRegToReg64 [D],[B]
   13910 :Read32 [B],[C],8

   //StackFrameSize:4

   13911 :Read32 [E],[B],8
   13912 :Addf32 [C],[B],[F]
   13913 :Load32 [A],[F],8
   13914 :Store64 [A], 4
   13918 :DecrementStackPointer [A]
   13919 :Debug_FuncEnd 
   13920 :Ret 
---ULang:Vec3f_t<float32>:(&Compound_Sub&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut: 
   13921 :Store64 [A], 4
   13925 :IncrementStackPointer [A]
   13926 :Debug_FuncStart 
   13927 :StoreRegToReg64 [D],[A]
   13928 :Debug_LineEnter 
   13929 :StoreRegToReg64 [D],[B]
   13930 :StoreFromPtrToReg32 [B],[C]

   //Line:33

   13931 :StoreFromPtrToReg32 [E],[F]
   13932 :StoreRegOnStackSub32 [F],4
   13933 :GetFromStackSub32 [F],4
   13934 :Subf32 [C],[F],[F]
   13935 :StoreRegToPtr32 [F],[A]
   13936 :StoreRegToReg64 [D],[A]
   13937 :Debug_LineEnter 
   13938 :StoreRegToReg64 [D],[B]
   13939 :Read32 [B],[C],4
   13940 :Read32 [E],[B],4
   13941 :Subf32 [C],[B],[F]
   13942 :Load32 [A],[F],4
   13943 :StoreRegToReg64 [D],[A]
   13944 :Debug_LineEnter 

   //StackFrameSize:4

   13945 :StoreRegToReg64 [D],[B]
   13946 :Read32 [B],[C],8
   13947 :Read32 [E],[B],8
   13948 :Subf32 [C],[B],[F]

   //File:/Types/Vec3.uc
   //Line:36

   13949 :Load32 [A],[F],8
   13950 :Store64 [A], 4
   13954 :DecrementStackPointer [A]
   13955 :Debug_FuncEnd 
   13956 :Ret 
---ULang:Vec3f_t<float32>:(&Plus&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&imut: 
   13957 :Store64 [A], 44
   13961 :IncrementStackPointer [A]
   13962 :Debug_FuncStart 
   13963 :Debug_LineEnter 
   13964 :StoreRegToReg64 [D],[A]

   //Line:38

   13965 :StoreFromPtrToReg64 [A],[B]
   13966 :StoreRegOnStackSub64 [B],44
   13967 :StoreFromPtrToReg64 [A],[B]
   13968 :StoreRegOnStackSub64 [B],36
   13969 :StoreFromPtrToReg64 [A],[B]
   13970 :StoreRegOnStackSub64 [B],28
   13971 :GetFromStackSub64 [B],28
   13972 :StoreRegOnStackSub64 [B],36
   13973 :StoreFromPtrToReg64 [A],[B]
   13974 :StoreRegOnStackSub64 [B],8
   13975 :GetFromStackSub64 [B],8
   13976 :StoreRegOnStackSub64 [B],20
   13977 :Debug_LineEnter 
   13978 :GetPointerOfStackSub [B],20

   //StackFrameSize:44

   13979 :StoreRegToReg64 [E],[C]
   13980 :StoreRegToReg64 [B],[D]
   13981 :StoreRegToReg64 [C],[E]

   //File:/Types/Vec3.uc
   //Line:41

   13982 :Call {ULang:Vec3f_t<float32>:(&Compound_Plus&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut}
   13986 :Debug_LineEnter 
   13987 :GetFromStackSub64 [A],20
   13988 :StoreRegOnStackSub64 [A],20
   13989 :GetFromStackSub32 [A],12
   13990 :StoreRegOnStackSub32 [A],12
   13991 :GetPointerOfStackSub [A],20
   13992 :StoreRegToReg64 [A],[F]
   13993 :Store64 [A], 44
   13997 :DecrementStackPointer [A]
   13998 :Debug_FuncEnd 
   13999 :Ret 
---ULang:Vec3f_t<float32>:(&Minus&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&imut: 
   14000 :Store64 [A], 44
   14004 :IncrementStackPointer [A]

   //Line:43

   14005 :Debug_FuncStart 
   14006 :Debug_LineEnter 
   14007 :StoreRegToReg64 [D],[A]
   14008 :StoreFromPtrToReg64 [A],[B]
   14009 :StoreRegOnStackSub64 [B],44
   14010 :StoreFromPtrToReg64 [A],[B]
   14011 :StoreRegOnStackSub64 [B],36
   14012 :StoreFromPtrToReg64 [A],[B]
   14013 :StoreRegOnStackSub64 [B],28
   14014 :GetFromStackSub64 [B],28
   14015 :StoreRegOnStackSub64 [B],36
   14016 :StoreFromPtrToReg64 [A],[B]
   14017 :StoreRegOnStackSub64 [B],8
   14018 :GetFromStackSub64 [B],8
   14019 :StoreRegOnStackSub64 [B],20

   //StackFrameSize:44

   14020 :Debug_LineEnter 
   14021 :GetPointerOfStackSub [B],20
   14022 :StoreRegToReg64 [E],[C]

   //File:/Types/Vec3.uc
   //Line:46

   14023 :StoreRegToReg64 [B],[D]
   14024 :StoreRegToReg64 [C],[E]
   14025 :Call {ULang:Vec3f_t<float32>:(&Compound_Sub&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut}
   14029 :Debug_LineEnter 
   14030 :GetFromStackSub64 [A],20
   14031 :StoreRegOnStackSub64 [A],20
   14032 :GetFromStackSub32 [A],12
   14033 :StoreRegOnStackSub32 [A],12
   14034 :GetPointerOfStackSub [A],20
   14035 :StoreRegToReg64 [A],[F]
   14036 :Store64 [A], 44
   14040 :DecrementStackPointer [A]
   14041 :Debug_FuncEnd 
   14042 :Ret 
---ULang:Vec2f_t<sint32>:(&_new&)^ULang:Vec2f_t<sint32>&: 
   14043 :Debug_FuncStart 
   14044 :Debug_LineEnter 
   14045 :Store32 [A], 0
   14047 :StoreRegToPtr32 [A],[D]
   14048 :Debug_LineEnter 
   14049 :Store32 [B], 0
   14051 :Load32 [D],[B],4
   14052 :Debug_FuncEnd 
   14053 :Ret 
---ULang:Vec2f_t<sint32>:(&_new&)^ULang:Vec2f_t<sint32>&,i32,i32: 
   14054 :Debug_FuncStart 
   14055 :Debug_LineEnter 
   14056 :StoreRegToReg32 [E],[A]
   14057 :StoreRegToPtr32 [A],[D]
   14058 :Debug_LineEnter 
   14059 :StoreRegToReg32 [F],[B]
   14060 :Load32 [D],[B],4
   14061 :Debug_FuncEnd 
   14062 :Ret 
---ULang:Vec2f_t<sint32>:(&equal&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut: 
   14063 :Store64 [A], 2
   14067 :IncrementStackPointer [A]

   //Line:8

   14068 :Debug_FuncStart 
   14069 :StoreRegToReg64 [D],[A]
   14070 :Debug_LineEnter 
   14071 :Read32 [A],[B],4
   14072 :Read32 [E],[C],4
   14073 :equalto32 [B],[C],[F]

   //[A] = ULang:Vec2f_t<sint32>:(&_new&):(&this&)

   14074 :StoreRegToReg64 [D],[A]

   //File:/Types/Vec2.uc
   //Line:11

   14075 :StoreFromPtrToReg32 [A],[B]
   14076 :StoreFromPtrToReg32 [E],[A]
   14077 :StoreRegOnStackSub8 [F],2

   //Line:12

   14078 :equalto32 [B],[A],[F]
   14079 :StoreRegOnStackSub8 [F],1
   14080 :GetFromStackSub8 [F],2

   //StackFrameSize:2

   14081 :GetFromStackSub8 [A],1
   14082 :LAnd8 [F],[A],[F]

   //[A] = ULang:Vec2f_t<sint32>:(&_new&):(&this&)

   14083 :Store64 [A], 2
   14087 :DecrementStackPointer [A]
   14088 :Debug_FuncEnd 
   14089 :Ret 
---ULang:Vec2f_t<sint32>:(&notequal&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut: 
   14090 :Debug_FuncStart 
   14091 :Debug_LineEnter 
   14092 :StoreRegToReg64 [D],[A]
   14093 :StoreRegToReg64 [A],[B]
   14094 :StoreRegToReg64 [E],[C]
   14095 :StoreRegToReg64 [A],[D]
   14096 :StoreRegToReg64 [C],[E]
   14097 :Call {ULang:Vec2f_t<sint32>:(&equal&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut}
   14101 :LNot8 [F],[A]
   14102 :StoreRegToReg8 [A],[F]
   14103 :Debug_FuncEnd 
   14104 :Ret 
---ULang:Vec2f_t<sint32>:(&Compound_Plus&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut: 
   14105 :Store64 [A], 4

   //File:/Types/Vec2.uc
   //Line:18

   14109 :IncrementStackPointer [A]
   14110 :Debug_FuncStart 
   14111 :StoreRegToReg64 [D],[A]
   14112 :Debug_LineEnter 
   14113 :StoreRegToReg64 [D],[B]
   14114 :StoreFromPtrToReg32 [B],[C]
   14115 :StoreFromPtrToReg32 [E],[F]
   14116 :StoreRegOnStackSub32 [F],4
   14117 :GetFromStackSub32 [F],4
   14118 :Add32 [C],[F],[F]
   14119 :StoreRegToPtr32 [F],[A]
   14120 :StoreRegToReg64 [D],[A]

   //StackFrameSize:4

   14121 :Debug_LineEnter 
   14122 :StoreRegToReg64 [D],[B]
   14123 :Read32 [B],[C],4
   14124 :Read32 [E],[B],4

   //File:/Types/Vec2.uc
   //Line:21

   14125 :Add32 [C],[B],[F]
   14126 :Load32 [A],[F],4
   14127 :Store64 [A], 4
   14131 :DecrementStackPointer [A]
   14132 :Debug_FuncEnd 
   14133 :Ret 
---ULang:Vec2f_t<sint32>:(&Compound_Sub&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut: 

   //Line:22

   14134 :Store64 [A], 4
   14138 :IncrementStackPointer [A]
   14139 :Debug_FuncStart 
   14140 :StoreRegToReg64 [D],[A]
   14141 :Debug_LineEnter 
   14142 :StoreRegToReg64 [D],[B]
   14143 :StoreFromPtrToReg32 [B],[C]
   14144 :StoreFromPtrToReg32 [E],[F]
   14145 :StoreRegOnStackSub32 [F],4
   14146 :GetFromStackSub32 [F],4
   14147 :Sub32 [C],[F],[F]

   //StackFrameSize:4

   14148 :StoreRegToPtr32 [F],[A]
   14149 :StoreRegToReg64 [D],[A]
   14150 :Debug_LineEnter 
   14151 :StoreRegToReg64 [D],[B]

   //File:/Types/Vec2.uc
   //Line:25

   14152 :Read32 [B],[C],4
   14153 :Read32 [E],[B],4
   14154 :Sub32 [C],[B],[F]
   14155 :Load32 [A],[F],4
   14156 :Store64 [A], 4
   14160 :DecrementStackPointer [A]

   //Line:26

   14161 :Debug_FuncEnd 
   14162 :Ret 
---ULang:Vec2f_t<sint32>:(&Plus&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut: 
   14163 :Store64 [A], 40
   14167 :IncrementStackPointer [A]
   14168 :Debug_FuncStart 
   14169 :Debug_LineEnter 
   14170 :StoreRegToReg64 [D],[A]
   14171 :StoreFromPtrToReg64 [A],[B]
   14172 :StoreRegOnStackSub64 [B],40
   14173 :StoreFromPtrToReg64 [A],[B]
   14174 :StoreRegOnStackSub64 [B],32

   //StackFrameSize:40

   14175 :StoreFromPtrToReg64 [A],[B]
   14176 :StoreRegOnStackSub64 [B],24
   14177 :GetFromStackSub64 [B],24

   //File:/Types/Vec2.uc
   //Line:29

   14178 :StoreRegOnStackSub64 [B],32
   14179 :StoreFromPtrToReg64 [A],[B]
   14180 :StoreRegOnStackSub64 [B],8
   14181 :GetFromStackSub64 [B],8
   14182 :StoreRegOnStackSub64 [B],16
   14183 :Debug_LineEnter 
   14184 :GetPointerOfStackSub [B],16
   14185 :StoreRegToReg64 [E],[C]
   14186 :StoreRegToReg64 [B],[D]
   14187 :StoreRegToReg64 [C],[E]
   14188 :Call {ULang:Vec2f_t<sint32>:(&Compound_Plus&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut}

   //Line:30

   14192 :Debug_LineEnter 
   14193 :GetFromStackSub64 [A],16
   14194 :StoreRegOnStackSub64 [A],16
   14195 :GetFromStackSub64 [F],16
   14196 :Store64 [A], 40
   14200 :DecrementStackPointer [A]

   //Line:31

   14201 :Debug_FuncEnd 
   14202 :Ret 
---ULang:Vec2f_t<sint32>:(&Minus&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut: 
   14203 :Store64 [A], 40
   14207 :IncrementStackPointer [A]
   14208 :Debug_FuncStart 
   14209 :Debug_LineEnter 
   14210 :StoreRegToReg64 [D],[A]
   14211 :StoreFromPtrToReg64 [A],[B]
   14212 :StoreRegOnStackSub64 [B],40

   //StackFrameSize:40

   14213 :StoreFromPtrToReg64 [A],[B]
   14214 :StoreRegOnStackSub64 [B],32
   14215 :StoreFromPtrToReg64 [A],[B]

   //File:/Types/Vec2.uc
   //Line:34

   14216 :StoreRegOnStackSub64 [B],24
   14217 :GetFromStackSub64 [B],24
   14218 :StoreRegOnStackSub64 [B],32
   14219 :StoreFromPtrToReg64 [A],[B]
   14220 :StoreRegOnStackSub64 [B],8
   14221 :GetFromStackSub64 [B],8
   14222 :StoreRegOnStackSub64 [B],16
   14223 :Debug_LineEnter 
   14224 :GetPointerOfStackSub [B],16
   14225 :StoreRegToReg64 [E],[C]
   14226 :StoreRegToReg64 [B],[D]
   14227 :StoreRegToReg64 [C],[E]
   14228 :Call {ULang:Vec2f_t<sint32>:(&Compound_Sub&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut}
   14232 :Debug_LineEnter 
   14233 :GetFromStackSub64 [A],16
   14234 :StoreRegOnStackSub64 [A],16
   14235 :GetFromStackSub64 [F],16
   14236 :Store64 [A], 40
   14240 :DecrementStackPointer [A]
   14241 :Debug_FuncEnd 
   14242 :Ret 
---ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&: 
   14243 :Debug_FuncStart 
   14244 :Debug_LineEnter 
   14245 :Store32 [A], 0
   14247 :StoreRegToPtr32 [A],[D]
   14248 :Debug_LineEnter 
   14249 :Store32 [B], 0
   14251 :Load32 [D],[B],4
   14252 :Debug_LineEnter 
   14253 :Store32 [C], 0
   14255 :Load32 [D],[C],8
   14256 :Debug_FuncEnd 
   14257 :Ret 
---ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&,i32,i32,i32: 

   //Line:11

   14258 :Debug_FuncStart 
   14259 :Debug_LineEnter 
   14260 :StoreRegToReg32 [E],[A]
   14261 :StoreRegToPtr32 [A],[D]

   //Line:12

   14262 :Debug_LineEnter 
   14263 :StoreRegToReg32 [F],[B]
   14264 :Load32 [D],[B],4
   14265 :Debug_LineEnter 
   14266 :GetFromStackSub32 [C],12
   14267 :StoreRegOnStackSub32 [C],12

   //[A] = ULang:Vec3f_t<sint32>:(&_new&):(&this&)

   14268 :GetFromStackSub32 [C],12

   //File:/Types/Vec3.uc
   //Line:15

   14269 :Load32 [D],[C],8
   14270 :Debug_FuncEnd 
   14271 :Ret 
---ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&,ULang:Vec2f_t<sint32>&imut,i32: 

   //Line:16

   14272 :Debug_FuncStart 
   14273 :Debug_LineEnter 
   14274 :StoreFromPtrToReg32 [E],[A]

   //Line:17

   14275 :StoreRegToPtr32 [A],[D]
   14276 :Debug_LineEnter 
   14277 :Read32 [E],[B],4
   14278 :Load32 [D],[B],4
   14279 :Debug_LineEnter 
   14280 :StoreRegToReg32 [F],[C]
   14281 :Load32 [D],[C],8

   //[A] = ULang:Vec3f_t<sint32>:(&_new&):(&this&)

   14282 :Debug_FuncEnd 

   //File:/Types/Vec3.uc
   //Line:20

   14283 :Ret 
---ULang:Vec3f_t<sint32>:(&equal&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&: 
   14284 :Store64 [A], 4
   14288 :IncrementStackPointer [A]

   //Line:22

   14289 :Debug_FuncStart 
   14290 :StoreRegToReg64 [D],[A]
   14291 :Debug_LineEnter 

   //StackFrameSize:4

   14292 :Read32 [A],[B],8
   14293 :Read32 [E],[C],8
   14294 :equalto32 [B],[C],[F]
   14295 :StoreRegToReg64 [D],[A]

   //File:/Types/Vec3.uc
   //Line:25

   14296 :Read32 [A],[B],4
   14297 :Read32 [E],[A],4
   14298 :StoreRegOnStackSub8 [F],4
   14299 :equalto32 [B],[A],[F]
   14300 :StoreRegOnStackSub8 [F],3
   14301 :GetFromStackSub8 [F],4
   14302 :GetFromStackSub8 [A],3
   14303 :LAnd8 [F],[A],[F]
   14304 :StoreRegToReg64 [D],[A]
   14305 :StoreFromPtrToReg32 [A],[B]
   14306 :StoreFromPtrToReg32 [E],[A]
   14307 :StoreRegOnStackSub8 [F],2
   14308 :equalto32 [B],[A],[F]
   14309 :StoreRegOnStackSub8 [F],1
   14310 :GetFromStackSub8 [F],2
   14311 :GetFromStackSub8 [A],1
   14312 :LAnd8 [F],[A],[F]
   14313 :Store64 [A], 4
   14317 :DecrementStackPointer [A]
   14318 :Debug_FuncEnd 
   14319 :Ret 
---ULang:Vec3f_t<sint32>:(&notequal&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&: 
   14320 :Debug_FuncStart 
   14321 :Debug_LineEnter 
   14322 :StoreRegToReg64 [D],[A]
   14323 :StoreRegToReg64 [A],[B]
   14324 :StoreRegToReg64 [E],[C]
   14325 :StoreRegToReg64 [A],[D]
   14326 :StoreRegToReg64 [C],[E]
   14327 :Call {ULang:Vec3f_t<sint32>:(&equal&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&}
   14331 :LNot8 [F],[A]
   14332 :StoreRegToReg8 [A],[F]
   14333 :Debug_FuncEnd 
   14334 :Ret 
---ULang:Vec3f_t<sint32>:(&Compound_Plus&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut: 
   14335 :Store64 [A], 4
   14339 :IncrementStackPointer [A]
   14340 :Debug_FuncStart 

   //StackFrameSize:4

   14341 :StoreRegToReg64 [D],[A]
   14342 :Debug_LineEnter 
   14343 :StoreRegToReg64 [D],[B]
   14344 :StoreFromPtrToReg32 [B],[C]

   //File:/Types/Vec3.uc
   //Line:31

   14345 :StoreFromPtrToReg32 [E],[F]
   14346 :StoreRegOnStackSub32 [F],4
   14347 :GetFromStackSub32 [F],4
   14348 :Add32 [C],[F],[F]
   14349 :StoreRegToPtr32 [F],[A]
   14350 :StoreRegToReg64 [D],[A]
   14351 :Debug_LineEnter 
   14352 :StoreRegToReg64 [D],[B]
   14353 :Read32 [B],[C],4

   //Line:32

   14354 :Read32 [E],[B],4
   14355 :Add32 [C],[B],[F]
   14356 :Load32 [A],[F],4
   14357 :StoreRegToReg64 [D],[A]
   14358 :Debug_LineEnter 
   14359 :StoreRegToReg64 [D],[B]
   14360 :Read32 [B],[C],8

   //Line:33

   14361 :Read32 [E],[B],8
   14362 :Add32 [C],[B],[F]
   14363 :Load32 [A],[F],8
   14364 :Store64 [A], 4
   14368 :DecrementStackPointer [A]
   14369 :Debug_FuncEnd 
   14370 :Ret 
---ULang:Vec3f_t<sint32>:(&Compound_Sub&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut: 
   14371 :Store64 [A], 4

   //StackFrameSize:4

   14375 :IncrementStackPointer [A]
   14376 :Debug_FuncStart 
   14377 :StoreRegToReg64 [D],[A]
   14378 :Debug_LineEnter 

   //File:/Types/Vec3.uc
   //Line:36

   14379 :StoreRegToReg64 [D],[B]
   14380 :StoreFromPtrToReg32 [B],[C]
   14381 :StoreFromPtrToReg32 [E],[F]
   14382 :StoreRegOnStackSub32 [F],4
   14383 :GetFromStackSub32 [F],4
   14384 :Sub32 [C],[F],[F]
   14385 :StoreRegToPtr32 [F],[A]
   14386 :StoreRegToReg64 [D],[A]
   14387 :Debug_LineEnter 

   //Line:37

   14388 :StoreRegToReg64 [D],[B]
   14389 :Read32 [B],[C],4
   14390 :Read32 [E],[B],4
   14391 :Sub32 [C],[B],[F]
   14392 :Load32 [A],[F],4
   14393 :StoreRegToReg64 [D],[A]
   14394 :Debug_LineEnter 

   //Line:38

   14395 :StoreRegToReg64 [D],[B]
   14396 :Read32 [B],[C],8
   14397 :Read32 [E],[B],8
   14398 :Sub32 [C],[B],[F]
   14399 :Load32 [A],[F],8
   14400 :Store64 [A], 4
   14404 :DecrementStackPointer [A]
   14405 :Debug_FuncEnd 
   14406 :Ret 
---ULang:Vec3f_t<sint32>:(&Plus&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&imut: 
   14407 :Store64 [A], 44
   14411 :IncrementStackPointer [A]

   //File:/Types/Vec3.uc
   //Line:41

   14412 :Debug_FuncStart 
   14413 :Debug_LineEnter 
   14414 :StoreRegToReg64 [D],[A]
   14415 :StoreFromPtrToReg64 [A],[B]
   14416 :StoreRegOnStackSub64 [B],44
   14417 :StoreFromPtrToReg64 [A],[B]
   14418 :StoreRegOnStackSub64 [B],36
   14419 :StoreFromPtrToReg64 [A],[B]
   14420 :StoreRegOnStackSub64 [B],28
   14421 :GetFromStackSub64 [B],28
   14422 :StoreRegOnStackSub64 [B],36
   14423 :StoreFromPtrToReg64 [A],[B]
   14424 :StoreRegOnStackSub64 [B],8
   14425 :GetFromStackSub64 [B],8

   //Line:42

   14426 :StoreRegOnStackSub64 [B],20
   14427 :Debug_LineEnter 
   14428 :GetPointerOfStackSub [B],20
   14429 :StoreRegToReg64 [E],[C]
   14430 :StoreRegToReg64 [B],[D]
   14431 :StoreRegToReg64 [C],[E]
   14432 :Call {ULang:Vec3f_t<sint32>:(&Compound_Plus&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut}
   14436 :Debug_LineEnter 
   14437 :GetFromStackSub64 [A],20
   14438 :StoreRegOnStackSub64 [A],20
   14439 :GetFromStackSub32 [A],12
   14440 :StoreRegOnStackSub32 [A],12
   14441 :GetPointerOfStackSub [A],20
   14442 :StoreRegToReg64 [A],[F]
   14443 :Store64 [A], 44
   14447 :DecrementStackPointer [A]
   14448 :Debug_FuncEnd 
   14449 :Ret 
---ULang:Vec3f_t<sint32>:(&Minus&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&imut: 

   //StackFrameSize:44

   14450 :Store64 [A], 44
   14454 :IncrementStackPointer [A]
   14455 :Debug_FuncStart 
   14456 :Debug_LineEnter 
   14457 :StoreRegToReg64 [D],[A]
   14458 :StoreFromPtrToReg64 [A],[B]
   14459 :StoreRegOnStackSub64 [B],44
   14460 :StoreFromPtrToReg64 [A],[B]
   14461 :StoreRegOnStackSub64 [B],36
   14462 :StoreFromPtrToReg64 [A],[B]
   14463 :StoreRegOnStackSub64 [B],28
   14464 :GetFromStackSub64 [B],28
   14465 :StoreRegOnStackSub64 [B],36
   14466 :StoreFromPtrToReg64 [A],[B]

   //Line:47

   14467 :StoreRegOnStackSub64 [B],8
   14468 :GetFromStackSub64 [B],8
   14469 :StoreRegOnStackSub64 [B],20
   14470 :Debug_LineEnter 
   14471 :GetPointerOfStackSub [B],20
   14472 :StoreRegToReg64 [E],[C]
   14473 :StoreRegToReg64 [B],[D]
   14474 :StoreRegToReg64 [C],[E]
   14475 :Call {ULang:Vec3f_t<sint32>:(&Compound_Sub&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut}
   14479 :Debug_LineEnter 
   14480 :GetFromStackSub64 [A],20
   14481 :StoreRegOnStackSub64 [A],20
   14482 :GetFromStackSub32 [A],12
   14483 :StoreRegOnStackSub32 [A],12
   14484 :GetPointerOfStackSub [A],20
   14485 :StoreRegToReg64 [A],[F]
   14486 :Store64 [A], 44
   14490 :DecrementStackPointer [A]
   14491 :Debug_FuncEnd 
   14492 :Ret 
---ULang:Vec4f_t<float32>:(&_new&)^ULang:Vec4f_t<float32>&: 
   14493 :Debug_FuncStart 
   14494 :Debug_FuncEnd 
   14495 :Ret 
---ULang:Native:OS_PrintChar^c: 
   14496 :Debug_FuncStart 

   //File:/OS_Calls.uc
   //Line:9

   14497 :Debug_LineEnter 
   14498 :StoreRegToReg8 [D],[A]
   14499 :StoreRegToReg8 [A],[D]
   14500 :Call {__LogChar^c}
   14504 :Debug_FuncEnd 
   14505 :Ret 
---ULang:Native:OS_PrintSpan^c[&]imut,uptr: 
   14506 :Debug_FuncStart 

   //File:/OS_Calls.uc
   //Line:20

   14507 :Debug_LineEnter 
   14508 :StoreRegToReg64 [D],[A]
   14509 :StoreRegToReg64 [E],[B]
   14510 :StoreRegToReg64 [A],[D]
   14511 :StoreRegToReg64 [B],[E]
   14512 :Call {__LogBuffer^c[&]imut,uptr}
   14516 :Debug_FuncEnd 
   14517 :Ret 
---ULang:Native:OS_PrintClear: 
   14518 :Debug_FuncStart 
   14519 :Debug_FuncEnd 
   14520 :Ret 
---ULang:Native:OS_Malloc^uptr: 
   14521 :Debug_FuncStart 

   //File:/OS_Calls.uc
   //Line:29

   14522 :Debug_LineEnter 
   14523 :StoreRegToReg64 [D],[A]
   14524 :StoreRegToReg64 [A],[D]
   14525 :Call {__Malloc^uptr}
   14529 :Debug_FuncEnd 
   14530 :Ret 
---ULang:Native:OS_Free^u8[&]: 
   14531 :Debug_FuncStart 

   //File:/OS_Calls.uc
   //Line:36

   14532 :Debug_LineEnter 
   14533 :StoreRegToReg64 [D],[A]
   14534 :StoreRegToReg64 [A],[D]
   14535 :Call {__Free^u8[&]}
   14539 :Debug_FuncEnd 
   14540 :Ret 
---__Log^c[&]imut: 
   14541 :Debug_FuncStart 
   14542 :CppCallNamed "__Log"
   14543 :Debug_FuncEnd 
   14544 :Ret 
---__LogChar^c: 
   14545 :Debug_FuncStart 
   14546 :Ins 223:3,204,204
   14547 :Debug_FuncEnd 
   14548 :Ret 
---__LogBuffer^c[&]imut,uptr: 
   14549 :Debug_FuncStart 
   14550 :Ins 224:3,4,204
   14551 :Debug_FuncEnd 
   14552 :Ret 
---__ReadChar: 
   14553 :Debug_FuncStart 
   14554 :Ins 225:5,204,204
   14555 :Debug_FuncEnd 
   14556 :Ret 
---__Malloc^uptr: 
   14557 :Debug_FuncStart 
   14558 :Malloc [D],[F]
   14559 :Debug_FuncEnd 
   14560 :Ret 
---__Free^u8[&]: 
   14561 :Debug_FuncStart 
   14562 :Free [D]
   14563 :Debug_FuncEnd 
   14564 :Ret 
---__OpenFile^c[&],uptr: 
   14565 :Debug_FuncStart 
   14566 :CppCallNamed "__OpenFile"
   14567 :Debug_FuncEnd 
   14568 :Ret 
---__CloseFile^uptr: 
   14569 :Debug_FuncStart 
   14570 :CppCallNamed "__CloseFile"
   14571 :Debug_FuncEnd 
   14572 :Ret 
---__IsFileOpen^uptr: 
   14573 :Debug_FuncStart 
   14574 :CppCallNamed "__IsFileOpen"
   14575 :Debug_FuncEnd 
   14576 :Ret 

