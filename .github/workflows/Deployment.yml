name: Deployment

on: 
  workflow_dispatch:
   inputs:
      VersionNumber:
        description: 'The New Version Number Ex: "1.2.3"'
        required: true
        type: string
        default: "0.0.0"

      IsPreRelease:
        description: 'Is Prelease'
        required: true
        type: boolean
        default: true
      
      LanguageChangelog:
        description: 'The Main Change Log'
        required: true
        type: string
        default: 'added: fixed: removed:'

      ImplementerChangelog:
        description: 'The Change Log for implmenters(People who use this as a Scripting Lang Lib)'
        required: true
        type: string
        default: 'added: fixed: removed:'

      LSPChangelog:
        description: 'The Change Log for Editor Extenions'
        required: true
        type: string
        default: 'added: fixed: removed:'


jobs:
  
  build-Windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Run Premake
        run: ./VS_2019.bat

      - name: Restore cached objs
        id: cache-objs-restore
        uses: actions/cache/restore@v3
        with:
          path: ./Output
          key: ${{ runner.os }}-deployment

      - name: Build 64 bit
        run: |
           cd ./BuildTools
           ./BuildWin64Published.bat

      - name: Build 32 bit
        run: |
           cd ./BuildTools
           ./BuildWin32Published.bat

      - name: Save cached Objs
        if: always()
        id: cache-Objs-save
        uses: actions/cache/save@v3
        with:
          path: ./Output
          key: ${{ steps.cache-objs-restore.outputs.cache-primary-key }}

      - name: Archive Output
        uses: actions/upload-artifact@v3
        with:
          name: Output_Windows
          path: Output/
          retention-days: 1

  build-Linux:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

       - name: Get X11 Packages
         run: sudo apt-get install libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev

       - name: Get OpenGl Packages
         run: sudo apt install mesa-common-dev

      - name: Make a scripts executable
        run: |
          chmod +x ./GNU_Make.sh
          chmod +x ./BuildTools/BuildLinux32Published.sh
          chmod +x ./BuildTools/BuildLinux64Published.sh

          
      - name: Run Premake
        run: ./GNU_Make.sh

      - name: Restore cached objs
        id: cache-objs-restore
        uses: actions/cache/restore@v3
        with:
          path: ./Output
          key: ${{ runner.os }}-deployment

      - name: Build 64 bit
        run: make config=published_linux64 -j4

      - name: Save cached Objs
        if: always()
        id: cache-Objs-save
        uses: actions/cache/save@v3
        with:
          path: ./Output
          key: ${{ steps.cache-objs-restore.outputs.cache-primary-key }}

      - name: Archive Output
        uses: actions/upload-artifact@v3
        with:
          name: Output_Linux
          path: Output/
          retention-days: 1

  build-MacOS:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v3
    
      - name: Make a scripts executable
        run: |
         chmod +x ./GNU_MakeMacOS.sh
         chmod +x ./BuildTools/RunTestsMacOSDebug.sh

      - name: Run Premake
        run: ./GNU_MakeMacOS.sh

      - name: Restore cached objs
        id: cache-objs-restore
        uses: actions/cache/restore@v3
        with:
          path: ./Output
          key: ${{ runner.os }}-deployment

      - name: Build 
        run: make config=published_macos -j4

      - name: Save cached 
        if: always()
        id: cache-Objs-save
        uses: actions/cache/save@v3
        with:
         path: ./Output
         key: ${{ steps.cache-objs-restore.outputs.cache-primary-key }}

      - name: Archive Output
        uses: actions/upload-artifact@v3
        with:
          name: Output_MacOS
          path: Output/
          retention-days: 1

  build-Extensions:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build
        working-directory: ./UCodeLanguageSever/EditorSpecific/VSCode/ucode-language
        run:  npm install
      - uses: lannonbr/vsce-action@3.0.0
        with:
          args: "publish -p $VSCE_TOKEN"
        env:
          VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}

  build-Web:
    runs-on: ubuntu-latest

    outputs:
      myoutput: ${{ steps.step2.outputs.myoutput }}

    steps:
      - uses: actions/checkout@v3

      - name: Build
        run:  echo "Do Build Here"

      - name: Archive Output
        uses: actions/upload-artifact@v3
        with:
          name: Output_Web
          path: Output/

  deployment-GitHub:
    needs: [build-Windows,build-Linux,build-MacOS,build-Web,build-Extensions]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: Build
        run:  echo "Do Build Here"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          release_name: Release ${{ inputs.VersionNumber }}
          body: |
            LanguageChangelog Changelog:
            ${{ inputs.LanguageChangelog }}

            Implementers Changelog:
            ${{ inputs.ImplementerChangelog }}

            LSP Changelog:
            ${{ inputs.LSPChangelog }}

          draft: false
          prerelease: ${{ inputs.IsPreRelease }}
          tag_name: Release
      
      - name: Upload UCodeLangCAPI
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./UCodeLang/UCodeLang/UCodeLangCAPI.h
          asset_name: UCodeLangCAPI.h
          asset_content_type: text/plain 
      
      - name: Upload UCodeLangLibWindows64
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/Win64/Published/UCodeLang.lib
          asset_name: UCodeLang-win64.lib
          asset_content_type: application/octet-stream 

      - name: Upload UCodeLangLibWindows32
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./Output/Win32/Published/UCodeLang.lib
          asset_name: UCodeLang-win32.lib
          asset_content_type: application/octet-stream 

      - name: Upload UCodeLangCLWindows64
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/UCodelangCL/Win64/Published/uclang.exe
          asset_name: uclang-win64.exe
          asset_content_type: application/octet-stream 

      - name: Upload UCodeLangCLWindows32
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/UCodelangCL/Win32/Published/uclang.exe
          asset_name: uclang-win32.exe
          asset_content_type: application/octet-stream 

      - name: Upload UCodeLangSeverWindows64
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/UCodeLanguageSever/Win64/Published/uclanglsp.exe
          asset_name: uclanglsp-win64.exe
          asset_content_type: application/octet-stream 

      - name: Upload UCodeLangSeverWindows32
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/UCodeLanguageSever/Win32/Published/uclanglsp.exe
          asset_name: uclanglsp-win32.exe
          asset_content_type: application/octet-stream 