
|(&StaticInit&)[] -> void:;

|(&StaticUnload&)[] -> void:;

|(&threadInit&)[] -> void:;

|(&threadUnload&)[] -> void:;

|putchar[int8 Val] -> void:

 [Block:0]


//Variable:putchar:Val

   ret;

|malloc[int64 Size] -> void*:

 [Block:0]


//Variable:malloc:Size

   ret;

|free[void* Block] -> void:

 [Block:0]


//Variable:free:Block

   ret;

|ULang:Native:OS_PrintChar^c[int8 Value] -> void:

 [Block:0]


//Variable:ULang:Native:OS_PrintChar:Value
//File:/OS_Calls.uc
//Line:7

   int8 A = Value;
   void B = putchar(A);
   ret;

|ULang:Native:OS_PrintSpan^c[&]imut,uptr[void* Buffer,int64 Size] -> void:

 [Block:0]


//Variable:ULang:Native:OS_PrintSpan:Buffer
//Variable:ULang:Native:OS_PrintSpan:Size
//File:/OS_Calls.uc
//Line:16

   int64 A;

//Variable:ULang:Native:OS_PrintSpan:2624469285312:i

   int32 B = 0;
   A = B;

   _label1:

   int64 C = A;
   int64 D = Size;
   int8 E = C<D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:17

   void* G = Buffer;
   int64 H = A;
   int64 I = 1;
   int64 J = H*I;
   void* K = G+J;
   int8 L = *K;
   void M = ULang:Native:OS_PrintChar^c(L);

//Line:16

   int64 N = A;
   int64 O = 1;
   int64 P = N+O;
   A = P;
   goto _label1;

   _label0:

   ret;

|ULang:Native:OS_PrintClear[] -> void:

 [Block:0]

   ret;

|ULang:Native:OS_Malloc^uptr[int64 Size] -> void:

 [Block:0]


//Variable:ULang:Native:OS_Malloc:Size
//File:/OS_Calls.uc
//Line:27

   int64 A = Size;
   void* B = malloc(A);
   ret;

|ULang:Native:OS_Free^u8[&][void* Block] -> void:

 [Block:0]


//Variable:ULang:Native:OS_Free:Block
//File:/OS_Calls.uc
//Line:34

   void* A = Block;
   void B = free(A);
   ret;

