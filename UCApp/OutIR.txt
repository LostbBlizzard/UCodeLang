$ULang:Debugvtable_type
 _tepfptr|ULang:Debug:ToString __0; 
 _tepfptr|ULang:Debug:ToStringV2 __1; 
 _tepfptr|ULang:Debug:(&_drop&) __2; 

$_tepfptr|ULang:Debug:ToString = |[] -> int32;

$_tepfptr|ULang:Debug:ToStringV2 = |[%Class*] -> int32;

$%Class

$_tepfptr|ULang:Debug:(&_drop&) = |[%Class*] -> void;

$ULang:ColorRGB
 float32 __0; 
 float32 __1; 
 float32 __2; 

$ULang:Color
 float32 __0; 
 float32 __1; 
 float32 __2; 
 float32 __3; 

$ULang:Color24
 int8 __0; 
 int8 __1; 
 int8 __2; 

$ULang:Color32
 int8 __0; 
 int8 __1; 
 int8 __2; 
 int8 __3; 

$ULang:Compiler

$ULang:Empty

$ULang:LowLevel

$ULang:Math

$ULang:Fmt

$ULang:OpenedFile

$ULang:OpenFileError

$ULang:File

$ULang:Writer

$ULang:Future

$ULang:Thread

$ULang:Path

$ULang:Mat4x4_t<float32>

$ULang:Range_t<uintptr>
 int64 __0; 
 int64 __1; 

$ULang:StringSpan_t<char>
 void* __0; 
 int64 __1; 

$ULang:Span<char>
 void* __0; 
 int64 __1; 

$ULang:String_t<char>
 ULang:Vector<char> __0; 

$ULang:Vector<char>
 void* __0; 
 int64 __1; 
 int64 __2; 

$ULang:Result<ULang:OpenedFile,ULang:OpenFileError>
 int8 __0; 
 ULang:Result<ULang:OpenedFile,ULang:OpenFileError>u __1; 

union ULang:Result<ULang:OpenedFile,ULang:OpenFileError>u
 ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Val! __0; 
 ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Err! __1; 

$ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Val!
 ULang:OpenedFile __0; 

$ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:Err!
 ULang:OpenFileError __0; 

$ULang:Result<ULang:String_t<char>,ULang:OpenFileError>
 int8 __0; 
 ULang:Result<ULang:String_t<char>,ULang:OpenFileError>u __1; 

union ULang:Result<ULang:String_t<char>,ULang:OpenFileError>u
 ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Val! __0; 
 ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Err! __1; 

$ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Val!
 ULang:String_t<char> __0; 

$ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:Err!
 ULang:OpenFileError __0; 

$ULang:Vector<uint8>
 void* __0; 
 int64 __1; 
 int64 __2; 

$ULang:Span<uint8>
 void* __0; 
 int64 __1; 

$ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>
 int8 __0; 
 ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>u __1; 

union ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>u
 ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Val! __0; 
 ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Err! __1; 

$ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Val!
 ULang:Vector<uint8> __0; 

$ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:Err!
 ULang:OpenFileError __0; 

$ULang:Ptr<sint32>
 void* __0; 

$ULang:Vec2f_t<float32>
 float32 __0; 
 float32 __1; 

$ULang:Ptr<ULang:Vec2f_t<float32>>
 ULang:Vec2f_t<float32>* __0; 

$ULang:Unique_ptr<sint32>
 void* __0; 

$ULang:Vector<sint32>
 void* __0; 
 int64 __1; 
 int64 __2; 

$ULang:Span<sint32>
 void* __0; 
 int64 __1; 

$ULang:Ptr<ULang:Empty>
 ULang:Empty* __0; 

$ULang:String_t<uft8>
 ULang:Vector<uft8> __0; 

$ULang:Vector<uft8>
 void* __0; 
 int64 __1; 
 int64 __2; 

$ULang:Span<uft8>
 void* __0; 
 int64 __1; 

$ULang:StringSpan_t<uft8>
 void* __0; 
 int64 __1; 

$ULang:String_t<uft16>
 ULang:Vector<uft16> __0; 

$ULang:Vector<uft16>
 void* __0; 
 int64 __1; 
 int64 __2; 

$ULang:Span<uft16>
 void* __0; 
 int64 __1; 

$ULang:StringSpan_t<uft16>
 void* __0; 
 int64 __1; 

$ULang:String_t<uft32>
 ULang:Vector<uft32> __0; 

$ULang:Vector<uft32>
 void* __0; 
 int64 __1; 
 int64 __2; 

$ULang:Span<uft32>
 void* __0; 
 int64 __1; 

$ULang:StringSpan_t<uft32>
 void* __0; 
 int64 __1; 

$ULang:Vec2i_t<sint32>
 int32 __0; 
 int32 __1; 

$ULang:Vec3f_t<float32>
 float32 __0; 
 float32 __1; 
 float32 __2; 

$ULang:Vec3f_t<sint32>
 int32 __0; 
 int32 __1; 
 int32 __2; 

$ULang:Vec2f_t<sint32>
 int32 __0; 
 int32 __1; 

$ULang:Vec4f_t<float32>
 float32 __0; 
 float32 __1; 
 float32 __2; 
 float32 __3; 

$ULang:Debug%Class
 int32 __0; 

static uint8[/11]:int8 .Const.SpanString:Hello World= [72,101,108,108,111,32,87,111,114,108,100]
static uint8[/5]:int8 .Const.SpanString:Hello= [72,101,108,108,111]
static uint8[/5]:int8 .Const.SpanString:World= [87,111,114,108,100]
static uint8[/11]:int8 .Const.SpanString:Bello World= [66,101,108,108,111,32,87,111,114,108,100]

|(&StaticInit&)[] -> void:;

|(&StaticUnload&)[] -> void:;

|(&threadInit&)[] -> void:;

|(&threadUnload&)[] -> void:;

//EntryPoint 
|main[] -> float32:

 [Block:0]


//File:/Main.uc
//Line:5

   float32 A = 2.000000;
   ret = A;
   ret;

|main2[] -> float32:

 [Block:0]


//File:/Main.uc
//Line:7

   float32 A = 2.500000;
   ret = A;
   ret;

|ULang:ColorRGB:(&_init&)[ULang:ColorRGB* (&this&)] -> void:

 [Block:0]


//File:/Graphics/Color.uc
//Line:4

   float32 A = 1.000000;
   (&this&)->__0 = A;

//Line:5

   float32 B = 1.000000;
   (&this&)->__1 = B;

//Line:6

   float32 C = 1.000000;
   (&this&)->__2 = C;
   ret;

|ULang:ColorRGB:(&_new&)^ULang:ColorRGB&[ULang:ColorRGB* (&this&)] -> void:

 [Block:0]


//Variable:ULang:ColorRGB:(&_new&):(&this&)

   ULang:ColorRGB* A = (&this&);
   void B = ULang:ColorRGB:(&_init&)(A);
   ret;

|ULang:ColorRGB:(&_new&)^ULang:ColorRGB&,f32,f32,f32[ULang:ColorRGB* (&this&),float32 R,float32 G,float32 B] -> void:

 [Block:0]


//Variable:ULang:ColorRGB:(&_new&):(&this&)
//Variable:ULang:ColorRGB:(&_new&):R
//Variable:ULang:ColorRGB:(&_new&):G
//Variable:ULang:ColorRGB:(&_new&):B

   ULang:ColorRGB* A = (&this&);
   void B = ULang:ColorRGB:(&_init&)(A);

//File:/Graphics/Color.uc
//Line:10

   float32 C = R;
   ULang:ColorRGB* D = (&this&);
   D->__0 = C;

//Line:11

   float32 E = G;
   ULang:ColorRGB* F = (&this&);
   F->__1 = E;

//Line:12

   float32 G = B;
   ULang:ColorRGB* H = (&this&);
   H->__2 = G;
   ret;

|ULang:ColorRGB:(&equal&)^ULang:ColorRGB&,ULang:ColorRGB&imut[ULang:ColorRGB* (&this&),ULang:ColorRGB* other] -> int8:

 [Block:0]


//Variable:ULang:ColorRGB:(&equal&):(&this&)
//Variable:ULang:ColorRGB:(&equal&):other

   ULang:ColorRGB* A = (&this&);

//File:/Graphics/Color.uc
//Line:15

   float32 B = A->__2;
   float32 C = other->__2;
   int8 D = B==C;
   ULang:ColorRGB* E = (&this&);
   float32 F = E->__1;
   float32 G = other->__1;
   int8 H = F==G;
   int8 I = D&&H;
   ULang:ColorRGB* J = (&this&);
   float32 K = J->__0;
   float32 L = other->__0;
   int8 M = K==L;
   int8 N = I&&M;
   ret = N;
   ret;

|ULang:ColorRGB:(&notequal&)^ULang:ColorRGB&,ULang:ColorRGB&imut[ULang:ColorRGB* (&this&),ULang:ColorRGB* other] -> int8:

 [Block:0]


//Variable:ULang:ColorRGB:(&notequal&):(&this&)
//Variable:ULang:ColorRGB:(&notequal&):other
//File:/Graphics/Color.uc
//Line:18

   ULang:ColorRGB* A = (&this&);
   ULang:ColorRGB* B = A;
   ULang:ColorRGB* C = other;
   int8 D = ULang:ColorRGB:(&equal&)^ULang:ColorRGB&,ULang:ColorRGB&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:ColorRGB:(&Cast&)^ULang:ColorRGB&imut[ULang:ColorRGB* (&this&)] -> ULang:Color24:

 [Block:0]


//Variable:ULang:ColorRGB:(&Cast&):(&this&)
//File:/Graphics/Color.uc
//Line:0

   ULang:Color24 A;
   ULang:Color24* B = &A;

//Line:21

   float32 C = (&this&)->__0;
   float32 D = 255.000000;
   float32 E = C*D;
   int32 F = E -> int32;
   int8 G = F -> sint8;
   float32 H = (&this&)->__1;
   float32 I = 255.000000;
   float32 J = H*I;
   int32 K = J -> int32;
   int8 L = K -> sint8;
   float32 M = (&this&)->__2;
   float32 N = 255.000000;
   float32 O = M*N;
   int32 P = O -> int32;
   int8 Q = P -> sint8;
   void R = ULang:Color24:(&_new&)^ULang:Color24&,u8,u8,u8(B,G,L,Q);
   ret = A;
   ret;

|ULang:Color:(&_init&)[ULang:Color* (&this&)] -> void:

 [Block:0]


//File:/Graphics/Color.uc
//Line:24

   float32 A = 1.000000;
   (&this&)->__0 = A;

//Line:25

   float32 B = 1.000000;
   (&this&)->__1 = B;

//Line:26

   float32 C = 1.000000;
   (&this&)->__2 = C;

//Line:27

   float32 D = 1.000000;
   (&this&)->__3 = D;
   ret;

|ULang:Color:(&_new&)^ULang:Color&[ULang:Color* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Color:(&_new&):(&this&)

   ULang:Color* A = (&this&);
   void B = ULang:Color:(&_init&)(A);
   ret;

|ULang:Color:(&_new&)^ULang:Color&,f32,f32,f32,f32[ULang:Color* (&this&),float32 R,float32 G,float32 B,float32 A] -> void:

 [Block:0]


//Variable:ULang:Color:(&_new&):(&this&)
//Variable:ULang:Color:(&_new&):R
//Variable:ULang:Color:(&_new&):G
//Variable:ULang:Color:(&_new&):B
//Variable:ULang:Color:(&_new&):A

   ULang:Color* A = (&this&);
   void B = ULang:Color:(&_init&)(A);

//File:/Graphics/Color.uc
//Line:31

   float32 C = R;
   ULang:Color* D = (&this&);
   D->__0 = C;

//Line:32

   float32 E = G;
   ULang:Color* F = (&this&);
   F->__1 = E;

//Line:33

   float32 G = B;
   ULang:Color* H = (&this&);
   H->__2 = G;

//Line:34

   float32 I = A;
   ULang:Color* J = (&this&);
   J->__3 = I;
   ret;

|ULang:Color:(&_new&)^ULang:Color&,ULang:ColorRGB&imut,f32[ULang:Color* (&this&),ULang:ColorRGB* color,float32 A] -> void:

 [Block:0]


//Variable:ULang:Color:(&_new&):(&this&)
//Variable:ULang:Color:(&_new&):color
//Variable:ULang:Color:(&_new&):A

   ULang:Color* A = (&this&);
   void B = ULang:Color:(&_init&)(A);

//File:/Graphics/Color.uc
//Line:37

   float32 C = color->__0;
   ULang:Color* D = (&this&);
   D->__0 = C;

//Line:38

   float32 E = color->__1;
   ULang:Color* F = (&this&);
   F->__1 = E;

//Line:39

   float32 G = color->__2;
   ULang:Color* H = (&this&);
   H->__2 = G;

//Line:40

   float32 I = A;
   ULang:Color* J = (&this&);
   J->__3 = I;
   ret;

|ULang:Color:WithOutOpacity^ULang:Color&[ULang:Color* (&this&)] -> ULang:ColorRGB:

 [Block:0]


//Variable:ULang:Color:WithOutOpacity:(&this&)
//File:/Graphics/Color.uc
//Line:0

   ULang:ColorRGB A;
   ULang:ColorRGB* B = &A;

//Line:43

   float32 C = (&this&)->__0;
   float32 D = (&this&)->__1;
   float32 E = (&this&)->__2;
   void F = ULang:ColorRGB:(&_new&)^ULang:ColorRGB&,f32,f32,f32(B,C,D,E);
   ret = A;
   ret;

|ULang:Color:(&equal&)^ULang:Color&,ULang:Color&imut[ULang:Color* (&this&),ULang:Color* other] -> int8:

 [Block:0]


//Variable:ULang:Color:(&equal&):(&this&)
//Variable:ULang:Color:(&equal&):other

   ULang:Color* A = (&this&);

//File:/Graphics/Color.uc
//Line:46

   float32 B = A->__3;
   float32 C = other->__3;
   int8 D = B==C;
   ULang:Color* E = (&this&);
   float32 F = E->__2;
   float32 G = other->__2;
   int8 H = F==G;
   int8 I = D&&H;
   ULang:Color* J = (&this&);
   float32 K = J->__1;
   float32 L = other->__1;
   int8 M = K==L;
   int8 N = I&&M;
   ULang:Color* O = (&this&);
   float32 P = O->__0;
   float32 Q = other->__0;
   int8 R = P==Q;
   int8 S = N&&R;
   ret = S;
   ret;

|ULang:Color:(&notequal&)^ULang:Color&,ULang:Color&imut[ULang:Color* (&this&),ULang:Color* other] -> int8:

 [Block:0]


//Variable:ULang:Color:(&notequal&):(&this&)
//Variable:ULang:Color:(&notequal&):other
//File:/Graphics/Color.uc
//Line:49

   ULang:Color* A = (&this&);
   ULang:Color* B = A;
   ULang:Color* C = other;
   int8 D = ULang:Color:(&equal&)^ULang:Color&,ULang:Color&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:Color:(&Cast&)^ULang:Color&imut[ULang:Color* (&this&)] -> ULang:Color32:

 [Block:0]


//Variable:ULang:Color:(&Cast&):(&this&)
//File:/Graphics/Color.uc
//Line:0

   ULang:Color32 A;
   ULang:Color32* B = &A;

//Line:52

   float32 C = (&this&)->__0;
   float32 D = 255.000000;
   float32 E = C*D;
   int32 F = E -> int32;
   int8 G = F -> sint8;
   float32 H = (&this&)->__1;
   float32 I = 255.000000;
   float32 J = H*I;
   int32 K = J -> int32;
   int8 L = K -> sint8;
   float32 M = (&this&)->__2;
   float32 N = 255.000000;
   float32 O = M*N;
   int32 P = O -> int32;
   int8 Q = P -> sint8;
   float32 R = (&this&)->__3;
   float32 S = 255.000000;
   float32 T = R*S;
   int32 U = T -> int32;
   int8 V = U -> sint8;
   void W = ULang:Color32:(&_new&)^ULang:Color32&,u8,u8,u8,u8(B,G,L,Q,V);
   ret = A;
   ret;

|ULang:Color24:(&_init&)[ULang:Color24* (&this&)] -> void:

 [Block:0]


//File:/Graphics/Color32.uc
//Line:3

   int8 A = -1;
   (&this&)->__0 = A;

//Line:4

   int8 B = -1;
   (&this&)->__1 = B;

//Line:5

   int8 C = -1;
   (&this&)->__2 = C;
   ret;

|ULang:Color24:(&_new&)^ULang:Color24&[ULang:Color24* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Color24:(&_new&):(&this&)

   ULang:Color24* A = (&this&);
   void B = ULang:Color24:(&_init&)(A);
   ret;

|ULang:Color24:(&_new&)^ULang:Color24&,u8,u8,u8[ULang:Color24* (&this&),int8 r,int8 g,int8 b] -> void:

 [Block:0]


//Variable:ULang:Color24:(&_new&):(&this&)
//Variable:ULang:Color24:(&_new&):r
//Variable:ULang:Color24:(&_new&):g
//Variable:ULang:Color24:(&_new&):b

   ULang:Color24* A = (&this&);
   void B = ULang:Color24:(&_init&)(A);

//File:/Graphics/Color32.uc
//Line:9

   int8 C = r;
   ULang:Color24* D = (&this&);
   D->__0 = C;

//Line:10

   int8 E = g;
   ULang:Color24* F = (&this&);
   F->__1 = E;

//Line:11

   int8 G = b;
   ULang:Color24* H = (&this&);
   H->__2 = G;
   ret;

|ULang:Color24:(&equal&)^ULang:Color24&,ULang:Color24&imut[ULang:Color24* (&this&),ULang:Color24* other] -> int8:

 [Block:0]


//Variable:ULang:Color24:(&equal&):(&this&)
//Variable:ULang:Color24:(&equal&):other

   ULang:Color24* A = (&this&);

//File:/Graphics/Color32.uc
//Line:14

   int8 B = A->__2;
   int8 C = other->__2;
   int8 D = B==C;
   ULang:Color24* E = (&this&);
   int8 F = E->__1;
   int8 G = other->__1;
   int8 H = F==G;
   int8 I = D&&H;
   ULang:Color24* J = (&this&);
   int8 K = J->__0;
   int8 L = other->__0;
   int8 M = K==L;
   int8 N = I&&M;
   ret = N;
   ret;

|ULang:Color24:(&notequal&)^ULang:Color24&,ULang:Color24&imut[ULang:Color24* (&this&),ULang:Color24* other] -> int8:

 [Block:0]


//Variable:ULang:Color24:(&notequal&):(&this&)
//Variable:ULang:Color24:(&notequal&):other
//File:/Graphics/Color32.uc
//Line:17

   ULang:Color24* A = (&this&);
   ULang:Color24* B = A;
   ULang:Color24* C = other;
   int8 D = ULang:Color24:(&equal&)^ULang:Color24&,ULang:Color24&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:Color24:(&Cast&)^ULang:Color24&imut[ULang:Color24* (&this&)] -> ULang:ColorRGB:

 [Block:0]


//Variable:ULang:Color24:(&Cast&):(&this&)
//File:/Graphics/Color32.uc
//Line:0

   ULang:ColorRGB A;
   ULang:ColorRGB* B = &A;

//Line:20

   int8 C = (&this&)->__0;
   int32 D = C -> uint32;
   float32 E = D -> float32;
   float32 F = 255.000000;
   float32 G = E/F;
   int8 H = (&this&)->__1;
   int32 I = H -> uint32;
   float32 J = I -> float32;
   float32 K = 255.000000;
   float32 L = J/K;
   int8 M = (&this&)->__2;
   int32 N = M -> uint32;
   float32 O = N -> float32;
   float32 P = 255.000000;
   float32 Q = O/P;
   void R = ULang:ColorRGB:(&_new&)^ULang:ColorRGB&,f32,f32,f32(B,G,L,Q);
   ret = A;
   ret;

|ULang:Color32:(&_init&)[ULang:Color32* (&this&)] -> void:

 [Block:0]


//File:/Graphics/Color32.uc
//Line:23

   int8 A = -1;
   (&this&)->__0 = A;

//Line:24

   int8 B = -1;
   (&this&)->__1 = B;

//Line:25

   int8 C = -1;
   (&this&)->__2 = C;

//Line:26

   int8 D = -1;
   (&this&)->__3 = D;
   ret;

|ULang:Color32:(&_new&)^ULang:Color32&[ULang:Color32* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Color32:(&_new&):(&this&)

   ULang:Color32* A = (&this&);
   void B = ULang:Color32:(&_init&)(A);
   ret;

|ULang:Color32:(&_new&)^ULang:Color32&,u8,u8,u8,u8[ULang:Color32* (&this&),int8 r,int8 g,int8 b,int8 a] -> void:

 [Block:0]


//Variable:ULang:Color32:(&_new&):(&this&)
//Variable:ULang:Color32:(&_new&):r
//Variable:ULang:Color32:(&_new&):g
//Variable:ULang:Color32:(&_new&):b
//Variable:ULang:Color32:(&_new&):a

   ULang:Color32* A = (&this&);
   void B = ULang:Color32:(&_init&)(A);

//File:/Graphics/Color32.uc
//Line:30

   int8 C = r;
   ULang:Color32* D = (&this&);
   D->__0 = C;

//Line:31

   int8 E = g;
   ULang:Color32* F = (&this&);
   F->__1 = E;

//Line:32

   int8 G = b;
   ULang:Color32* H = (&this&);
   H->__2 = G;

//Line:33

   int8 I = a;
   ULang:Color32* J = (&this&);
   J->__3 = I;
   ret;

|ULang:Color32:(&_new&)^ULang:Color32&,ULang:Color24&imut,u8[ULang:Color32* (&this&),ULang:Color24* color,int8 a] -> void:

 [Block:0]


//Variable:ULang:Color32:(&_new&):(&this&)
//Variable:ULang:Color32:(&_new&):color
//Variable:ULang:Color32:(&_new&):a

   ULang:Color32* A = (&this&);
   void B = ULang:Color32:(&_init&)(A);

//File:/Graphics/Color32.uc
//Line:36

   int8 C = color->__0;
   ULang:Color32* D = (&this&);
   D->__0 = C;

//Line:37

   int8 E = color->__1;
   ULang:Color32* F = (&this&);
   F->__1 = E;

//Line:38

   int8 G = color->__2;
   ULang:Color32* H = (&this&);
   H->__2 = G;

//Line:39

   int8 I = a;
   ULang:Color32* J = (&this&);
   J->__3 = I;
   ret;

|ULang:Color32:WithOutOpacity^ULang:Color32&[ULang:Color32* (&this&)] -> ULang:Color24:

 [Block:0]


//Variable:ULang:Color32:WithOutOpacity:(&this&)
//File:/Graphics/Color32.uc
//Line:0

   ULang:Color24 A;
   ULang:Color24* B = &A;

//Line:42

   int8 C = (&this&)->__0;
   int8 D = (&this&)->__1;
   int8 E = (&this&)->__2;
   void F = ULang:Color24:(&_new&)^ULang:Color24&,u8,u8,u8(B,C,D,E);
   ret = A;
   ret;

|ULang:Color32:(&equal&)^ULang:Color32&,ULang:Color32&imut[ULang:Color32* (&this&),ULang:Color32* other] -> int8:

 [Block:0]


//Variable:ULang:Color32:(&equal&):(&this&)
//Variable:ULang:Color32:(&equal&):other

   ULang:Color32* A = (&this&);

//File:/Graphics/Color32.uc
//Line:45

   int8 B = A->__3;
   int8 C = other->__3;
   int8 D = B==C;
   ULang:Color32* E = (&this&);
   int8 F = E->__2;
   int8 G = other->__2;
   int8 H = F==G;
   int8 I = D&&H;
   ULang:Color32* J = (&this&);
   int8 K = J->__1;
   int8 L = other->__1;
   int8 M = K==L;
   int8 N = I&&M;
   ULang:Color32* O = (&this&);
   int8 P = O->__0;
   int8 Q = other->__0;
   int8 R = P==Q;
   int8 S = N&&R;
   ret = S;
   ret;

|ULang:Color32:(&notequal&)^ULang:Color32&,ULang:Color32&imut[ULang:Color32* (&this&),ULang:Color32* other] -> int8:

 [Block:0]


//Variable:ULang:Color32:(&notequal&):(&this&)
//Variable:ULang:Color32:(&notequal&):other
//File:/Graphics/Color32.uc
//Line:48

   ULang:Color32* A = (&this&);
   ULang:Color32* B = A;
   ULang:Color32* C = other;
   int8 D = ULang:Color32:(&equal&)^ULang:Color32&,ULang:Color32&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:Color32:(&Cast&)^ULang:Color32&imut[ULang:Color32* (&this&)] -> ULang:Color:

 [Block:0]


//Variable:ULang:Color32:(&Cast&):(&this&)
//File:/Graphics/Color32.uc
//Line:0

   ULang:Color A;
   ULang:Color* B = &A;

//Line:51

   int8 C = (&this&)->__0;
   int32 D = C -> uint32;
   float32 E = D -> float32;
   float32 F = 255.000000;
   float32 G = E/F;
   int8 H = (&this&)->__1;
   int32 I = H -> uint32;
   float32 J = I -> float32;
   float32 K = 255.000000;
   float32 L = J/K;
   int8 M = (&this&)->__2;
   int32 N = M -> uint32;
   float32 O = N -> float32;
   float32 P = 255.000000;
   float32 Q = O/P;
   int8 R = (&this&)->__3;
   int32 S = R -> uint32;
   float32 T = S -> float32;
   float32 U = 255.000000;
   float32 V = T/U;
   void W = ULang:Color:(&_new&)^ULang:Color&,f32,f32,f32,f32(B,G,L,Q,V);
   ret = A;
   ret;

|ULang:Compiler:Is64Bit[] -> int8:

 [Block:0]


//File:/Helper/Compiler.uc
//Line:3

   int8 A = 1;
   ret = A;
   ret;

|ULang:Compiler:Is32Bit[] -> int8:

 [Block:0]


//File:/Helper/Compiler.uc
//Line:4

   int8 A = 1;
   ret = A;
   ret;

|ULang:Compiler:IsBackendC89[] -> int8:

 [Block:0]


//File:/Helper/Compiler.uc
//Line:6

   int8 A = 1;
   ret = A;
   ret;

|ULang:Compiler:IsBackendUCodeVM[] -> int8:

 [Block:0]


//File:/Helper/Compiler.uc
//Line:7

   int8 A = 1;
   ret = A;
   ret;

|ULang:Compiler:IsBackendWasm[] -> int8:

 [Block:0]


//File:/Helper/Compiler.uc
//Line:8

   int8 A = 1;
   ret = A;
   ret;

|ULang:Compiler:IsBackendVM[] -> int8:

 [Block:0]


//File:/Helper/Compiler.uc
//Line:10

   int8 A = 1;
   ret = A;
   ret;

|ULang:Compiler:(&_new&)^ULang:Compiler&[ULang:Compiler* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Empty:(&_new&)^ULang:Empty&[ULang:Empty* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:LowLevel:Malloc^uptr[int64 Size] -> void:

 [Block:0]


//Variable:ULang:LowLevel:Malloc:Size
//File:/Helper/LowLevel.uc
//Line:3

   int64 A = Size;
   void B = ULang:Native:OS_Malloc^uptr(A);
   ret;

|ULang:LowLevel:Free^u8[&][void* Block] -> void:

 [Block:0]


//Variable:ULang:LowLevel:Free:Block
//File:/Helper/LowLevel.uc
//Line:4

   void* A = Block;
   void B = ULang:Native:OS_Free^u8[&](A);
   ret;

|ULang:LowLevel:Memcopy^u8[&],u8[&],uptr[void* destination,void* source,int64 num] -> void:

 [Block:0]


//Variable:ULang:LowLevel:Memcopy:destination
//Variable:ULang:LowLevel:Memcopy:source
//Variable:ULang:LowLevel:Memcopy:num

   ret;

|ULang:LowLevel:Memmove^u8[&],u8[&],uptr[void* destination,void* source,int64 num] -> void:

 [Block:0]


//Variable:ULang:LowLevel:Memmove:destination
//Variable:ULang:LowLevel:Memmove:source
//Variable:ULang:LowLevel:Memmove:num

   ret;

|ULang:LowLevel:(&_new&)^ULang:LowLevel&[ULang:LowLevel* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Math:(&_new&)^ULang:Math&[ULang:Math* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Fmt:Print^c[int8 Str] -> void:

 [Block:0]


//Variable:ULang:Fmt:Print:Str
//File:/IO/Console/Fmt.uc
//Line:5

   int8 A = Str;
   void B = ULang:Native:OS_PrintChar^c(A);
   ret;

|ULang:Fmt:Print^ULang:StringSpan_t<char>imut[ULang:StringSpan_t<char> Str] -> void:

 [Block:0]


//Variable:ULang:Fmt:Print:Str
//File:/IO/Console/Fmt.uc
//Line:9

   ULang:StringSpan_t<char>* A = &Str;
   void* B = ULang:StringSpan_t<char>:Data^ULang:StringSpan_t<char>&(A);
   ULang:StringSpan_t<char>* C = &Str;
   int64 D = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(C);
   void E = ULang:Native:OS_PrintSpan^c[&]imut,uptr(B,D);
   ret;

|ULang:Fmt:Print^ULang:String_t<char>&imut[ULang:String_t<char>* Str] -> void:

 [Block:0]


//Variable:ULang:Fmt:Print:Str
//File:/IO/Console/Fmt.uc
//Line:12

   ULang:String_t<char>* A = Str;
   ULang:StringSpan_t<char> B = ULang:String_t<char>:iStr^ULang:String_t<char>&imut(A);
   void C = ULang:Fmt:Print^ULang:StringSpan_t<char>imut(B);
   ret;

|ULang:Fmt:Println^c[int8 Str] -> void:

 [Block:0]


//Variable:ULang:Fmt:Println:Str
//File:/IO/Console/Fmt.uc
//Line:15

   int8 A = Str;
   void B = ULang:Fmt:Print^c(A);

//Line:16

   int8 C = 10;
   void D = ULang:Fmt:Print^c(C);
   ret;

|ULang:Fmt:Println^ULang:StringSpan_t<char>imut[ULang:StringSpan_t<char> Str] -> void:

 [Block:0]


//Variable:ULang:Fmt:Println:Str
//File:/IO/Console/Fmt.uc
//Line:19

   ULang:StringSpan_t<char> A = Str;
   void B = ULang:Fmt:Print^ULang:StringSpan_t<char>imut(A);

//Line:20

   int8 C = 10;
   void D = ULang:Fmt:Print^c(C);
   ret;

|ULang:Fmt:Println^ULang:String_t<char>&imut[ULang:String_t<char>* Str] -> void:

 [Block:0]


//Variable:ULang:Fmt:Println:Str
//File:/IO/Console/Fmt.uc
//Line:23

   ULang:String_t<char>* A = Str;
   void B = ULang:Fmt:Print^ULang:String_t<char>&imut(A);

//Line:24

   int8 C = 10;
   void D = ULang:Fmt:Print^c(C);
   ret;

|ULang:Fmt:(&_new&)^ULang:Fmt&[ULang:Fmt* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:OpenedFile:(&_new&)^ULang:OpenedFile&[ULang:OpenedFile* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:OpenFileError:(&_new&)^ULang:OpenFileError&[ULang:OpenFileError* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:File:Open^ULang:StringSpan_t<char>[ULang:StringSpan_t<char> path] -> ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:

 [Block:0]


//Variable:ULang:File:Open:path

   ret;

|ULang:File:Open^ULang:String_t<char>&imut[ULang:String_t<char>* path] -> ULang:Result<ULang:OpenedFile,ULang:OpenFileError>:

 [Block:0]


//Variable:ULang:File:Open:path

   ret;

|ULang:File:GetString^ULang:StringSpan_t<char>[ULang:StringSpan_t<char> path] -> ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:

 [Block:0]


//Variable:ULang:File:GetString:path

   ret;

|ULang:File:GetString^ULang:String_t<char>&imut[ULang:String_t<char>* path] -> ULang:Result<ULang:String_t<char>,ULang:OpenFileError>:

 [Block:0]


//Variable:ULang:File:GetString:path

   ret;

|ULang:File:GetBytes^ULang:StringSpan_t<char>[ULang:StringSpan_t<char> path] -> ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:

 [Block:0]


//Variable:ULang:File:GetBytes:path

   ret;

|ULang:File:GetBytes^ULang:String_t<char>&imut[ULang:String_t<char>* path] -> ULang:Result<ULang:Vector<uint8>,ULang:OpenFileError>:

 [Block:0]


//Variable:ULang:File:GetBytes:path

   ret;

|ULang:File:(&_new&)^ULang:File&[ULang:File* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Writer:(&_new&)^ULang:Writer&[ULang:Writer* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Tests:Color1[] -> int8:

 [Block:0]


//File:/Tests/Color.uc
//Line:4
//Variable:ULang:Tests:Color1:white

   ULang:Color A;

//Line:0

   ULang:Color* B = &A;
   void C = ULang:Color:(&_new&)^ULang:Color&(B);

//Line:4
//Line:5
//Variable:ULang:Tests:Color1:r

   ULang:Color32 D;
   ULang:Color* E = &A;
   ULang:Color32 F = ULang:Color:(&Cast&)^ULang:Color&imut(E);
   D = F;

//Line:6

   ULang:Color32* G = &D;
   ULang:Color32 H;
   ULang:Color32* I = &H;
   void J = ULang:Color32:(&_new&)^ULang:Color32&(I);
   ULang:Color32* K = &H;
   int8 L = ULang:Color32:(&equal&)^ULang:Color32&,ULang:Color32&imut(G,K);
   ret = L;
   ret;

|ULang:Tests:Color2[] -> int8:

 [Block:0]


//File:/Tests/Color.uc
//Line:10
//Variable:ULang:Tests:Color2:white

   ULang:Color32 A;

//Line:0

   ULang:Color32* B = &A;
   void C = ULang:Color32:(&_new&)^ULang:Color32&(B);

//Line:10
//Line:11
//Variable:ULang:Tests:Color2:r

   ULang:Color D;
   ULang:Color32* E = &A;
   ULang:Color F = ULang:Color32:(&Cast&)^ULang:Color32&imut(E);
   D = F;

//Line:12

   ULang:Color* G = &D;
   ULang:Color H;
   ULang:Color* I = &H;
   void J = ULang:Color:(&_new&)^ULang:Color&(I);
   ULang:Color* K = &H;
   int8 L = ULang:Color:(&equal&)^ULang:Color&,ULang:Color&imut(G,K);
   ret = L;
   ret;

|ULang:Tests:Print1[] -> int8:

 [Block:0]


//File:/Tests/IO.uc
//Line:7

   void* A = &.Const.SpanString:Hello World;
   int64 B = 11;
   ULang:StringSpan_t<char> C;
   ULang:StringSpan_t<char>* D = &C;
   void E = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(D,A,B);
   void F = ULang:Fmt:Println^ULang:StringSpan_t<char>imut(C);

//Line:8

   int8 G = 1;
   ret = G;
   ret;

|ULang:Tests:Print2[] -> int8:

 [Block:0]


//File:/Tests/IO.uc
//Line:12

   int8 A = 72;
   void B = ULang:Fmt:Print^c(A);

//Line:13

   int8 C = 105;
   void D = ULang:Fmt:Println^c(C);

//Line:14

   int8 E = 1;
   ret = E;
   ret;

|ULang:Tests:Max_1[] -> int8:

 [Block:0]


//File:/Tests/Math.uc
//Line:7

   int32 A = 5;
   int32 B = 2;
   int32 C = ULang:Math:Max<sint32>^i32,i32(A,B);
   int32 D = 5;
   int8 E = C==D;
   ret = E;
   ret;

|ULang:Tests:Max_2[] -> int8:

 [Block:0]


//File:/Tests/Math.uc
//Line:11

   int32 A = 2;
   int32 B = 5;
   int32 C = ULang:Math:Max<sint32>^i32,i32(A,B);
   int32 D = 5;
   int8 E = C==D;
   ret = E;
   ret;

|ULang:Tests:Min_1[] -> int8:

 [Block:0]


//File:/Tests/Math.uc
//Line:15

   int32 A = 5;
   int32 B = 2;
   int32 C = ULang:Math:Min<sint32>^i32,i32(A,B);
   int32 D = 2;
   int8 E = C==D;
   ret = E;
   ret;

|ULang:Tests:Min_2[] -> int8:

 [Block:0]


//File:/Tests/Math.uc
//Line:19

   int32 A = 2;
   int32 B = 5;
   int32 C = ULang:Math:Min<sint32>^i32,i32(A,B);
   int32 D = 2;
   int8 E = C==D;
   ret = E;
   ret;

|ULang:Tests:Ptr_1[] -> int8:

 [Block:0]


//File:/Tests/Ptr.uc
//Line:6
//Variable:ULang:Tests:Ptr_1:r

   int32 A;
   int32 B = 5;
   A = B;

//Line:7
//Variable:ULang:Tests:Ptr_1:Vptr

   ULang:Ptr<sint32> C;
   void* D = &A;
   ULang:Ptr<sint32> E = ULang:ptr<sint32>^i32&(D);
   C = E;

//Line:9

   int32 F = 10;
   ULang:Ptr<sint32>* G = &C;
   void* H = ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&(G);
   *H = F;

//Line:12

   int32 I = A;
   int32 J = 10;
   int8 K = I==J;
   ret = K;
   ret;

|ULang:Tests:Ptr_2[] -> int8:

 [Block:0]


//File:/Tests/Ptr.uc
//Line:16
//Variable:ULang:Tests:Ptr_2:r

   int32 A;
   int32 B = 5;
   A = B;

//Line:17
//Variable:ULang:Tests:Ptr_2:Vptr

   ULang:Ptr<sint32> C;
   void* D = &A;
   ULang:Ptr<sint32> E = ULang:ptr<sint32>^i32&(D);
   C = E;

//Line:19

   ULang:Ptr<sint32>* F = &C;
   int32 G = 10;
   void* H = &G;
   void I = ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32&imut(F,H);

//Line:22

   int32 J = A;
   int32 K = 10;
   int8 L = J==K;
   ret = L;
   ret;

|ULang:Tests:Ptr_3[] -> int8:

 [Block:0]


//File:/Tests/Ptr.uc
//Line:27
//Variable:ULang:Tests:Ptr_3:r

   int32 A;
   int32 B = 5;
   A = B;

//Line:28
//Variable:ULang:Tests:Ptr_3:b

   int32 C;
   int32 D = 8;
   C = D;

//Line:29
//Variable:ULang:Tests:Ptr_3:Vptr

   ULang:Ptr<sint32> E;
   void* F = &A;
   ULang:Ptr<sint32> G = ULang:ptr<sint32>^i32&(F);
   E = G;

//Line:31

   ULang:Ptr<sint32>* H = &E;
   void* I = &C;
   void J = ULang:Ptr<sint32>:ReassignTo^ULang:Ptr<sint32>&,i32&(H,I);

//Line:33

   ULang:Ptr<sint32>* K = &E;
   int32 L = 7;
   void* M = &L;
   void N = ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32&imut(K,M);

//Line:35

   int32 O = C;
   int32 P = 7;
   int8 Q = O==P;
   ret = Q;
   ret;

|ULang:Tests:Ptr_4[] -> int8:

 [Block:0]


//File:/Tests/Ptr.uc
//Line:39
//Variable:ULang:Tests:Ptr_4:r

   int32 A;
   int32 B = 5;
   A = B;

//Line:40
//Variable:ULang:Tests:Ptr_4:Vptr

   ULang:Ptr<sint32> C;
   void* D = &A;
   ULang:Ptr<sint32> E = ULang:ptr<sint32>^i32&(D);
   C = E;

//Line:42

   int32 F = A;
   int32 G = 5;
   int32 H = F+G;
   A = H;

//Line:44

   ULang:Ptr<sint32>* I = &C;
   void* J = ULang:Ptr<sint32>:ReadPtr^ULang:Ptr<sint32>&imut(I);
   int32 K = *J;
   int32 L = 10;
   int8 M = K==L;
   ret = M;
   ret;

|ULang:Tests:Ptr_5[] -> int8:

 [Block:0]


//File:/Tests/Ptr.uc
//Line:50
//Variable:ULang:Tests:Ptr_5:r

   ULang:Vec2f_t<float32> A;

//Line:0

   ULang:Vec2f_t<float32>* B = &A;

//Line:50

   float32 C = 8.000000;
   float32 D = 6.000000;
   void E = ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&,f32,f32(B,C,D);

//Line:51
//Variable:ULang:Tests:Ptr_5:Vptr

   ULang:Ptr<ULang:Vec2f_t<float32>> F;
   ULang:Vec2f_t<float32>* G = &A;
   ULang:Ptr<ULang:Vec2f_t<float32>> H = ULang:ptr<ULang:Vec2f_t<float32>>^ULang:Vec2f_t<float32>&(G);
   F = H;

//Line:53

   float32 I = 5.000000;
   ULang:Ptr<ULang:Vec2f_t<float32>>* J = &F;

//Line:0

   ULang:Vec2f_t<float32>* K = ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&(J);
   K->__0 = I;

//Line:54

   float32 L = 8.000000;
   ULang:Ptr<ULang:Vec2f_t<float32>>* M = &F;

//Line:0

   ULang:Vec2f_t<float32>* N = ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&(M);
   N->__1 = L;

//Line:57

   ULang:Vec2f_t<float32>* O = &A;
   ULang:Vec2f_t<float32> P;
   ULang:Vec2f_t<float32>* Q = &P;
   float32 R = 5.000000;
   float32 S = 8.000000;
   void T = ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&,f32,f32(Q,R,S);
   ULang:Vec2f_t<float32>* U = &P;
   int8 V = ULang:Vec2f_t<float32>:(&equal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut(O,U);
   ret = V;
   ret;

|ULang:Tests:StringSpan_1[] -> int8:

 [Block:0]


//File:/Tests/String.uc
//Line:6

   void* A = &.Const.SpanString:Hello;
   int64 B = 5;
   ULang:StringSpan_t<char> C;
   ULang:StringSpan_t<char>* D = &C;
   void E = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(D,A,B);
   ULang:StringSpan_t<char>* F = &C;
   int64 G = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(F);
   int64 H = 5;
   int8 I = G==H;
   ret = I;
   ret;

|ULang:Tests:StringSpan_2[] -> int8:

 [Block:0]


//File:/Tests/String.uc
//Line:10

   void* A = &.Const.SpanString:Hello;
   int64 B = 5;
   ULang:StringSpan_t<char> C;
   ULang:StringSpan_t<char>* D = &C;
   void E = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(D,A,B);
   ULang:StringSpan_t<char>* F = &C;
   void* G = &.Const.SpanString:World;
   int64 H = 5;
   ULang:StringSpan_t<char> I;
   ULang:StringSpan_t<char>* J = &I;
   void K = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(J,G,H);
   ULang:StringSpan_t<char>* L = &I;
   int8 M = ULang:StringSpan_t<char>:(&notequal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut(F,L);
   ret = M;
   ret;

|ULang:Tests:StringSpan_3[] -> int8:

 [Block:0]


//File:/Tests/String.uc
//Line:14

   void* A = &.Const.SpanString:Hello;
   int64 B = 5;
   ULang:StringSpan_t<char> C;
   ULang:StringSpan_t<char>* D = &C;
   void E = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(D,A,B);
   ULang:StringSpan_t<char>* F = &C;
   void* G = &.Const.SpanString:Hello;
   int64 H = 5;
   ULang:StringSpan_t<char> I;
   ULang:StringSpan_t<char>* J = &I;
   void K = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(J,G,H);
   ULang:StringSpan_t<char>* L = &I;
   int8 M = ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut(F,L);
   ret = M;
   ret;

|ULang:Tests:StringSpan_4[] -> int8:

 [Block:0]


//File:/Tests/String.uc
//Line:18
//Variable:ULang:Tests:StringSpan_4:Txt

   ULang:String_t<char> A;
   void* B = &.Const.SpanString:Hello;
   int64 C = 5;
   ULang:StringSpan_t<char> D;
   ULang:StringSpan_t<char>* E = &D;
   void F = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(E,B,C);
   ULang:String_t<char> G;
   ULang:String_t<char>* H = &G;
   ULang:StringSpan_t<char>* I = &D;
   void J = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(H,I);
   A = G;

//Line:19

   ULang:String_t<char>* K = &A;
   void* L = &.Const.SpanString:Hello;
   int64 M = 5;
   ULang:StringSpan_t<char> N;
   ULang:StringSpan_t<char>* O = &N;
   void P = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(O,L,M);
   ULang:String_t<char>* Q;
   ULang:String_t<char>* R = &Q;
   ULang:StringSpan_t<char>* S = &N;
   void T = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(R,S);
   int8 U = ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut(K,Q);
   ret = U;
   ret;

|ULang:Tests:StringSpan_5[] -> int8:

 [Block:0]


//File:/Tests/String.uc
//Line:23
//Variable:ULang:Tests:StringSpan_5:Txt

   ULang:String_t<char> A;
   void* B = &.Const.SpanString:World;
   int64 C = 5;
   ULang:StringSpan_t<char> D;
   ULang:StringSpan_t<char>* E = &D;
   void F = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(E,B,C);
   ULang:String_t<char> G;
   ULang:String_t<char>* H = &G;
   ULang:StringSpan_t<char>* I = &D;
   void J = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(H,I);
   A = G;

//Line:24

   ULang:String_t<char>* K = &A;
   void L = ULang:Fmt:Print^ULang:String_t<char>&imut(K);

//Line:25

   ULang:String_t<char>* M = &A;
   void* N = &.Const.SpanString:Hello;
   int64 O = 5;
   ULang:StringSpan_t<char> P;
   ULang:StringSpan_t<char>* Q = &P;
   void R = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(Q,N,O);
   ULang:String_t<char>* S;
   ULang:String_t<char>* T = &S;
   ULang:StringSpan_t<char>* U = &P;
   void V = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(T,U);
   int8 W = ULang:String_t<char>:(&notequal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut(M,S);
   ret = W;
   ret;

|ULang:Tests:StringSpan_Reverse[] -> int8:

 [Block:0]


//File:/Tests/String.uc
//Line:29
//Variable:ULang:Tests:StringSpan_Reverse:Txt

   ULang:String_t<char> A;
   void* B = &.Const.SpanString:World;
   int64 C = 5;
   ULang:StringSpan_t<char> D;
   ULang:StringSpan_t<char>* E = &D;
   void F = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(E,B,C);
   ULang:String_t<char> G;
   ULang:String_t<char>* H = &G;
   ULang:StringSpan_t<char>* I = &D;
   void J = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(H,I);
   A = G;

//Line:30

   ULang:String_t<char> K = A;
   void L = ULang:Reverse<char>^ULang:StringSpan_t<char>(K);

//Line:31

   ULang:String_t<char>* M = &A;
   void* N = &.Const.SpanString:Hello;
   int64 O = 5;
   ULang:StringSpan_t<char> P;
   ULang:StringSpan_t<char>* Q = &P;
   void R = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(Q,N,O);
   ULang:String_t<char>* S;
   ULang:String_t<char>* T = &S;
   ULang:StringSpan_t<char>* U = &P;
   void V = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(T,U);
   int8 W = ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut(M,S);
   ret = W;
   ret;

|ULang:Tests:StringSpan_Reverse1[] -> void:

 [Block:0]

   ret;

|ULang:Tests:StringSpan_StartWith[] -> int8:

 [Block:0]


//File:/Tests/String.uc
//Line:42
//Variable:ULang:Tests:StringSpan_StartWith:Txt

   ULang:String_t<char> A;
   void* B = &.Const.SpanString:Hello World;
   int64 C = 11;
   ULang:StringSpan_t<char> D;
   ULang:StringSpan_t<char>* E = &D;
   void F = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(E,B,C);
   ULang:String_t<char> G;
   ULang:String_t<char>* H = &G;
   ULang:StringSpan_t<char>* I = &D;
   void J = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(H,I);
   A = G;

//Line:43

   ULang:String_t<char> K = A;
   void* L = &.Const.SpanString:Hello;
   int64 M = 5;
   ULang:StringSpan_t<char> N;
   ULang:StringSpan_t<char>* O = &N;
   void P = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(O,L,M);
   int8 Q = ULang:StartWith<char>^ULang:StringSpan_t<char>,ULang:StringSpan_t<char>(K,N);
   ret = Q;
   ret;

|ULang:Tests:StringSpan_StartWith2[] -> int8:

 [Block:0]


//File:/Tests/String.uc
//Line:47
//Variable:ULang:Tests:StringSpan_StartWith2:Txt

   ULang:String_t<char> A;
   void* B = &.Const.SpanString:Bello World;
   int64 C = 11;
   ULang:StringSpan_t<char> D;
   ULang:StringSpan_t<char>* E = &D;
   void F = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(E,B,C);
   ULang:String_t<char> G;
   ULang:String_t<char>* H = &G;
   ULang:StringSpan_t<char>* I = &D;
   void J = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(H,I);
   A = G;

//Line:48

   ULang:String_t<char> K = A;
   void* L = &.Const.SpanString:Hello;
   int64 M = 5;
   ULang:StringSpan_t<char> N;
   ULang:StringSpan_t<char>* O = &N;
   void P = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(O,L,M);
   int8 Q = ULang:StartWith<char>^ULang:StringSpan_t<char>,ULang:StringSpan_t<char>(K,N);
   int8 R = 0;
   int8 S = Q==R;
   ret = S;
   ret;

|ULang:Tests:Unique_ptr_1[] -> int8:

 [Block:0]


//File:/Tests/Unique_ptr.uc
//Line:7
//Variable:ULang:Tests:Unique_ptr_1:v

   ULang:Unique_ptr<sint32> A;
   ULang:Unique_ptr<sint32> B = ULang:Unique_ptr<sint32>:Make();
   A = B;

//Line:8

   ULang:Unique_ptr<sint32>* C = &A;
   void* D = ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&(C);
   int32 E = *D;
   int32 F = 0;
   int8 G = E==F;
   ret = G;

//Line:0

   ULang:Unique_ptr<sint32>* H = &A;
   void I = ULang:Unique_ptr<sint32>:(&_drop&)^ULang:Unique_ptr<sint32>&(H);
   ret;

|ULang:Tests:Unique_ptr_2[] -> void:

 [Block:0]

   ret;

|ULang:Tests:Unique_ptr_3[] -> void:

 [Block:0]

   ret;

|ULang:Tests:Unique_ptr_4[] -> void:

 [Block:0]

   ret;

|ULang:Tests:Unique_ptr_5[] -> void:

 [Block:0]

   ret;

|ULang:Tests:Vector_1[] -> int8:

 [Block:0]


//File:/Tests/Vector.uc
//Line:6
//Variable:ULang:Tests:Vector_1:List

   ULang:Vector<sint32> A;

//Line:0

   ULang:Vector<sint32>* B = &A;
   void C = ULang:Vector<sint32>:(&_new&)^ULang:Vector<sint32>&(B);

//Line:6
//Line:7

   ULang:Vector<sint32>* D = &A;
   int32 E = 5;
   void* F = &E;
   void G = ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut(D,F);

//Line:8

   ULang:Vector<sint32>* H = &A;
   int64 I = 0;
   void* J = ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr(H,I);
   int32 K = *J;
   int32 L = 5;
   int8 M = K==L;
   ULang:Vector<sint32>* N = &A;
   int64 O = ULang:Vector<sint32>:Size^ULang:Vector<sint32>&imut(N);
   int64 P = 1;
   int8 Q = O==P;
   int8 R = M&&Q;
   ret = R;

//Line:0

   ULang:Vector<sint32>* S = &A;
   void T = ULang:Vector<sint32>:(&_drop&)^ULang:Vector<sint32>&(S);
   ret;

|ULang:Tests:Vector_2[] -> int8:

 [Block:0]


//File:/Tests/Vector.uc
//Line:12
//Variable:ULang:Tests:Vector_2:List

   ULang:Vector<sint32> A;

//Line:0

   ULang:Vector<sint32>* B = &A;
   void C = ULang:Vector<sint32>:(&_new&)^ULang:Vector<sint32>&(B);

//Line:12
//Line:13

   ULang:Vector<sint32>* D = &A;
   int32 E = 5;
   void* F = &E;
   void G = ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut(D,F);

//Line:14

   ULang:Vector<sint32>* H = &A;
   int32 I = 15;
   void* J = &I;
   void K = ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut(H,J);

//Line:16
//Variable:ULang:Tests:Vector_2:span

   ULang:Span<sint32> L;

//Line:14
//Line:16

   ULang:Vector<sint32>* M = &A;
   int64 N = 1;
   int64 O = 2;
   ULang:Range_t<uintptr> P = ULang:Range<uintptr>^uptr,uptr(N,O);
   ULang:Span<sint32> Q = ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,ULang:Range_t<uintptr>(M,P);
   L = Q;

//Line:18

   ULang:Span<sint32>* R = &L;
   int64 S = 0;
   void* T = ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,uptr(R,S);
   int32 U = *T;
   int32 V = 15;
   int8 W = U==V;
   ULang:Span<sint32>* X = &L;
   int64 Y = ULang:Span<sint32>:Size^ULang:Span<sint32>&imut(X);
   int64 Z = 1;
   int8 [ = Y==Z;
   int8 \ = W&&[;
   ret = \;

//Line:0

   ULang:Vector<sint32>* ] = &A;
   void ^ = ULang:Vector<sint32>:(&_drop&)^ULang:Vector<sint32>&(]);
   ret;

|ULang:Future:(&_new&)^ULang:Future&[ULang:Future* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Thread:(&_new&)^ULang:Thread&[ULang:Thread* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Path:(&_new&)^ULang:Path&[ULang:Path* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Mat4x4_t<float32>:(&_new&)^ULang:Mat4x4_t<float32>&[ULang:Mat4x4_t<float32>* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Range_t<uintptr>:(&_new&)^ULang:Range_t<uintptr>&[ULang:Range_t<uintptr>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Range_t<uintptr>:(&_new&):(&this&)
//File:/Types/Range.uc
//Line:7
//Line:0

   int64 A = 0;
   (&this&)->__0 = A;

//Line:8
//Line:0

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Range_t<uintptr>:(&_new&)^ULang:Range_t<uintptr>&,uptr,uptr[ULang:Range_t<uintptr>* (&this&),int64 start,int64 end] -> void:

 [Block:0]


//Variable:ULang:Range_t<uintptr>:(&_new&):(&this&)
//Variable:ULang:Range_t<uintptr>:(&_new&):start
//Variable:ULang:Range_t<uintptr>:(&_new&):end
//File:/Types/Range.uc
//Line:10

   int64 A = start;
   (&this&)->__0 = A;

//Line:11

   int64 B = end;
   (&this&)->__1 = B;
   ret;

|ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut[ULang:Range_t<uintptr>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Range_t<uintptr>:Start:(&this&)


//File:/Types/Range.uc
//Line:13

   int64 A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut[ULang:Range_t<uintptr>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Range_t<uintptr>:End:(&this&)


//File:/Types/Range.uc
//Line:14

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Span<char>:(&_new&)^ULang:Span<char>&[ULang:Span<char>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Span<char>:(&_new&):(&this&)
//File:/Types/Span.uc
//Line:7

   int64 A = 0;
   (&this&)->__0 = A;

//Line:8

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr[ULang:Span<char>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:Span<char>:(&_new&):(&this&)
//Variable:ULang:Span<char>:(&_new&):data
//Variable:ULang:Span<char>:(&_new&):size
//File:/Types/Span.uc
//Line:11

   void* A = data;
   (&this&)->__0 = A;

//Line:12

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:Span<char>:Size^ULang:Span<char>&imut[ULang:Span<char>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Span<char>:Size:(&this&)


//File:/Types/Span.uc
//Line:13

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Span<char>:Data^ULang:Span<char>&[ULang:Span<char>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<char>:Data:(&this&)


//File:/Types/Span.uc
//Line:14

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<char>:iData^ULang:Span<char>&imut[ULang:Span<char>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<char>:iData:(&this&)


//File:/Types/Span.uc
//Line:15

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<char>:(&Index&)^ULang:Span<char>&,uptr[ULang:Span<char>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<char>:(&Index&):(&this&)
//Variable:ULang:Span<char>:(&Index&):Index


//File:/Types/Span.uc
//Line:18

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<char>:(&Index&)^ULang:Span<char>&imut,uptr[ULang:Span<char>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<char>:(&Index&):(&this&)
//Variable:ULang:Span<char>:(&Index&):Index


//File:/Types/Span.uc
//Line:19

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>[ULang:Span<char>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:Span<char>:(&Index&):(&this&)
//Variable:ULang:Span<char>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<char> A;
   ULang:Span<char>* B = &A;

//Line:21

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 1;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Span<char>:(&Index&)^ULang:Span<char>&imut,ULang:Range_t<uintptr>[ULang:Span<char>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:Span<char>:(&Index&):(&this&)
//Variable:ULang:Span<char>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<char> A;
   ULang:Span<char>* B = &A;

//Line:22

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 1;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&[ULang:StringSpan_t<char>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:(&_new&):(&this&)
//File:/Types/String.uc
//Line:12

   int64 A = 0;
   (&this&)->__0 = A;

//Line:13

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr[ULang:StringSpan_t<char>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:(&_new&):(&this&)
//Variable:ULang:StringSpan_t<char>:(&_new&):data
//Variable:ULang:StringSpan_t<char>:(&_new&):size
//File:/Types/String.uc
//Line:16

   void* A = data;
   (&this&)->__0 = A;

//Line:17

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut[ULang:StringSpan_t<char>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:Size:(&this&)


//File:/Types/String.uc
//Line:19

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:StringSpan_t<char>:iData^ULang:StringSpan_t<char>&imut[ULang:StringSpan_t<char>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:iData:(&this&)


//File:/Types/String.uc
//Line:20

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:StringSpan_t<char>:Data^ULang:StringSpan_t<char>&[ULang:StringSpan_t<char>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:Data:(&this&)


//File:/Types/String.uc
//Line:21

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut[ULang:StringSpan_t<char>* (&this&),ULang:StringSpan_t<char>* Other] -> int8:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:(&equal&):(&this&)
//Variable:ULang:StringSpan_t<char>:(&equal&):Other
//File:/Types/String.uc
//Line:24

   ULang:StringSpan_t<char>* A = (&this&);
   ULang:StringSpan_t<char>* B = A;
   int64 C = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(B);
   ULang:StringSpan_t<char>* D = Other;
   int64 E = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(D);
   int8 F = C!=E;
   int8 G = !F;
   gotoif (G) _label0;
   int8 H = 0;
   ret = H;
   goto _label1;

//Line:26
   _label0:

   int64 I;

//Variable:ULang:StringSpan_t<char>:(&equal&):1851961762880:i

   int32 J = 0;
   I = J;

   _label4:

   int64 K = I;
   ULang:StringSpan_t<char>* L = (&this&);
   ULang:StringSpan_t<char>* M = L;
   int64 N = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(M);
   int8 O = K<N;
   int8 P = !O;
   gotoif (P) _label2;
   ULang:StringSpan_t<char>* Q = (&this&);

//Line:28

   ULang:StringSpan_t<char>* R = Q;
   int64 S = I;
   void* T = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr(R,S);
   int8 U = *T;
   ULang:StringSpan_t<char>* V = Other;
   int64 W = I;
   void* X = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr(V,W);
   int8 Y = *X;
   int8 Z = U!=Y;
   int8 [ = !Z;
   gotoif ([) _label3;
   int8 \ = 0;
   ret = \;
   goto _label1;

//Line:26
   _label3:

   int64 ] = I;
   int64 ^ = 1;
   int64 _ = ]+^;
   I = _;
   goto _label4;

//Line:30
   _label2:

   int8 ` = 1;
   ret = `;

   _label1:

   ret;

|ULang:StringSpan_t<char>:(&notequal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut[ULang:StringSpan_t<char>* (&this&),ULang:StringSpan_t<char>* Other] -> int8:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:(&notequal&):(&this&)
//Variable:ULang:StringSpan_t<char>:(&notequal&):Other
//File:/Types/String.uc
//Line:32

   ULang:StringSpan_t<char>* A = (&this&);
   ULang:StringSpan_t<char>* B = A;
   ULang:StringSpan_t<char>* C = Other;
   int8 D = ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:StringSpan_t<char>:AsSpan^ULang:StringSpan_t<char>&[ULang:StringSpan_t<char>* (&this&)] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:AsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<char> A;
   ULang:Span<char>* B = &A;

//Line:34

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<char>:iAsSpan^ULang:StringSpan_t<char>&imut[ULang:StringSpan_t<char>* (&this&)] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:iAsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<char> A;
   ULang:Span<char>* B = &A;

//Line:35

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&[ULang:Span<char>* span] -> ULang:StringSpan_t<char>:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:ToStr:span
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<char> A;
   ULang:StringSpan_t<char>* B = &A;

//Line:38

   ULang:Span<char>* C = span;
   void* D = ULang:Span<char>:Data^ULang:Span<char>&(C);
   ULang:Span<char>* E = span;
   int64 F = ULang:Span<char>:Size^ULang:Span<char>&imut(E);
   void G = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(B,D,F);
   ret = A;
   ret;

|ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&imut[ULang:Span<char>* span] -> ULang:StringSpan_t<char>:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:ToStr:span
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<char> A;
   ULang:StringSpan_t<char>* B = &A;

//Line:39

   ULang:Span<char>* C = span;
   void* D = ULang:Span<char>:Data^ULang:Span<char>&(C);
   ULang:Span<char>* E = span;
   int64 F = ULang:Span<char>:Size^ULang:Span<char>&imut(E);
   void G = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&,c[&],uptr(B,D,F);
   ret = A;
   ret;

|ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr[ULang:StringSpan_t<char>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<char>:(&Index&):Index


//File:/Types/String.uc
//Line:41

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&imut,uptr[ULang:StringSpan_t<char>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<char>:(&Index&):Index


//File:/Types/String.uc
//Line:42

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,ULang:Range_t<uintptr>[ULang:StringSpan_t<char>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<char>:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<char>:(&Index&):Range
//File:/Types/String.uc
//Line:44
//Line:42
//Line:44

   ULang:StringSpan_t<char>* A = (&this&);
   ULang:Span<char> B = ULang:StringSpan_t<char>:AsSpan^ULang:StringSpan_t<char>&(A);
   ULang:Span<char>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<char> E = ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>(C,D);
   ULang:Span<char>* F = &E;
   ULang:StringSpan_t<char> G = ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&(F);
   ret = G;
   ret;

|ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&imut,ULang:Range_t<uintptr>[ULang:StringSpan_t<char>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<char>:

 [Block:0]


//Variable:ULang:StringSpan_t<char>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<char>:(&Index&):Range
//File:/Types/String.uc
//Line:45
//Line:44
//Line:45

   ULang:StringSpan_t<char>* A = (&this&);
   ULang:Span<char> B = ULang:StringSpan_t<char>:AsSpan^ULang:StringSpan_t<char>&(A);
   ULang:Span<char>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<char> E = ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>(C,D);
   ULang:Span<char>* F = &E;
   ULang:StringSpan_t<char> G = ULang:StringSpan_t<char>:ToStr^ULang:Span<char>&(F);
   ret = G;
   ret;

|ULang:Vector<char>:(&_new&)^ULang:Vector<char>&[ULang:Vector<char>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:(&_new&):(&this&)
//File:/Types/Vector.uc
//Line:9

   int64 A = 0;
   (&this&)->__0 = A;

//Line:10

   int64 B = 0;
   (&this&)->__1 = B;

//Line:11

   int64 C = 0;
   (&this&)->__2 = C;
   ret;

|ULang:Vector<char>:(&_drop&)^ULang:Vector<char>&[ULang:Vector<char>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:(&_drop&):(&this&)
//File:/Types/Vector.uc
//Line:13
//Variable:ULang:Vector<char>:(&_drop&):ptr

   int64 A;
   void* B = (&this&)->__0;
   A = B;

//Line:14

   int64 C = A;
   int64 D = 0;
   int8 E = C!=D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:15

   void* G = (&this&)->__0;
   LowLevel::Free(G);

   _label0:

   ret;

|ULang:Vector<char>:iData^ULang:Vector<char>&imut[ULang:Vector<char>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<char>:iData:(&this&)


//File:/Types/Vector.uc
//Line:17

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<char>:Data^ULang:Vector<char>&[ULang:Vector<char>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<char>:Data:(&this&)


//File:/Types/Vector.uc
//Line:18

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<char>:Size^ULang:Vector<char>&imut[ULang:Vector<char>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<char>:Size:(&this&)


//File:/Types/Vector.uc
//Line:20

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Vector<char>:Capacity^ULang:Vector<char>&imut[ULang:Vector<char>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<char>:Capacity:(&this&)


//File:/Types/Vector.uc
//Line:21

   int64 A = (&this&)->__2;
   ret = A;
   ret;

|ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr[ULang:Vector<char>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Resize:(&this&)
//Variable:ULang:Vector<char>:Resize:Size
//File:/Types/Vector.uc
//Line:24

   ULang:Vector<char>* A = (&this&);
   int64 B = Size;
   void C = ULang:Vector<char>:Reserve^ULang:Vector<char>&,uptr(A,B);

//Line:25

   int64 D = Size;
   (&this&)->__1 = D;
   ret;

|ULang:Vector<char>:Reserve^ULang:Vector<char>&,uptr[ULang:Vector<char>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Reserve:(&this&)
//Variable:ULang:Vector<char>:Reserve:Size
//File:/Types/Vector.uc
//Line:28

   int64 A = Size;
   int64 B = (&this&)->__2;
   int8 C = A>B;
   int8 D = !C;
   gotoif (D) _label0;

//Line:29
//Variable:ULang:Vector<char>:Reserve:1851963200432:oldsize

   int64 E;
   int64 F = (&this&)->__1;
   E = F;

//Line:30
//Variable:ULang:Vector<char>:Reserve:1851963200432:old

   void* G;
   void* H = (&this&)->__0;
   G = H;

//Line:33

   int64 I = Size;
   (&this&)->__2 = I;

//Line:34

   int64 J = Size;
   int64 K = 1;
   int64 L = J*K;
   void* M = LowLevel::Malloc(L);
   int64 N = 0;

   _label2:

   int8 O = N==J;
   gotoif (O) _label1;
   int64 P = N*K;
   void* Q = M+P;

//Line:0

   int8 R = 0;
   *Q = R;
   int32 S = 1;
   int64 T = N+S;
   N = T;
   goto _label2;

   _label1:

   (&this&)->__0 = M;

//Line:35

   int64 U;

//Variable:ULang:Vector<char>:Reserve:1851963200432:1851961879728:i

   int32 V = 0;
   U = V;

   _label4:

   int64 W = U;
   int64 X = E;
   int8 Y = W<X;
   int8 Z = !Y;
   gotoif (Z) _label3;

//Line:36

   void* [ = G;
   int64 \ = U;
   int64 ] = 1;
   int64 ^ = \*];
   void* _ = [+^;
   int8 ` = *_;
   void* a = (&this&)->__0;
   int64 b = U;
   int64 c = 1;
   int64 d = b*c;
   void* e = a+d;
   *e = `;

//Line:35

   int64 f = U;
   int64 g = 1;
   int64 h = f+g;
   U = h;
   goto _label4;

//Line:38
//Variable:ULang:Vector<char>:Reserve:1851963200432:ptr
   _label3:

   int64 i;
   void* j = G;
   i = j;

//Line:39

   int64 k = i;
   int64 l = 0;
   int8 m = k==l;
   int8 n = !m;
   gotoif (n) _label0;

//Line:40

   void* o = G;
   LowLevel::Free(o);

   _label0:

   ret;

|ULang:Vector<char>:Clear^ULang:Vector<char>&[ULang:Vector<char>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Clear:(&this&)
//File:/Types/Vector.uc
//Line:42

   int64 A = 0;
   (&this&)->__1 = A;
   ret;

|ULang:Vector<char>:Pop^ULang:Vector<char>&[ULang:Vector<char>* (&this&)] -> int8:

 [Block:0]


//Variable:ULang:Vector<char>:Pop:(&this&)

   ret;

|ULang:Vector<char>:Remove^ULang:Vector<char>&,uptr[ULang:Vector<char>* (&this&),int64 Index] -> int8:

 [Block:0]


//Variable:ULang:Vector<char>:Remove:(&this&)
//Variable:ULang:Vector<char>:Remove:Index

   ret;

|ULang:Vector<char>:Push^ULang:Vector<char>&,c&imut[ULang:Vector<char>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Push:(&this&)
//Variable:ULang:Vector<char>:Push:Val
//File:/Types/Vector.uc
//Line:48

   ULang:Vector<char>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr(A,D);

//Line:49

   int8 F = *Val;
   ULang:Vector<char>* G = (&this&);
   ULang:Vector<char>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<char>:Push^ULang:Vector<char>&,cmov[ULang:Vector<char>* (&this&),int8 Val] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Push:(&this&)
//Variable:ULang:Vector<char>:Push:Val
//File:/Types/Vector.uc
//Line:53

   ULang:Vector<char>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr(A,D);

//Line:54

   int8 F = Val;
   ULang:Vector<char>* G = (&this&);
   ULang:Vector<char>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,c&imut[ULang:Vector<char>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Insert:(&this&)
//Variable:ULang:Vector<char>:Insert:Index
//Variable:ULang:Vector<char>:Insert:Item

   ret;

|ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,cmov[ULang:Vector<char>* (&this&),int64 Index,int8 Item] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Insert:(&this&)
//Variable:ULang:Vector<char>:Insert:Index
//Variable:ULang:Vector<char>:Insert:Item

   ret;

|ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>imut[ULang:Vector<char>* (&this&),ULang:Span<char> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Append:(&this&)
//Variable:ULang:Vector<char>:Append:Val

   ret;

|ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>mov[ULang:Vector<char>* (&this&),ULang:Span<char> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<char>:Append:(&this&)
//Variable:ULang:Vector<char>:Append:Val

   ret;

|ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr[ULang:Vector<char>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<char>:(&Index&):(&this&)
//Variable:ULang:Vector<char>:(&Index&):Index


//File:/Types/Vector.uc
//Line:64

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<char>:(&Index&)^ULang:Vector<char>&imut,uptr[ULang:Vector<char>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<char>:(&Index&):(&this&)
//Variable:ULang:Vector<char>:(&Index&):Index


//File:/Types/Vector.uc
//Line:65

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,ULang:Range_t<uintptr>[ULang:Vector<char>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:Vector<char>:(&Index&):(&this&)
//Variable:ULang:Vector<char>:(&Index&):Range
//File:/Types/Vector.uc
//Line:65
//Line:70

   ULang:Vector<char>* A = (&this&);
   ULang:Span<char> B = ULang:Vector<char>:AsSpan^ULang:Vector<char>&(A);
   ULang:Span<char>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<char> E = ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<char>:(&Index&)^ULang:Vector<char>&imut,ULang:Range_t<uintptr>[ULang:Vector<char>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:Vector<char>:(&Index&):(&this&)
//Variable:ULang:Vector<char>:(&Index&):Range
//File:/Types/Vector.uc
//Line:70
//Line:71

   ULang:Vector<char>* A = (&this&);
   ULang:Span<char> B = ULang:Vector<char>:AsSpan^ULang:Vector<char>&(A);
   ULang:Span<char>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<char> E = ULang:Span<char>:(&Index&)^ULang:Span<char>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<char>:AsSpan^ULang:Vector<char>&[ULang:Vector<char>* (&this&)] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:Vector<char>:AsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<char> A;
   ULang:Span<char>* B = &A;

//Line:73

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:Vector<char>:iAsSpan^ULang:Vector<char>&imut[ULang:Vector<char>* (&this&)] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:Vector<char>:iAsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<char> A;
   ULang:Span<char>* B = &A;

//Line:74

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<char>:(&_new&)^ULang:Span<char>&,c[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:String_t<char>:(&_init&)[ULang:String_t<char>* (&this&)] -> void:

 [Block:0]


//File:/Types/String.uc
//Line:49

   ULang:Vector<char>* A = &(&this&)->__0;

//Line:0

   void B = ULang:Vector<char>:(&_new&)^ULang:Vector<char>&(A);
   ret;

|ULang:String_t<char>:(&_new&)^ULang:String_t<char>&[ULang:String_t<char>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:(&_new&):(&this&)

   ULang:String_t<char>* A = (&this&);
   void B = ULang:String_t<char>:(&_init&)(A);
   ret;

|ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut[ULang:String_t<char>* (&this&),ULang:StringSpan_t<char>* span] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:(&_new&):(&this&)
//Variable:ULang:String_t<char>:(&_new&):span

   ULang:String_t<char>* A = (&this&);
   void B = ULang:String_t<char>:(&_init&)(A);

//File:/Types/String.uc
//Line:58

   ULang:String_t<char>* C = (&this&);
   ULang:StringSpan_t<char>* D = span;
   int64 E = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(D);
   void F = ULang:String_t<char>:Resize^ULang:String_t<char>&,uptr(C,E);

//Line:59

   int64 G;

//Variable:ULang:String_t<char>:(&_new&):1851962032560:i

   int32 H = 0;
   G = H;

   _label1:

   int64 I = G;
   ULang:StringSpan_t<char>* J = span;
   int64 K = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(J);
   int8 L = I<K;
   int8 M = !L;
   gotoif (M) _label0;
   ULang:StringSpan_t<char>* N = span;
   int64 O = G;
   void* P = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr(N,O);
   int8 Q = *P;
   ULang:String_t<char>* R = (&this&);
   ULang:String_t<char>* S = R;
   int64 T = G;
   void* U = ULang:String_t<char>:(&Index&)^ULang:String_t<char>&,uptr(S,T);
   *U = Q;
   int64 V = G;
   int64 W = 1;
   int64 X = V+W;
   G = X;
   goto _label1;

   _label0:

   ret;

|ULang:String_t<char>:iData^ULang:String_t<char>&imut[ULang:String_t<char>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:String_t<char>:iData:(&this&)
//File:/Types/String.uc
//Line:61

   ULang:Vector<char>* A = &(&this&)->__0;
   void* B = ULang:Vector<char>:iData^ULang:Vector<char>&imut(A);
   ret = B;
   ret;

|ULang:String_t<char>:Data^ULang:String_t<char>&[ULang:String_t<char>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:String_t<char>:Data:(&this&)
//File:/Types/String.uc
//Line:62

   ULang:Vector<char>* A = &(&this&)->__0;
   void* B = ULang:Vector<char>:Data^ULang:Vector<char>&(A);
   ret = B;
   ret;

|ULang:String_t<char>:Size^ULang:String_t<char>&imut[ULang:String_t<char>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:String_t<char>:Size:(&this&)
//File:/Types/String.uc
//Line:65

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = ULang:Vector<char>:Size^ULang:Vector<char>&imut(A);
   ret = B;
   ret;

|ULang:String_t<char>:Capacity^ULang:String_t<char>&imut[ULang:String_t<char>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:String_t<char>:Capacity:(&this&)
//File:/Types/String.uc
//Line:66

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = ULang:Vector<char>:Capacity^ULang:Vector<char>&imut(A);
   ret = B;
   ret;

|ULang:String_t<char>:Resize^ULang:String_t<char>&,uptr[ULang:String_t<char>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Resize:(&this&)
//Variable:ULang:String_t<char>:Resize:Size
//File:/Types/String.uc
//Line:68

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = Size;
   void C = ULang:Vector<char>:Resize^ULang:Vector<char>&,uptr(A,B);
   ret;

|ULang:String_t<char>:Reserve^ULang:String_t<char>&,uptr[ULang:String_t<char>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Reserve:(&this&)
//Variable:ULang:String_t<char>:Reserve:Size
//File:/Types/String.uc
//Line:69

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = Size;
   void C = ULang:Vector<char>:Reserve^ULang:Vector<char>&,uptr(A,B);
   ret;

|ULang:String_t<char>:Clear^ULang:String_t<char>&[ULang:String_t<char>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Clear:(&this&)
//File:/Types/String.uc
//Line:70

   ULang:Vector<char>* A = &(&this&)->__0;
   void B = ULang:Vector<char>:Clear^ULang:Vector<char>&(A);
   ret;

|ULang:String_t<char>:Pop^ULang:String_t<char>&[ULang:String_t<char>* (&this&)] -> int8:

 [Block:0]


//Variable:ULang:String_t<char>:Pop:(&this&)
//File:/Types/String.uc
//Line:72

   ULang:Vector<char>* A = &(&this&)->__0;
   int8 B = ULang:Vector<char>:Pop^ULang:Vector<char>&(A);
   ret = B;
   ret;

|ULang:String_t<char>:Remove^ULang:String_t<char>&,uptr[ULang:String_t<char>* (&this&),int64 Index] -> int8:

 [Block:0]


//Variable:ULang:String_t<char>:Remove:(&this&)
//Variable:ULang:String_t<char>:Remove:Index
//File:/Types/String.uc
//Line:73

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = Index;
   int8 C = ULang:Vector<char>:Remove^ULang:Vector<char>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<char>:Push^ULang:String_t<char>&,c&imut[ULang:String_t<char>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Push:(&this&)
//Variable:ULang:String_t<char>:Push:Val
//File:/Types/String.uc
//Line:75

   ULang:Vector<char>* A = &(&this&)->__0;
   void* B = Val;
   void C = ULang:Vector<char>:Push^ULang:Vector<char>&,c&imut(A,B);
   ret;

|ULang:String_t<char>:Push^ULang:String_t<char>&,cmov[ULang:String_t<char>* (&this&),int8 Val] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Push:(&this&)
//Variable:ULang:String_t<char>:Push:Val
//File:/Types/String.uc
//Line:76

   ULang:Vector<char>* A = &(&this&)->__0;
   int8 B = Val;
   void C = ULang:Vector<char>:Push^ULang:Vector<char>&,cmov(A,B);
   ret;

|ULang:String_t<char>:Insert^ULang:String_t<char>&,uptr,c&imut[ULang:String_t<char>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Insert:(&this&)
//Variable:ULang:String_t<char>:Insert:Index
//Variable:ULang:String_t<char>:Insert:Item
//File:/Types/String.uc
//Line:78

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = Item;
   void D = ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,c&imut(A,B,C);
   ret;

|ULang:String_t<char>:Insert^ULang:String_t<char>&,uptr,cmov[ULang:String_t<char>* (&this&),int64 Index,int8 Item] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Insert:(&this&)
//Variable:ULang:String_t<char>:Insert:Index
//Variable:ULang:String_t<char>:Insert:Item
//File:/Types/String.uc
//Line:79

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = Index;
   int8 C = Item;
   void D = ULang:Vector<char>:Insert^ULang:Vector<char>&,uptr,cmov(A,B,C);
   ret;

|ULang:String_t<char>:(&Index&)^ULang:String_t<char>&,uptr[ULang:String_t<char>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:String_t<char>:(&Index&):(&this&)
//Variable:ULang:String_t<char>:(&Index&):Index
//File:/Types/String.uc
//Line:79


//Line:82

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<char>:(&Index&)^ULang:String_t<char>&imut,uptr[ULang:String_t<char>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:String_t<char>:(&Index&):(&this&)
//Variable:ULang:String_t<char>:(&Index&):Index
//File:/Types/String.uc
//Line:82


//Line:83

   ULang:Vector<char>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = ULang:Vector<char>:(&Index&)^ULang:Vector<char>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<char>:Append^ULang:String_t<char>&,ULang:Span<char>imut[ULang:String_t<char>* (&this&),ULang:Span<char> Val] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Append:(&this&)
//Variable:ULang:String_t<char>:Append:Val
//File:/Types/String.uc
//Line:85

   ULang:Vector<char>* A = &(&this&)->__0;
   ULang:Span<char> B = Val;
   void C = ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>imut(A,B);
   ret;

|ULang:String_t<char>:Append^ULang:String_t<char>&,ULang:Span<char>mov[ULang:String_t<char>* (&this&),ULang:Span<char> Val] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:Append:(&this&)
//Variable:ULang:String_t<char>:Append:Val
//File:/Types/String.uc
//Line:86

   ULang:Vector<char>* A = &(&this&)->__0;
   ULang:Span<char> B = Val;
   void C = ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>mov(A,B);
   ret;

|ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut[ULang:String_t<char>* (&this&),ULang:String_t<char>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<char>:(&equal&):(&this&)
//Variable:ULang:String_t<char>:(&equal&):Other
//File:/Types/String.uc
//Line:89

   ULang:String_t<char>* A = (&this&);
   ULang:String_t<char>* B = A;
   ULang:StringSpan_t<char> C = ULang:String_t<char>:iStr^ULang:String_t<char>&imut(B);
   ULang:StringSpan_t<char>* D = &C;
   ULang:String_t<char>* E = Other;
   ULang:StringSpan_t<char> F = ULang:String_t<char>:iStr^ULang:String_t<char>&imut(E);
   ULang:StringSpan_t<char>* G = &F;
   int8 H = ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut(D,G);
   ret = H;
   ret;

|ULang:String_t<char>:(&notequal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut[ULang:String_t<char>* (&this&),ULang:String_t<char>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<char>:(&notequal&):(&this&)
//Variable:ULang:String_t<char>:(&notequal&):Other
//File:/Types/String.uc
//Line:91

   ULang:String_t<char>* A = (&this&);
   ULang:String_t<char>* B = A;
   ULang:String_t<char>* C = Other;
   int8 D = ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:String_t<char>:(&Plus&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut[ULang:String_t<char>* (&this&),ULang:String_t<char>* Other] -> ULang:String_t<char>:

 [Block:0]


//Variable:ULang:String_t<char>:(&Plus&):(&this&)
//Variable:ULang:String_t<char>:(&Plus&):Other
//File:/Types/String.uc
//Line:94

   ULang:String_t<char>* A = (&this&);
   ULang:String_t<char>* B = A;
   ULang:String_t<char>* C = Other;
   ULang:StringSpan_t<char> D = ULang:String_t<char>:iStr^ULang:String_t<char>&imut(C);
   ULang:String_t<char>* E;
   ULang:String_t<char>* F = &E;
   ULang:StringSpan_t<char>* G = &D;
   void H = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(F,G);
   ULang:String_t<char> I = ULang:String_t<char>:(&Plus&)^ULang:String_t<char>&imut,ULang:String_t<char>&imut(B,E);
   ret = I;
   ret;

|ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:String_t<char>&imut[ULang:String_t<char>* (&this&),ULang:String_t<char>* Other] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:(&Compound_Plus&):(&this&)
//Variable:ULang:String_t<char>:(&Compound_Plus&):Other
//File:/Types/String.uc
//Line:94

   ULang:String_t<char>* A = (&this&);

//Line:97

   ULang:String_t<char>* B = A;
   ULang:String_t<char>* C = Other;
   ULang:StringSpan_t<char> D = ULang:String_t<char>:iStr^ULang:String_t<char>&imut(C);
   ULang:String_t<char>* E;
   ULang:String_t<char>* F = &E;
   ULang:StringSpan_t<char>* G = &D;
   void H = ULang:String_t<char>:(&_new&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(F,G);
   void I = ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:String_t<char>&imut(B,E);
   ret;

|ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut[ULang:String_t<char>* (&this&),ULang:StringSpan_t<char>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<char>:(&equal&):(&this&)
//Variable:ULang:String_t<char>:(&equal&):Other
//File:/Types/String.uc
//Line:101

   ULang:String_t<char>* A = (&this&);
   ULang:String_t<char>* B = A;
   ULang:StringSpan_t<char> C = ULang:String_t<char>:iStr^ULang:String_t<char>&imut(B);
   ULang:StringSpan_t<char>* D = &C;
   ULang:StringSpan_t<char>* E = Other;
   int8 F = ULang:StringSpan_t<char>:(&equal&)^ULang:StringSpan_t<char>&imut,ULang:StringSpan_t<char>&imut(D,E);
   ret = F;
   ret;

|ULang:String_t<char>:(&notequal&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut[ULang:String_t<char>* (&this&),ULang:StringSpan_t<char>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<char>:(&notequal&):(&this&)
//Variable:ULang:String_t<char>:(&notequal&):Other
//File:/Types/String.uc
//Line:103

   ULang:String_t<char>* A = (&this&);
   ULang:String_t<char>* B = A;
   ULang:StringSpan_t<char>* C = Other;
   int8 D = ULang:String_t<char>:(&equal&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:String_t<char>:(&Plus&)^ULang:String_t<char>&imut,ULang:StringSpan_t<char>&imut[ULang:String_t<char>* (&this&),ULang:StringSpan_t<char>* Other] -> ULang:String_t<char>:

 [Block:0]


//Variable:ULang:String_t<char>:(&Plus&):(&this&)
//Variable:ULang:String_t<char>:(&Plus&):Other
//File:/Types/String.uc
//Line:106
//Variable:ULang:String_t<char>:(&Plus&):copy

   ULang:String_t<char> A;
   ULang:String_t<char>* B = (&this&);
   ULang:String_t<char> C = *B;
   A = C;

//Line:107

   ULang:String_t<char>* D = &A;
   ULang:StringSpan_t<char>* E = Other;
   void F = ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut(D,E);

//Line:108

   ULang:String_t<char> G = A;
   ret = G;
   ret;

|ULang:String_t<char>:(&Compound_Plus&)^ULang:String_t<char>&,ULang:StringSpan_t<char>&imut[ULang:String_t<char>* (&this&),ULang:StringSpan_t<char>* Other] -> void:

 [Block:0]


//Variable:ULang:String_t<char>:(&Compound_Plus&):(&this&)
//Variable:ULang:String_t<char>:(&Compound_Plus&):Other
//File:/Types/String.uc
//Line:111

   ULang:Vector<char>* A = &(&this&)->__0;
   ULang:StringSpan_t<char>* B = Other;
   ULang:Span<char> C = ULang:StringSpan_t<char>:iAsSpan^ULang:StringSpan_t<char>&imut(B);
   void D = ULang:Vector<char>:Append^ULang:Vector<char>&,ULang:Span<char>imut(A,C);
   ret;

|ULang:String_t<char>:AsSpan^ULang:String_t<char>&[ULang:String_t<char>* (&this&)] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:String_t<char>:AsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<char> A;
   ULang:Span<char>* B = &A;
   void C = ULang:Span<char>:(&_new&)^ULang:Span<char>&(B);
   ret = A;
   ret;

|ULang:String_t<char>:iAsSpan^ULang:String_t<char>&imut[ULang:String_t<char>* (&this&)] -> ULang:Span<char>:

 [Block:0]


//Variable:ULang:String_t<char>:iAsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<char> A;
   ULang:Span<char>* B = &A;
   void C = ULang:Span<char>:(&_new&)^ULang:Span<char>&(B);
   ret = A;
   ret;

|ULang:String_t<char>:Str^ULang:String_t<char>&[ULang:String_t<char>* (&this&)] -> ULang:StringSpan_t<char>:

 [Block:0]


//Variable:ULang:String_t<char>:Str:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<char> A;
   ULang:StringSpan_t<char>* B = &A;
   void C = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&(B);
   ret = A;
   ret;

|ULang:String_t<char>:iStr^ULang:String_t<char>&imut[ULang:String_t<char>* (&this&)] -> ULang:StringSpan_t<char>:

 [Block:0]


//Variable:ULang:String_t<char>:iStr:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<char> A;
   ULang:StringSpan_t<char>* B = &A;
   void C = ULang:StringSpan_t<char>:(&_new&)^ULang:StringSpan_t<char>&(B);
   ret = A;
   ret;

|ULang:String_t<char>:(&Index&)^ULang:String_t<char>&,ULang:Range_t<uintptr>[ULang:String_t<char>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<char>:

 [Block:0]


//Variable:ULang:String_t<char>:(&Index&):(&this&)
//Variable:ULang:String_t<char>:(&Index&):Range
//File:/Types/String.uc
//Line:111
//Line:119

   ULang:String_t<char>* A = (&this&);
   ULang:StringSpan_t<char> B = ULang:String_t<char>:Str^ULang:String_t<char>&(A);
   ULang:StringSpan_t<char>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:StringSpan_t<char> E = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:String_t<char>:(&Index&)^ULang:String_t<char>&imut,ULang:Range_t<uintptr>[ULang:String_t<char>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<char>:

 [Block:0]


//Variable:ULang:String_t<char>:(&Index&):(&this&)
//Variable:ULang:String_t<char>:(&Index&):Range
//File:/Types/String.uc
//Line:119
//Line:120

   ULang:String_t<char>* A = (&this&);
   ULang:StringSpan_t<char> B = ULang:String_t<char>:Str^ULang:String_t<char>&(A);
   ULang:StringSpan_t<char>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:StringSpan_t<char> E = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:String_t<char>:(&_de-init&)[ULang:String_t<char>* (&this&)] -> void:

 [Block:0]


//File:/Types/String.uc
//Line:0

   ULang:Vector<char>* A = &(&this&)->__0;
   void B = ULang:Vector<char>:(&_drop&)^ULang:Vector<char>&(A);
   ret;

|ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&[ULang:Span<uint8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Span<uint8>:(&_new&):(&this&)
//File:/Types/Span.uc
//Line:7

   int64 A = 0;
   (&this&)->__0 = A;

//Line:8

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr[ULang:Span<uint8>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:Span<uint8>:(&_new&):(&this&)
//Variable:ULang:Span<uint8>:(&_new&):data
//Variable:ULang:Span<uint8>:(&_new&):size
//File:/Types/Span.uc
//Line:11

   void* A = data;
   (&this&)->__0 = A;

//Line:12

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:Span<uint8>:Size^ULang:Span<uint8>&imut[ULang:Span<uint8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Span<uint8>:Size:(&this&)


//File:/Types/Span.uc
//Line:13

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Span<uint8>:Data^ULang:Span<uint8>&[ULang:Span<uint8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<uint8>:Data:(&this&)


//File:/Types/Span.uc
//Line:14

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<uint8>:iData^ULang:Span<uint8>&imut[ULang:Span<uint8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<uint8>:iData:(&this&)


//File:/Types/Span.uc
//Line:15

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,uptr[ULang:Span<uint8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<uint8>:(&Index&):(&this&)
//Variable:ULang:Span<uint8>:(&Index&):Index


//File:/Types/Span.uc
//Line:18

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&imut,uptr[ULang:Span<uint8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<uint8>:(&Index&):(&this&)
//Variable:ULang:Span<uint8>:(&Index&):Index


//File:/Types/Span.uc
//Line:19

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,ULang:Range_t<uintptr>[ULang:Span<uint8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uint8>:

 [Block:0]


//Variable:ULang:Span<uint8>:(&Index&):(&this&)
//Variable:ULang:Span<uint8>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<uint8> A;
   ULang:Span<uint8>* B = &A;

//Line:21

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 1;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&imut,ULang:Range_t<uintptr>[ULang:Span<uint8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uint8>:

 [Block:0]


//Variable:ULang:Span<uint8>:(&Index&):(&this&)
//Variable:ULang:Span<uint8>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<uint8> A;
   ULang:Span<uint8>* B = &A;

//Line:22

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 1;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Vector<uint8>:(&_new&)^ULang:Vector<uint8>&[ULang:Vector<uint8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:(&_new&):(&this&)
//File:/Types/Vector.uc
//Line:9

   int64 A = 0;
   (&this&)->__0 = A;

//Line:10

   int64 B = 0;
   (&this&)->__1 = B;

//Line:11

   int64 C = 0;
   (&this&)->__2 = C;
   ret;

|ULang:Vector<uint8>:(&_drop&)^ULang:Vector<uint8>&[ULang:Vector<uint8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:(&_drop&):(&this&)
//File:/Types/Vector.uc
//Line:13
//Variable:ULang:Vector<uint8>:(&_drop&):ptr

   int64 A;
   void* B = (&this&)->__0;
   A = B;

//Line:14

   int64 C = A;
   int64 D = 0;
   int8 E = C!=D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:15

   void* G = (&this&)->__0;
   LowLevel::Free(G);

   _label0:

   ret;

|ULang:Vector<uint8>:iData^ULang:Vector<uint8>&imut[ULang:Vector<uint8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<uint8>:iData:(&this&)


//File:/Types/Vector.uc
//Line:17

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<uint8>:Data^ULang:Vector<uint8>&[ULang:Vector<uint8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<uint8>:Data:(&this&)


//File:/Types/Vector.uc
//Line:18

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<uint8>:Size^ULang:Vector<uint8>&imut[ULang:Vector<uint8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<uint8>:Size:(&this&)


//File:/Types/Vector.uc
//Line:20

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Vector<uint8>:Capacity^ULang:Vector<uint8>&imut[ULang:Vector<uint8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<uint8>:Capacity:(&this&)


//File:/Types/Vector.uc
//Line:21

   int64 A = (&this&)->__2;
   ret = A;
   ret;

|ULang:Vector<uint8>:Resize^ULang:Vector<uint8>&,uptr[ULang:Vector<uint8>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Resize:(&this&)
//Variable:ULang:Vector<uint8>:Resize:Size
//File:/Types/Vector.uc
//Line:24

   ULang:Vector<uint8>* A = (&this&);
   int64 B = Size;
   void C = ULang:Vector<uint8>:Reserve^ULang:Vector<uint8>&,uptr(A,B);

//Line:25

   int64 D = Size;
   (&this&)->__1 = D;
   ret;

|ULang:Vector<uint8>:Reserve^ULang:Vector<uint8>&,uptr[ULang:Vector<uint8>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Reserve:(&this&)
//Variable:ULang:Vector<uint8>:Reserve:Size
//File:/Types/Vector.uc
//Line:28

   int64 A = Size;
   int64 B = (&this&)->__2;
   int8 C = A>B;
   int8 D = !C;
   gotoif (D) _label0;

//Line:29
//Variable:ULang:Vector<uint8>:Reserve:1851963200432:oldsize

   int64 E;
   int64 F = (&this&)->__1;
   E = F;

//Line:30
//Variable:ULang:Vector<uint8>:Reserve:1851963200432:old

   void* G;
   void* H = (&this&)->__0;
   G = H;

//Line:33

   int64 I = Size;
   (&this&)->__2 = I;

//Line:34

   int64 J = Size;
   int64 K = 1;
   int64 L = J*K;
   void* M = LowLevel::Malloc(L);
   int64 N = 0;

   _label2:

   int8 O = N==J;
   gotoif (O) _label1;
   int64 P = N*K;
   void* Q = M+P;

//Line:0

   int8 R = 0;
   *Q = R;
   int32 S = 1;
   int64 T = N+S;
   N = T;
   goto _label2;

   _label1:

   (&this&)->__0 = M;

//Line:35

   int64 U;

//Variable:ULang:Vector<uint8>:Reserve:1851963200432:1851961879728:i

   int32 V = 0;
   U = V;

   _label4:

   int64 W = U;
   int64 X = E;
   int8 Y = W<X;
   int8 Z = !Y;
   gotoif (Z) _label3;

//Line:36

   void* [ = G;
   int64 \ = U;
   int64 ] = 1;
   int64 ^ = \*];
   void* _ = [+^;
   int8 ` = *_;
   void* a = (&this&)->__0;
   int64 b = U;
   int64 c = 1;
   int64 d = b*c;
   void* e = a+d;
   *e = `;

//Line:35

   int64 f = U;
   int64 g = 1;
   int64 h = f+g;
   U = h;
   goto _label4;

//Line:38
//Variable:ULang:Vector<uint8>:Reserve:1851963200432:ptr
   _label3:

   int64 i;
   void* j = G;
   i = j;

//Line:39

   int64 k = i;
   int64 l = 0;
   int8 m = k==l;
   int8 n = !m;
   gotoif (n) _label0;

//Line:40

   void* o = G;
   LowLevel::Free(o);

   _label0:

   ret;

|ULang:Vector<uint8>:Clear^ULang:Vector<uint8>&[ULang:Vector<uint8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Clear:(&this&)
//File:/Types/Vector.uc
//Line:42

   int64 A = 0;
   (&this&)->__1 = A;
   ret;

|ULang:Vector<uint8>:Pop^ULang:Vector<uint8>&[ULang:Vector<uint8>* (&this&)] -> int8:

 [Block:0]


//Variable:ULang:Vector<uint8>:Pop:(&this&)

   ret;

|ULang:Vector<uint8>:Remove^ULang:Vector<uint8>&,uptr[ULang:Vector<uint8>* (&this&),int64 Index] -> int8:

 [Block:0]


//Variable:ULang:Vector<uint8>:Remove:(&this&)
//Variable:ULang:Vector<uint8>:Remove:Index

   ret;

|ULang:Vector<uint8>:Push^ULang:Vector<uint8>&,u8&imut[ULang:Vector<uint8>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Push:(&this&)
//Variable:ULang:Vector<uint8>:Push:Val
//File:/Types/Vector.uc
//Line:48

   ULang:Vector<uint8>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<uint8>:Resize^ULang:Vector<uint8>&,uptr(A,D);

//Line:49

   int8 F = *Val;
   ULang:Vector<uint8>* G = (&this&);
   ULang:Vector<uint8>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<uint8>:Push^ULang:Vector<uint8>&,u8mov[ULang:Vector<uint8>* (&this&),int8 Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Push:(&this&)
//Variable:ULang:Vector<uint8>:Push:Val
//File:/Types/Vector.uc
//Line:53

   ULang:Vector<uint8>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<uint8>:Resize^ULang:Vector<uint8>&,uptr(A,D);

//Line:54

   int8 F = Val;
   ULang:Vector<uint8>* G = (&this&);
   ULang:Vector<uint8>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<uint8>:Insert^ULang:Vector<uint8>&,uptr,u8&imut[ULang:Vector<uint8>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Insert:(&this&)
//Variable:ULang:Vector<uint8>:Insert:Index
//Variable:ULang:Vector<uint8>:Insert:Item

   ret;

|ULang:Vector<uint8>:Insert^ULang:Vector<uint8>&,uptr,u8mov[ULang:Vector<uint8>* (&this&),int64 Index,int8 Item] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Insert:(&this&)
//Variable:ULang:Vector<uint8>:Insert:Index
//Variable:ULang:Vector<uint8>:Insert:Item

   ret;

|ULang:Vector<uint8>:Append^ULang:Vector<uint8>&,ULang:Span<uint8>imut[ULang:Vector<uint8>* (&this&),ULang:Span<uint8> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Append:(&this&)
//Variable:ULang:Vector<uint8>:Append:Val

   ret;

|ULang:Vector<uint8>:Append^ULang:Vector<uint8>&,ULang:Span<uint8>mov[ULang:Vector<uint8>* (&this&),ULang:Span<uint8> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uint8>:Append:(&this&)
//Variable:ULang:Vector<uint8>:Append:Val

   ret;

|ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,uptr[ULang:Vector<uint8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<uint8>:(&Index&):(&this&)
//Variable:ULang:Vector<uint8>:(&Index&):Index


//File:/Types/Vector.uc
//Line:64

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&imut,uptr[ULang:Vector<uint8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<uint8>:(&Index&):(&this&)
//Variable:ULang:Vector<uint8>:(&Index&):Index


//File:/Types/Vector.uc
//Line:65

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&,ULang:Range_t<uintptr>[ULang:Vector<uint8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uint8>:

 [Block:0]


//Variable:ULang:Vector<uint8>:(&Index&):(&this&)
//Variable:ULang:Vector<uint8>:(&Index&):Range
//File:/Types/Vector.uc
//Line:65
//Line:70

   ULang:Vector<uint8>* A = (&this&);
   ULang:Span<uint8> B = ULang:Vector<uint8>:AsSpan^ULang:Vector<uint8>&(A);
   ULang:Span<uint8>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uint8> E = ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<uint8>:(&Index&)^ULang:Vector<uint8>&imut,ULang:Range_t<uintptr>[ULang:Vector<uint8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uint8>:

 [Block:0]


//Variable:ULang:Vector<uint8>:(&Index&):(&this&)
//Variable:ULang:Vector<uint8>:(&Index&):Range
//File:/Types/Vector.uc
//Line:70
//Line:71

   ULang:Vector<uint8>* A = (&this&);
   ULang:Span<uint8> B = ULang:Vector<uint8>:AsSpan^ULang:Vector<uint8>&(A);
   ULang:Span<uint8>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uint8> E = ULang:Span<uint8>:(&Index&)^ULang:Span<uint8>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<uint8>:AsSpan^ULang:Vector<uint8>&[ULang:Vector<uint8>* (&this&)] -> ULang:Span<uint8>:

 [Block:0]


//Variable:ULang:Vector<uint8>:AsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<uint8> A;
   ULang:Span<uint8>* B = &A;

//Line:73

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:Vector<uint8>:iAsSpan^ULang:Vector<uint8>&imut[ULang:Vector<uint8>* (&this&)] -> ULang:Span<uint8>:

 [Block:0]


//Variable:ULang:Vector<uint8>:iAsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<uint8> A;
   ULang:Span<uint8>* B = &A;

//Line:74

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uint8>:(&_new&)^ULang:Span<uint8>&,u8[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:Math:Max<sint32>^i32,i32[int32 A,int32 B] -> int32:

 [Block:0]


//Variable:ULang:Math:Max<sint32>:A
//Variable:ULang:Math:Max<sint32>:B
//File:/Helper/Math.uc
//Line:6

   int32 A = A;
   int32 B = B;
   int8 C = A>B;
   int8 D = !C;
   gotoif (D) _label0;
   int32 E = A;
   ret = E;
   goto _label1;

//Line:7
   _label0:

   int32 F = B;
   ret = F;

   _label1:

   ret;

|ULang:Math:Min<sint32>^i32,i32[int32 A,int32 B] -> int32:

 [Block:0]


//Variable:ULang:Math:Min<sint32>:A
//Variable:ULang:Math:Min<sint32>:B
//File:/Helper/Math.uc
//Line:10

   int32 A = A;
   int32 B = B;
   int8 C = A<B;
   int8 D = !C;
   gotoif (D) _label0;
   int32 E = A;
   ret = E;
   goto _label1;

//Line:11
   _label0:

   int32 F = B;
   ret = F;

   _label1:

   ret;

|ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&,i32&[ULang:Ptr<sint32>* (&this&),void* base] -> void:

 [Block:0]


//Variable:ULang:Ptr<sint32>:(&_new&):(&this&)
//Variable:ULang:Ptr<sint32>:(&_new&):base
//File:/Types/Ptr.uc
//Line:12

   void* A = base;
   (&this&)->__0 = A;
   ret;

|ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&[ULang:Ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Ptr<sint32>:Get:(&this&)


//File:/Types/Ptr.uc
//Line:14

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&imut[ULang:Ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Ptr<sint32>:Get:(&this&)


//File:/Types/Ptr.uc
//Line:15

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32&imut[ULang:Ptr<sint32>* (&this&),void* newvalue] -> void:

 [Block:0]


//Variable:ULang:Ptr<sint32>:Write:(&this&)
//Variable:ULang:Ptr<sint32>:Write:newvalue
//File:/Types/Ptr.uc
//Line:17

   int32 A = *newvalue;
   ULang:Ptr<sint32>* B = (&this&);
   void* C = ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&(B);
   *C = A;
   ret;

|ULang:Ptr<sint32>:Write^ULang:Ptr<sint32>&,i32mov[ULang:Ptr<sint32>* (&this&),int32 newvalue] -> void:

 [Block:0]


//Variable:ULang:Ptr<sint32>:Write:(&this&)
//Variable:ULang:Ptr<sint32>:Write:newvalue
//File:/Types/Ptr.uc
//Line:18

   int32 A = newvalue;
   ULang:Ptr<sint32>* B = (&this&);
   void* C = ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&(B);
   *C = A;
   ret;

|ULang:Ptr<sint32>:ReadPtr^ULang:Ptr<sint32>&imut[ULang:Ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Ptr<sint32>:ReadPtr:(&this&)
//File:/Types/Ptr.uc
//Line:20

   ULang:Ptr<sint32>* A = (&this&);
   void* B = ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&imut(A);
   ret = B;
   ret;

|ULang:Ptr<sint32>:(&IndirectMember&)^ULang:Ptr<sint32>&[ULang:Ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Ptr<sint32>:(&IndirectMember&):(&this&)
//File:/Types/Ptr.uc
//Line:22

   ULang:Ptr<sint32>* A = (&this&);
   void* B = ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&(A);
   ret = B;
   ret;

|ULang:Ptr<sint32>:(&IndirectMember&)^ULang:Ptr<sint32>&imut[ULang:Ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Ptr<sint32>:(&IndirectMember&):(&this&)
//File:/Types/Ptr.uc
//Line:24

   ULang:Ptr<sint32>* A = (&this&);
   void* B = ULang:Ptr<sint32>:Get^ULang:Ptr<sint32>&imut(A);
   ret = B;
   ret;

|ULang:Ptr<sint32>:ReassignTo^ULang:Ptr<sint32>&,i32&[ULang:Ptr<sint32>* (&this&),void* newbase] -> void:

 [Block:0]


//Variable:ULang:Ptr<sint32>:ReassignTo:(&this&)
//Variable:ULang:Ptr<sint32>:ReassignTo:newbase
//File:/Types/Ptr.uc
//Line:26

   void* A = newbase;
   (&this&)->__0 = A;
   ret;

|ULang:Ptr<sint32>:Make^i32&imut[void* V] -> ULang:Ptr<sint32>:

 [Block:0]


//Variable:ULang:Ptr<sint32>:Make:V
//File:/Types/Ptr.uc
//Line:0

   ULang:Ptr<sint32> A;
   ULang:Ptr<sint32>* B = &A;

//Line:30

   void* C = V;
   void D = ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&,i32&(B,C);
   ret = A;
   ret;

|ULang:Ptr<sint32>:Make^i32&[void* V] -> ULang:Ptr<sint32>:

 [Block:0]


//Variable:ULang:Ptr<sint32>:Make:V
//File:/Types/Ptr.uc
//Line:0

   ULang:Ptr<sint32> A;
   ULang:Ptr<sint32>* B = &A;

//Line:31

   void* C = V;
   void D = ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&,i32&(B,C);
   ret = A;
   ret;

|ULang:Ptr<sint32>:(&_new&)^ULang:Ptr<sint32>&[ULang:Ptr<sint32>* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:ptr<sint32>^i32&[void* V] -> ULang:Ptr<sint32>:

 [Block:0]


//Variable:ULang:ptr<sint32>:V
//File:/Types/Ptr.uc
//Line:5

   void* A = V;
   ULang:Ptr<sint32> B = ULang:Ptr<sint32>:Make^i32&(A);
   ret = B;
   ret;

|ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&[ULang:Vec2f_t<float32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vec2f_t<float32>:(&_new&):(&this&)
//File:/Types/Vec2.uc
//Line:7

   float32 A = 0.000000;
   (&this&)->__0 = A;

//Line:8

   float32 B = 0.000000;
   (&this&)->__1 = B;
   ret;

|ULang:Vec2f_t<float32>:(&_new&)^ULang:Vec2f_t<float32>&,f32,f32[ULang:Vec2f_t<float32>* (&this&),float32 x,float32 y] -> void:

 [Block:0]


//Variable:ULang:Vec2f_t<float32>:(&_new&):(&this&)
//Variable:ULang:Vec2f_t<float32>:(&_new&):x
//Variable:ULang:Vec2f_t<float32>:(&_new&):y
//File:/Types/Vec2.uc
//Line:11

   float32 A = x;
   (&this&)->__0 = A;

//Line:12

   float32 B = y;
   (&this&)->__1 = B;
   ret;

|ULang:Vec2f_t<float32>:(&equal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut[ULang:Vec2f_t<float32>* (&this&),ULang:Vec2f_t<float32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec2f_t<float32>:(&equal&):(&this&)
//Variable:ULang:Vec2f_t<float32>:(&equal&):Other

   ULang:Vec2f_t<float32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:15

   float32 B = A->__1;
   float32 C = Other->__1;
   int8 D = B==C;
   ULang:Vec2f_t<float32>* E = (&this&);
   float32 F = E->__0;
   float32 G = Other->__0;
   int8 H = F==G;
   int8 I = D&&H;
   ret = I;
   ret;

|ULang:Vec2f_t<float32>:(&notequal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut[ULang:Vec2f_t<float32>* (&this&),ULang:Vec2f_t<float32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec2f_t<float32>:(&notequal&):(&this&)
//Variable:ULang:Vec2f_t<float32>:(&notequal&):Other
//File:/Types/Vec2.uc
//Line:18

   ULang:Vec2f_t<float32>* A = (&this&);
   ULang:Vec2f_t<float32>* B = A;
   ULang:Vec2f_t<float32>* C = Other;
   int8 D = ULang:Vec2f_t<float32>:(&equal&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:Vec2f_t<float32>:(&Compound_Plus&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut[ULang:Vec2f_t<float32>* (&this&),ULang:Vec2f_t<float32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec2f_t<float32>:(&Compound_Plus&):(&this&)
//Variable:ULang:Vec2f_t<float32>:(&Compound_Plus&):Other

   ULang:Vec2f_t<float32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:21

   ULang:Vec2f_t<float32>* B = (&this&);
   float32 C = B->__0;
   float32 D = Other->__0;
   float32 E = C+D;
   A->__0 = E;
   ULang:Vec2f_t<float32>* F = (&this&);

//Line:22

   ULang:Vec2f_t<float32>* G = (&this&);
   float32 H = G->__1;
   float32 I = Other->__1;
   float32 J = H+I;
   F->__1 = J;
   ret;

|ULang:Vec2f_t<float32>:(&Compound_Sub&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut[ULang:Vec2f_t<float32>* (&this&),ULang:Vec2f_t<float32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec2f_t<float32>:(&Compound_Sub&):(&this&)
//Variable:ULang:Vec2f_t<float32>:(&Compound_Sub&):Other

   ULang:Vec2f_t<float32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:25

   ULang:Vec2f_t<float32>* B = (&this&);
   float32 C = B->__0;
   float32 D = Other->__0;
   float32 E = C-D;
   A->__0 = E;
   ULang:Vec2f_t<float32>* F = (&this&);

//Line:26

   ULang:Vec2f_t<float32>* G = (&this&);
   float32 H = G->__1;
   float32 I = Other->__1;
   float32 J = H-I;
   F->__1 = J;
   ret;

|ULang:Vec2f_t<float32>:(&Plus&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut[ULang:Vec2f_t<float32>* (&this&),ULang:Vec2f_t<float32>* Other] -> ULang:Vec2f_t<float32>:

 [Block:0]


//Variable:ULang:Vec2f_t<float32>:(&Plus&):(&this&)
//Variable:ULang:Vec2f_t<float32>:(&Plus&):Other
//File:/Types/Vec2.uc
//Line:29
//Variable:ULang:Vec2f_t<float32>:(&Plus&):copy

   ULang:Vec2f_t<float32> A;
   ULang:Vec2f_t<float32>* B = (&this&);
   ULang:Vec2f_t<float32> C = *B;
   A = C;

//Line:30

   ULang:Vec2f_t<float32>* D = &A;
   ULang:Vec2f_t<float32>* E = Other;
   void F = ULang:Vec2f_t<float32>:(&Compound_Plus&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut(D,E);

//Line:31

   ULang:Vec2f_t<float32> G = A;
   ret = G;
   ret;

|ULang:Vec2f_t<float32>:(&Minus&)^ULang:Vec2f_t<float32>&imut,ULang:Vec2f_t<float32>&imut[ULang:Vec2f_t<float32>* (&this&),ULang:Vec2f_t<float32>* Other] -> ULang:Vec2f_t<float32>:

 [Block:0]


//Variable:ULang:Vec2f_t<float32>:(&Minus&):(&this&)
//Variable:ULang:Vec2f_t<float32>:(&Minus&):Other
//File:/Types/Vec2.uc
//Line:34
//Variable:ULang:Vec2f_t<float32>:(&Minus&):copy

   ULang:Vec2f_t<float32> A;
   ULang:Vec2f_t<float32>* B = (&this&);
   ULang:Vec2f_t<float32> C = *B;
   A = C;

//Line:35

   ULang:Vec2f_t<float32>* D = &A;
   ULang:Vec2f_t<float32>* E = Other;
   void F = ULang:Vec2f_t<float32>:(&Compound_Sub&)^ULang:Vec2f_t<float32>&,ULang:Vec2f_t<float32>&imut(D,E);

//Line:36

   ULang:Vec2f_t<float32> G = A;
   ret = G;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&),ULang:Vec2f_t<float32>* base] -> void:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&):(&this&)
//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&):base
//File:/Types/Ptr.uc
//Line:12

   ULang:Vec2f_t<float32>* A = base;
   (&this&)->__0 = A;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&)] -> ULang:Vec2f_t<float32>*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:Get:(&this&)


//File:/Types/Ptr.uc
//Line:14

   ULang:Vec2f_t<float32>* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&imut[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&)] -> ULang:Vec2f_t<float32>*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:Get:(&this&)


//File:/Types/Ptr.uc
//Line:15

   ULang:Vec2f_t<float32>* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:Write^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&imut[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&),ULang:Vec2f_t<float32>* newvalue] -> void:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:Write:(&this&)
//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:Write:newvalue
//File:/Types/Ptr.uc
//Line:17

   ULang:Vec2f_t<float32> A = *newvalue;
   ULang:Ptr<ULang:Vec2f_t<float32>>* B = (&this&);
   ULang:Vec2f_t<float32>* C = ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&(B);
   *C = A;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:Write^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>mov[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&),ULang:Vec2f_t<float32> newvalue] -> void:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:Write:(&this&)
//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:Write:newvalue
//File:/Types/Ptr.uc
//Line:18

   ULang:Vec2f_t<float32> A = newvalue;
   ULang:Ptr<ULang:Vec2f_t<float32>>* B = (&this&);
   ULang:Vec2f_t<float32>* C = ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&(B);
   *C = A;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:ReadPtr^ULang:Ptr<ULang:Vec2f_t<float32>>&imut[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&)] -> ULang:Vec2f_t<float32>*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:ReadPtr:(&this&)
//File:/Types/Ptr.uc
//Line:20

   ULang:Ptr<ULang:Vec2f_t<float32>>* A = (&this&);
   ULang:Vec2f_t<float32>* B = ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&imut(A);
   ret = B;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&)] -> ULang:Vec2f_t<float32>*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&):(&this&)
//File:/Types/Ptr.uc
//Line:22

   ULang:Ptr<ULang:Vec2f_t<float32>>* A = (&this&);
   ULang:Vec2f_t<float32>* B = ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&(A);
   ret = B;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&)^ULang:Ptr<ULang:Vec2f_t<float32>>&imut[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&)] -> ULang:Vec2f_t<float32>*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:(&IndirectMember&):(&this&)
//File:/Types/Ptr.uc
//Line:24

   ULang:Ptr<ULang:Vec2f_t<float32>>* A = (&this&);
   ULang:Vec2f_t<float32>* B = ULang:Ptr<ULang:Vec2f_t<float32>>:Get^ULang:Ptr<ULang:Vec2f_t<float32>>&imut(A);
   ret = B;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:ReassignTo^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&),ULang:Vec2f_t<float32>* newbase] -> void:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:ReassignTo:(&this&)
//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:ReassignTo:newbase
//File:/Types/Ptr.uc
//Line:26

   ULang:Vec2f_t<float32>* A = newbase;
   (&this&)->__0 = A;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:Make^ULang:Vec2f_t<float32>&imut[ULang:Vec2f_t<float32>* V] -> ULang:Ptr<ULang:Vec2f_t<float32>>:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:Make:V
//File:/Types/Ptr.uc
//Line:0

   ULang:Ptr<ULang:Vec2f_t<float32>> A;
   ULang:Ptr<ULang:Vec2f_t<float32>>* B = &A;

//Line:30

   ULang:Vec2f_t<float32>* C = V;
   void D = ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&(B,C);
   ret = A;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:Make^ULang:Vec2f_t<float32>&[ULang:Vec2f_t<float32>* V] -> ULang:Ptr<ULang:Vec2f_t<float32>>:

 [Block:0]


//Variable:ULang:Ptr<ULang:Vec2f_t<float32>>:Make:V
//File:/Types/Ptr.uc
//Line:0

   ULang:Ptr<ULang:Vec2f_t<float32>> A;
   ULang:Ptr<ULang:Vec2f_t<float32>>* B = &A;

//Line:31

   ULang:Vec2f_t<float32>* C = V;
   void D = ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&,ULang:Vec2f_t<float32>&(B,C);
   ret = A;
   ret;

|ULang:Ptr<ULang:Vec2f_t<float32>>:(&_new&)^ULang:Ptr<ULang:Vec2f_t<float32>>&[ULang:Ptr<ULang:Vec2f_t<float32>>* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:ptr<ULang:Vec2f_t<float32>>^ULang:Vec2f_t<float32>&[ULang:Vec2f_t<float32>* V] -> ULang:Ptr<ULang:Vec2f_t<float32>>:

 [Block:0]


//Variable:ULang:ptr<ULang:Vec2f_t<float32>>:V
//File:/Types/Ptr.uc
//Line:5

   ULang:Vec2f_t<float32>* A = V;
   ULang:Ptr<ULang:Vec2f_t<float32>> B = ULang:Ptr<ULang:Vec2f_t<float32>>:Make^ULang:Vec2f_t<float32>&(A);
   ret = B;
   ret;

|ULang:Swap<char&>^c&,c&[void* A,void* B] -> void:

 [Block:0]


//Variable:ULang:Swap<char&>:A
//Variable:ULang:Swap<char&>:B
//File:/Helper/Sort.uc
//Line:4
//Variable:ULang:Swap<char&>:C

   void* A;
   void* B = A;
   A = B;

//Line:5

   int8 C = *B;
   **A = C;

//Line:6

   int8 D = *A;
   **B = D;
   ret;

|ULang:Reverse<char>^ULang:StringSpan_t<char>[ULang:StringSpan_t<char> str] -> void:

 [Block:0]


//Variable:ULang:Reverse<char>:str
//File:/Helper/StringHelper.uc
//Line:6
//Variable:ULang:Reverse<char>:start

   int64 A;
   int64 B = 0;
   A = B;

//Line:7
//Variable:ULang:Reverse<char>:end

   int64 C;
   ULang:StringSpan_t<char>* D = &str;
   int64 E = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(D);
   int64 F = 1;
   int64 G = E-F;
   C = G;

//Line:9
   _label1:

   int64 H = A;
   int64 I = C;
   int8 J = H<I;
   int8 K = !J;
   gotoif (K) _label0;

//Line:10
//Line:9
//Line:10

   ULang:StringSpan_t<char>* L = &str;
   int64 M = A;
   void* N = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr(L,M);
   ULang:StringSpan_t<char>* O = &str;
   int64 P = C;
   void* Q = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr(O,P);
   void R = ULang:Swap<char&>^c&,c&(N,Q);

//Line:11

   int64 S = C;
   int64 T = 1;
   int64 U = S-T;
   C = U;

//Line:12

   int64 V = A;
   int64 W = 1;
   int64 X = V+W;
   A = X;
   goto _label1;

   _label0:

   ret;

|ULang:StartWith<char>^ULang:StringSpan_t<char>,ULang:StringSpan_t<char>[ULang:StringSpan_t<char> string,ULang:StringSpan_t<char> with] -> int8:

 [Block:0]


//Variable:ULang:StartWith<char>:string
//Variable:ULang:StartWith<char>:with
//File:/Helper/StringHelper.uc
//Line:19

   ULang:StringSpan_t<char>* A = &string;
   int64 B = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(A);
   ULang:StringSpan_t<char>* C = &with;
   int64 D = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(C);
   int8 E = B<D;
   int8 F = !E;
   gotoif (F) _label0;
   int8 G = 0;
   ret = G;
   goto _label1;

//Line:21
   _label0:

   int64 H;

//Variable:ULang:StartWith<char>:1851961417520:i

   int32 I = 0;
   H = I;

   _label4:

   int64 J = H;
   ULang:StringSpan_t<char>* K = &with;
   int64 L = ULang:StringSpan_t<char>:Size^ULang:StringSpan_t<char>&imut(K);
   int8 M = J<L;
   int8 N = !M;
   gotoif (N) _label2;

//Line:23

   ULang:StringSpan_t<char>* O = &string;
   int64 P = H;
   void* Q = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr(O,P);
   int8 R = *Q;
   ULang:StringSpan_t<char>* S = &with;
   int64 T = H;
   void* U = ULang:StringSpan_t<char>:(&Index&)^ULang:StringSpan_t<char>&,uptr(S,T);
   int8 V = *U;
   int8 W = R!=V;
   int8 X = !W;
   gotoif (X) _label3;
   int8 Y = 0;
   ret = Y;
   goto _label1;

//Line:25
   _label3:

   int8 Z = 1;
   ret = Z;
   goto _label1;

//Line:21

   int64 [ = H;
   int64 \ = 1;
   int64 ] = [+\;
   H = ];

   _label1:

   goto _label4;

   _label2:

   ret;

|ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&[ULang:Unique_ptr<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:(&_new&):(&this&)
//File:/Types/Unique_ptr.uc
//Line:7

   int64 A = 0;
   (&this&)->__0 = A;
   ret;

|ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&,ULang:Unique_ptr<sint32>&mov[ULang:Unique_ptr<sint32>* (&this&),ULang:Unique_ptr<sint32>* Value] -> void:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:(&_new&):(&this&)
//Variable:ULang:Unique_ptr<sint32>:(&_new&):Value
//File:/Types/Unique_ptr.uc
//Line:12

   void* A = Value->__0;
   (&this&)->__0 = A;

//Line:13

   int64 B = 0;
   Value->__0 = B;
   ret;

|ULang:Unique_ptr<sint32>:(&_drop&)^ULang:Unique_ptr<sint32>&[ULang:Unique_ptr<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:(&_drop&):(&this&)
//File:/Types/Unique_ptr.uc
//Line:16
//Variable:ULang:Unique_ptr<sint32>:(&_drop&):ptr

   int64 A;
   void* B = (&this&)->__0;
   A = B;

//Line:17

   int64 C = A;
   int64 D = 0;
   int8 E = C!=D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:18

   void* G = (&this&)->__0;
   LowLevel::Free(G);

   _label0:

   ret;

|ULang:Unique_ptr<sint32>:Make[] -> ULang:Unique_ptr<sint32>:

 [Block:0]


//File:/Types/Unique_ptr.uc
//Line:21
//Variable:ULang:Unique_ptr<sint32>:Make:r

   ULang:Unique_ptr<sint32> A;

//Line:0

   ULang:Unique_ptr<sint32>* B = &A;
   void C = ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&(B);

//Line:21
//Line:22

   int64 D = 4;
   void* E = LowLevel::Malloc(D);

//Line:0

   int32 F = 0;
   *E = F;

//Line:22

   A.__0 = E;

//Line:23

   ULang:Unique_ptr<sint32>* G = &A;
   ULang:Unique_ptr<sint32> H;
   ULang:Unique_ptr<sint32>* I = &H;
   void J = ULang:Unique_ptr<sint32>:(&_new&)^ULang:Unique_ptr<sint32>&,ULang:Unique_ptr<sint32>&mov(I,G);
   ret = H;

//Line:0

   ULang:Unique_ptr<sint32>* K = &A;
   void L = ULang:Unique_ptr<sint32>:(&_drop&)^ULang:Unique_ptr<sint32>&(K);
   ret;

|ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&[ULang:Unique_ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:Get:(&this&)


//File:/Types/Unique_ptr.uc
//Line:26

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&imut[ULang:Unique_ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:Get:(&this&)


//File:/Types/Unique_ptr.uc
//Line:27

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Unique_ptr<sint32>:Write^ULang:Unique_ptr<sint32>&,i32&imut[ULang:Unique_ptr<sint32>* (&this&),void* newvalue] -> void:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:Write:(&this&)
//Variable:ULang:Unique_ptr<sint32>:Write:newvalue
//File:/Types/Unique_ptr.uc
//Line:29

   int32 A = *newvalue;
   ULang:Unique_ptr<sint32>* B = (&this&);
   void* C = ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&(B);
   *C = A;
   ret;

|ULang:Unique_ptr<sint32>:Write^ULang:Unique_ptr<sint32>&,i32mov[ULang:Unique_ptr<sint32>* (&this&),int32 newvalue] -> void:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:Write:(&this&)
//Variable:ULang:Unique_ptr<sint32>:Write:newvalue
//File:/Types/Unique_ptr.uc
//Line:30

   int32 A = newvalue;
   ULang:Unique_ptr<sint32>* B = (&this&);
   void* C = ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&(B);
   *C = A;
   ret;

|ULang:Unique_ptr<sint32>:ReadPtr^ULang:Unique_ptr<sint32>&imut[ULang:Unique_ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:ReadPtr:(&this&)
//File:/Types/Unique_ptr.uc
//Line:32

   ULang:Unique_ptr<sint32>* A = (&this&);
   void* B = ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&imut(A);
   ret = B;
   ret;

|ULang:Unique_ptr<sint32>:(&IndirectMember&)^ULang:Unique_ptr<sint32>&[ULang:Unique_ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:(&IndirectMember&):(&this&)
//File:/Types/Unique_ptr.uc
//Line:34

   ULang:Unique_ptr<sint32>* A = (&this&);
   void* B = ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&(A);
   ret = B;
   ret;

|ULang:Unique_ptr<sint32>:(&IndirectMember&)^ULang:Unique_ptr<sint32>&imut[ULang:Unique_ptr<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Unique_ptr<sint32>:(&IndirectMember&):(&this&)
//File:/Types/Unique_ptr.uc
//Line:36

   ULang:Unique_ptr<sint32>* A = (&this&);
   void* B = ULang:Unique_ptr<sint32>:Get^ULang:Unique_ptr<sint32>&imut(A);
   ret = B;
   ret;

|ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&[ULang:Span<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Span<sint32>:(&_new&):(&this&)
//File:/Types/Span.uc
//Line:7

   int64 A = 0;
   (&this&)->__0 = A;

//Line:8

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr[ULang:Span<sint32>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:Span<sint32>:(&_new&):(&this&)
//Variable:ULang:Span<sint32>:(&_new&):data
//Variable:ULang:Span<sint32>:(&_new&):size
//File:/Types/Span.uc
//Line:11

   void* A = data;
   (&this&)->__0 = A;

//Line:12

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:Span<sint32>:Size^ULang:Span<sint32>&imut[ULang:Span<sint32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Span<sint32>:Size:(&this&)


//File:/Types/Span.uc
//Line:13

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Span<sint32>:Data^ULang:Span<sint32>&[ULang:Span<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<sint32>:Data:(&this&)


//File:/Types/Span.uc
//Line:14

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<sint32>:iData^ULang:Span<sint32>&imut[ULang:Span<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<sint32>:iData:(&this&)


//File:/Types/Span.uc
//Line:15

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,uptr[ULang:Span<sint32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<sint32>:(&Index&):(&this&)
//Variable:ULang:Span<sint32>:(&Index&):Index


//File:/Types/Span.uc
//Line:18

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&imut,uptr[ULang:Span<sint32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<sint32>:(&Index&):(&this&)
//Variable:ULang:Span<sint32>:(&Index&):Index


//File:/Types/Span.uc
//Line:19

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,ULang:Range_t<uintptr>[ULang:Span<sint32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<sint32>:

 [Block:0]


//Variable:ULang:Span<sint32>:(&Index&):(&this&)
//Variable:ULang:Span<sint32>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<sint32> A;
   ULang:Span<sint32>* B = &A;

//Line:21

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 4;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&imut,ULang:Range_t<uintptr>[ULang:Span<sint32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<sint32>:

 [Block:0]


//Variable:ULang:Span<sint32>:(&Index&):(&this&)
//Variable:ULang:Span<sint32>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<sint32> A;
   ULang:Span<sint32>* B = &A;

//Line:22

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 4;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Vector<sint32>:(&_new&)^ULang:Vector<sint32>&[ULang:Vector<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:(&_new&):(&this&)
//File:/Types/Vector.uc
//Line:9

   int64 A = 0;
   (&this&)->__0 = A;

//Line:10

   int64 B = 0;
   (&this&)->__1 = B;

//Line:11

   int64 C = 0;
   (&this&)->__2 = C;
   ret;

|ULang:Vector<sint32>:(&_drop&)^ULang:Vector<sint32>&[ULang:Vector<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:(&_drop&):(&this&)
//File:/Types/Vector.uc
//Line:13
//Variable:ULang:Vector<sint32>:(&_drop&):ptr

   int64 A;
   void* B = (&this&)->__0;
   A = B;

//Line:14

   int64 C = A;
   int64 D = 0;
   int8 E = C!=D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:15

   void* G = (&this&)->__0;
   LowLevel::Free(G);

   _label0:

   ret;

|ULang:Vector<sint32>:iData^ULang:Vector<sint32>&imut[ULang:Vector<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<sint32>:iData:(&this&)


//File:/Types/Vector.uc
//Line:17

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<sint32>:Data^ULang:Vector<sint32>&[ULang:Vector<sint32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<sint32>:Data:(&this&)


//File:/Types/Vector.uc
//Line:18

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<sint32>:Size^ULang:Vector<sint32>&imut[ULang:Vector<sint32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<sint32>:Size:(&this&)


//File:/Types/Vector.uc
//Line:20

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Vector<sint32>:Capacity^ULang:Vector<sint32>&imut[ULang:Vector<sint32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<sint32>:Capacity:(&this&)


//File:/Types/Vector.uc
//Line:21

   int64 A = (&this&)->__2;
   ret = A;
   ret;

|ULang:Vector<sint32>:Resize^ULang:Vector<sint32>&,uptr[ULang:Vector<sint32>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Resize:(&this&)
//Variable:ULang:Vector<sint32>:Resize:Size
//File:/Types/Vector.uc
//Line:24

   ULang:Vector<sint32>* A = (&this&);
   int64 B = Size;
   void C = ULang:Vector<sint32>:Reserve^ULang:Vector<sint32>&,uptr(A,B);

//Line:25

   int64 D = Size;
   (&this&)->__1 = D;
   ret;

|ULang:Vector<sint32>:Reserve^ULang:Vector<sint32>&,uptr[ULang:Vector<sint32>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Reserve:(&this&)
//Variable:ULang:Vector<sint32>:Reserve:Size
//File:/Types/Vector.uc
//Line:28

   int64 A = Size;
   int64 B = (&this&)->__2;
   int8 C = A>B;
   int8 D = !C;
   gotoif (D) _label0;

//Line:29
//Variable:ULang:Vector<sint32>:Reserve:1851963200432:oldsize

   int64 E;
   int64 F = (&this&)->__1;
   E = F;

//Line:30
//Variable:ULang:Vector<sint32>:Reserve:1851963200432:old

   void* G;
   void* H = (&this&)->__0;
   G = H;

//Line:33

   int64 I = Size;
   (&this&)->__2 = I;

//Line:34

   int64 J = Size;
   int64 K = 4;
   int64 L = J*K;
   void* M = LowLevel::Malloc(L);
   int64 N = 0;

   _label2:

   int8 O = N==J;
   gotoif (O) _label1;
   int64 P = N*K;
   void* Q = M+P;

//Line:0

   int32 R = 0;
   *Q = R;
   int32 S = 1;
   int64 T = N+S;
   N = T;
   goto _label2;

   _label1:

   (&this&)->__0 = M;

//Line:35

   int64 U;

//Variable:ULang:Vector<sint32>:Reserve:1851963200432:1851961879728:i

   int32 V = 0;
   U = V;

   _label4:

   int64 W = U;
   int64 X = E;
   int8 Y = W<X;
   int8 Z = !Y;
   gotoif (Z) _label3;

//Line:36

   void* [ = G;
   int64 \ = U;
   int64 ] = 4;
   int64 ^ = \*];
   void* _ = [+^;
   int32 ` = *_;
   void* a = (&this&)->__0;
   int64 b = U;
   int64 c = 4;
   int64 d = b*c;
   void* e = a+d;
   *e = `;

//Line:35

   int64 f = U;
   int64 g = 1;
   int64 h = f+g;
   U = h;
   goto _label4;

//Line:38
//Variable:ULang:Vector<sint32>:Reserve:1851963200432:ptr
   _label3:

   int64 i;
   void* j = G;
   i = j;

//Line:39

   int64 k = i;
   int64 l = 0;
   int8 m = k==l;
   int8 n = !m;
   gotoif (n) _label0;

//Line:40

   void* o = G;
   LowLevel::Free(o);

   _label0:

   ret;

|ULang:Vector<sint32>:Clear^ULang:Vector<sint32>&[ULang:Vector<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Clear:(&this&)
//File:/Types/Vector.uc
//Line:42

   int64 A = 0;
   (&this&)->__1 = A;
   ret;

|ULang:Vector<sint32>:Pop^ULang:Vector<sint32>&[ULang:Vector<sint32>* (&this&)] -> int32:

 [Block:0]


//Variable:ULang:Vector<sint32>:Pop:(&this&)

   ret;

|ULang:Vector<sint32>:Remove^ULang:Vector<sint32>&,uptr[ULang:Vector<sint32>* (&this&),int64 Index] -> int32:

 [Block:0]


//Variable:ULang:Vector<sint32>:Remove:(&this&)
//Variable:ULang:Vector<sint32>:Remove:Index

   ret;

|ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32&imut[ULang:Vector<sint32>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Push:(&this&)
//Variable:ULang:Vector<sint32>:Push:Val
//File:/Types/Vector.uc
//Line:48

   ULang:Vector<sint32>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<sint32>:Resize^ULang:Vector<sint32>&,uptr(A,D);

//Line:49

   int32 F = *Val;
   ULang:Vector<sint32>* G = (&this&);
   ULang:Vector<sint32>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<sint32>:Push^ULang:Vector<sint32>&,i32mov[ULang:Vector<sint32>* (&this&),int32 Val] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Push:(&this&)
//Variable:ULang:Vector<sint32>:Push:Val
//File:/Types/Vector.uc
//Line:53

   ULang:Vector<sint32>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<sint32>:Resize^ULang:Vector<sint32>&,uptr(A,D);

//Line:54

   int32 F = Val;
   ULang:Vector<sint32>* G = (&this&);
   ULang:Vector<sint32>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<sint32>:Insert^ULang:Vector<sint32>&,uptr,i32&imut[ULang:Vector<sint32>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Insert:(&this&)
//Variable:ULang:Vector<sint32>:Insert:Index
//Variable:ULang:Vector<sint32>:Insert:Item

   ret;

|ULang:Vector<sint32>:Insert^ULang:Vector<sint32>&,uptr,i32mov[ULang:Vector<sint32>* (&this&),int64 Index,int32 Item] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Insert:(&this&)
//Variable:ULang:Vector<sint32>:Insert:Index
//Variable:ULang:Vector<sint32>:Insert:Item

   ret;

|ULang:Vector<sint32>:Append^ULang:Vector<sint32>&,ULang:Span<sint32>imut[ULang:Vector<sint32>* (&this&),ULang:Span<sint32> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Append:(&this&)
//Variable:ULang:Vector<sint32>:Append:Val

   ret;

|ULang:Vector<sint32>:Append^ULang:Vector<sint32>&,ULang:Span<sint32>mov[ULang:Vector<sint32>* (&this&),ULang:Span<sint32> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<sint32>:Append:(&this&)
//Variable:ULang:Vector<sint32>:Append:Val

   ret;

|ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,uptr[ULang:Vector<sint32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<sint32>:(&Index&):(&this&)
//Variable:ULang:Vector<sint32>:(&Index&):Index


//File:/Types/Vector.uc
//Line:64

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&imut,uptr[ULang:Vector<sint32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<sint32>:(&Index&):(&this&)
//Variable:ULang:Vector<sint32>:(&Index&):Index


//File:/Types/Vector.uc
//Line:65

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&,ULang:Range_t<uintptr>[ULang:Vector<sint32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<sint32>:

 [Block:0]


//Variable:ULang:Vector<sint32>:(&Index&):(&this&)
//Variable:ULang:Vector<sint32>:(&Index&):Range
//File:/Types/Vector.uc
//Line:65
//Line:70

   ULang:Vector<sint32>* A = (&this&);
   ULang:Span<sint32> B = ULang:Vector<sint32>:AsSpan^ULang:Vector<sint32>&(A);
   ULang:Span<sint32>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<sint32> E = ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<sint32>:(&Index&)^ULang:Vector<sint32>&imut,ULang:Range_t<uintptr>[ULang:Vector<sint32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<sint32>:

 [Block:0]


//Variable:ULang:Vector<sint32>:(&Index&):(&this&)
//Variable:ULang:Vector<sint32>:(&Index&):Range
//File:/Types/Vector.uc
//Line:70
//Line:71

   ULang:Vector<sint32>* A = (&this&);
   ULang:Span<sint32> B = ULang:Vector<sint32>:AsSpan^ULang:Vector<sint32>&(A);
   ULang:Span<sint32>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<sint32> E = ULang:Span<sint32>:(&Index&)^ULang:Span<sint32>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<sint32>:AsSpan^ULang:Vector<sint32>&[ULang:Vector<sint32>* (&this&)] -> ULang:Span<sint32>:

 [Block:0]


//Variable:ULang:Vector<sint32>:AsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<sint32> A;
   ULang:Span<sint32>* B = &A;

//Line:73

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:Vector<sint32>:iAsSpan^ULang:Vector<sint32>&imut[ULang:Vector<sint32>* (&this&)] -> ULang:Span<sint32>:

 [Block:0]


//Variable:ULang:Vector<sint32>:iAsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<sint32> A;
   ULang:Span<sint32>* B = &A;

//Line:74

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<sint32>:(&_new&)^ULang:Span<sint32>&,i32[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:Range<uintptr>^uptr,uptr[int64 start,int64 end] -> ULang:Range_t<uintptr>:

 [Block:0]


//Variable:ULang:Range<uintptr>:start
//Variable:ULang:Range<uintptr>:end
//File:/Types/Range.uc
//Line:0

   ULang:Range_t<uintptr> A;
   ULang:Range_t<uintptr>* B = &A;

//Line:37

   int64 C = start;
   int64 D = end;
   void E = ULang:Range_t<uintptr>:(&_new&)^ULang:Range_t<uintptr>&,uptr,uptr(B,C,D);
   ret = A;
   ret;

|ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&,ULang:Empty&[ULang:Ptr<ULang:Empty>* (&this&),ULang:Empty* base] -> void:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:(&_new&):(&this&)
//Variable:ULang:Ptr<ULang:Empty>:(&_new&):base
//File:/Types/Ptr.uc
//Line:12

   ULang:Empty* A = base;
   (&this&)->__0 = A;
   ret;

|ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&[ULang:Ptr<ULang:Empty>* (&this&)] -> ULang:Empty*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:Get:(&this&)


//File:/Types/Ptr.uc
//Line:14

   ULang:Empty* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&imut[ULang:Ptr<ULang:Empty>* (&this&)] -> ULang:Empty*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:Get:(&this&)


//File:/Types/Ptr.uc
//Line:15

   ULang:Empty* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Ptr<ULang:Empty>:Write^ULang:Ptr<ULang:Empty>&,ULang:Empty&imut[ULang:Ptr<ULang:Empty>* (&this&),ULang:Empty* newvalue] -> void:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:Write:(&this&)
//Variable:ULang:Ptr<ULang:Empty>:Write:newvalue
//File:/Types/Ptr.uc
//Line:17

   ULang:Empty A = *newvalue;
   ULang:Ptr<ULang:Empty>* B = (&this&);
   ULang:Empty* C = ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&(B);
   *C = A;
   ret;

|ULang:Ptr<ULang:Empty>:Write^ULang:Ptr<ULang:Empty>&,ULang:Emptymov[ULang:Ptr<ULang:Empty>* (&this&),ULang:Empty newvalue] -> void:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:Write:(&this&)
//Variable:ULang:Ptr<ULang:Empty>:Write:newvalue
//File:/Types/Ptr.uc
//Line:18

   ULang:Empty A = newvalue;
   ULang:Ptr<ULang:Empty>* B = (&this&);
   ULang:Empty* C = ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&(B);
   *C = A;
   ret;

|ULang:Ptr<ULang:Empty>:ReadPtr^ULang:Ptr<ULang:Empty>&imut[ULang:Ptr<ULang:Empty>* (&this&)] -> ULang:Empty*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:ReadPtr:(&this&)
//File:/Types/Ptr.uc
//Line:20

   ULang:Ptr<ULang:Empty>* A = (&this&);
   ULang:Empty* B = ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&imut(A);
   ret = B;
   ret;

|ULang:Ptr<ULang:Empty>:(&IndirectMember&)^ULang:Ptr<ULang:Empty>&[ULang:Ptr<ULang:Empty>* (&this&)] -> ULang:Empty*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:(&IndirectMember&):(&this&)
//File:/Types/Ptr.uc
//Line:22

   ULang:Ptr<ULang:Empty>* A = (&this&);
   ULang:Empty* B = ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&(A);
   ret = B;
   ret;

|ULang:Ptr<ULang:Empty>:(&IndirectMember&)^ULang:Ptr<ULang:Empty>&imut[ULang:Ptr<ULang:Empty>* (&this&)] -> ULang:Empty*:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:(&IndirectMember&):(&this&)
//File:/Types/Ptr.uc
//Line:24

   ULang:Ptr<ULang:Empty>* A = (&this&);
   ULang:Empty* B = ULang:Ptr<ULang:Empty>:Get^ULang:Ptr<ULang:Empty>&imut(A);
   ret = B;
   ret;

|ULang:Ptr<ULang:Empty>:ReassignTo^ULang:Ptr<ULang:Empty>&,ULang:Empty&[ULang:Ptr<ULang:Empty>* (&this&),ULang:Empty* newbase] -> void:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:ReassignTo:(&this&)
//Variable:ULang:Ptr<ULang:Empty>:ReassignTo:newbase
//File:/Types/Ptr.uc
//Line:26

   ULang:Empty* A = newbase;
   (&this&)->__0 = A;
   ret;

|ULang:Ptr<ULang:Empty>:Make^ULang:Empty&imut[ULang:Empty* V] -> ULang:Ptr<ULang:Empty>:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:Make:V
//File:/Types/Ptr.uc
//Line:0

   ULang:Ptr<ULang:Empty> A;
   ULang:Ptr<ULang:Empty>* B = &A;

//Line:30

   ULang:Empty* C = V;
   void D = ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&,ULang:Empty&(B,C);
   ret = A;
   ret;

|ULang:Ptr<ULang:Empty>:Make^ULang:Empty&[ULang:Empty* V] -> ULang:Ptr<ULang:Empty>:

 [Block:0]


//Variable:ULang:Ptr<ULang:Empty>:Make:V
//File:/Types/Ptr.uc
//Line:0

   ULang:Ptr<ULang:Empty> A;
   ULang:Ptr<ULang:Empty>* B = &A;

//Line:31

   ULang:Empty* C = V;
   void D = ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&,ULang:Empty&(B,C);
   ret = A;
   ret;

|ULang:Ptr<ULang:Empty>:(&_new&)^ULang:Ptr<ULang:Empty>&[ULang:Ptr<ULang:Empty>* (&this&)] -> void:

 [Block:0]

   ret;

|ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&[ULang:Span<uft8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Span<uft8>:(&_new&):(&this&)
//File:/Types/Span.uc
//Line:7

   int64 A = 0;
   (&this&)->__0 = A;

//Line:8

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr[ULang:Span<uft8>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:Span<uft8>:(&_new&):(&this&)
//Variable:ULang:Span<uft8>:(&_new&):data
//Variable:ULang:Span<uft8>:(&_new&):size
//File:/Types/Span.uc
//Line:11

   void* A = data;
   (&this&)->__0 = A;

//Line:12

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:Span<uft8>:Size^ULang:Span<uft8>&imut[ULang:Span<uft8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Span<uft8>:Size:(&this&)


//File:/Types/Span.uc
//Line:13

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Span<uft8>:Data^ULang:Span<uft8>&[ULang:Span<uft8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<uft8>:Data:(&this&)


//File:/Types/Span.uc
//Line:14

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<uft8>:iData^ULang:Span<uft8>&imut[ULang:Span<uft8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<uft8>:iData:(&this&)


//File:/Types/Span.uc
//Line:15

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,uptr[ULang:Span<uft8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<uft8>:(&Index&):(&this&)
//Variable:ULang:Span<uft8>:(&Index&):Index


//File:/Types/Span.uc
//Line:18

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&imut,uptr[ULang:Span<uft8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<uft8>:(&Index&):(&this&)
//Variable:ULang:Span<uft8>:(&Index&):Index


//File:/Types/Span.uc
//Line:19

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>[ULang:Span<uft8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:Span<uft8>:(&Index&):(&this&)
//Variable:ULang:Span<uft8>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<uft8> A;
   ULang:Span<uft8>* B = &A;

//Line:21

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 1;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&imut,ULang:Range_t<uintptr>[ULang:Span<uft8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:Span<uft8>:(&Index&):(&this&)
//Variable:ULang:Span<uft8>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<uft8> A;
   ULang:Span<uft8>* B = &A;

//Line:22

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 1;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Vector<uft8>:(&_new&)^ULang:Vector<uft8>&[ULang:Vector<uft8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:(&_new&):(&this&)
//File:/Types/Vector.uc
//Line:9

   int64 A = 0;
   (&this&)->__0 = A;

//Line:10

   int64 B = 0;
   (&this&)->__1 = B;

//Line:11

   int64 C = 0;
   (&this&)->__2 = C;
   ret;

|ULang:Vector<uft8>:(&_drop&)^ULang:Vector<uft8>&[ULang:Vector<uft8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:(&_drop&):(&this&)
//File:/Types/Vector.uc
//Line:13
//Variable:ULang:Vector<uft8>:(&_drop&):ptr

   int64 A;
   void* B = (&this&)->__0;
   A = B;

//Line:14

   int64 C = A;
   int64 D = 0;
   int8 E = C!=D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:15

   void* G = (&this&)->__0;
   LowLevel::Free(G);

   _label0:

   ret;

|ULang:Vector<uft8>:iData^ULang:Vector<uft8>&imut[ULang:Vector<uft8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft8>:iData:(&this&)


//File:/Types/Vector.uc
//Line:17

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<uft8>:Data^ULang:Vector<uft8>&[ULang:Vector<uft8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft8>:Data:(&this&)


//File:/Types/Vector.uc
//Line:18

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<uft8>:Size^ULang:Vector<uft8>&imut[ULang:Vector<uft8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<uft8>:Size:(&this&)


//File:/Types/Vector.uc
//Line:20

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Vector<uft8>:Capacity^ULang:Vector<uft8>&imut[ULang:Vector<uft8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<uft8>:Capacity:(&this&)


//File:/Types/Vector.uc
//Line:21

   int64 A = (&this&)->__2;
   ret = A;
   ret;

|ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr[ULang:Vector<uft8>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Resize:(&this&)
//Variable:ULang:Vector<uft8>:Resize:Size
//File:/Types/Vector.uc
//Line:24

   ULang:Vector<uft8>* A = (&this&);
   int64 B = Size;
   void C = ULang:Vector<uft8>:Reserve^ULang:Vector<uft8>&,uptr(A,B);

//Line:25

   int64 D = Size;
   (&this&)->__1 = D;
   ret;

|ULang:Vector<uft8>:Reserve^ULang:Vector<uft8>&,uptr[ULang:Vector<uft8>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Reserve:(&this&)
//Variable:ULang:Vector<uft8>:Reserve:Size
//File:/Types/Vector.uc
//Line:28

   int64 A = Size;
   int64 B = (&this&)->__2;
   int8 C = A>B;
   int8 D = !C;
   gotoif (D) _label0;

//Line:29
//Variable:ULang:Vector<uft8>:Reserve:1851963200432:oldsize

   int64 E;
   int64 F = (&this&)->__1;
   E = F;

//Line:30
//Variable:ULang:Vector<uft8>:Reserve:1851963200432:old

   void* G;
   void* H = (&this&)->__0;
   G = H;

//Line:33

   int64 I = Size;
   (&this&)->__2 = I;

//Line:34

   int64 J = Size;
   int64 K = 1;
   int64 L = J*K;
   void* M = LowLevel::Malloc(L);
   int64 N = 0;

   _label2:

   int8 O = N==J;
   gotoif (O) _label1;
   int64 P = N*K;
   void* Q = M+P;

//Line:0

   int8 R = 0;
   *Q = R;
   int32 S = 1;
   int64 T = N+S;
   N = T;
   goto _label2;

   _label1:

   (&this&)->__0 = M;

//Line:35

   int64 U;

//Variable:ULang:Vector<uft8>:Reserve:1851963200432:1851961879728:i

   int32 V = 0;
   U = V;

   _label4:

   int64 W = U;
   int64 X = E;
   int8 Y = W<X;
   int8 Z = !Y;
   gotoif (Z) _label3;

//Line:36

   void* [ = G;
   int64 \ = U;
   int64 ] = 1;
   int64 ^ = \*];
   void* _ = [+^;
   int8 ` = *_;
   void* a = (&this&)->__0;
   int64 b = U;
   int64 c = 1;
   int64 d = b*c;
   void* e = a+d;
   *e = `;

//Line:35

   int64 f = U;
   int64 g = 1;
   int64 h = f+g;
   U = h;
   goto _label4;

//Line:38
//Variable:ULang:Vector<uft8>:Reserve:1851963200432:ptr
   _label3:

   int64 i;
   void* j = G;
   i = j;

//Line:39

   int64 k = i;
   int64 l = 0;
   int8 m = k==l;
   int8 n = !m;
   gotoif (n) _label0;

//Line:40

   void* o = G;
   LowLevel::Free(o);

   _label0:

   ret;

|ULang:Vector<uft8>:Clear^ULang:Vector<uft8>&[ULang:Vector<uft8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Clear:(&this&)
//File:/Types/Vector.uc
//Line:42

   int64 A = 0;
   (&this&)->__1 = A;
   ret;

|ULang:Vector<uft8>:Pop^ULang:Vector<uft8>&[ULang:Vector<uft8>* (&this&)] -> int8:

 [Block:0]


//Variable:ULang:Vector<uft8>:Pop:(&this&)

   ret;

|ULang:Vector<uft8>:Remove^ULang:Vector<uft8>&,uptr[ULang:Vector<uft8>* (&this&),int64 Index] -> int8:

 [Block:0]


//Variable:ULang:Vector<uft8>:Remove:(&this&)
//Variable:ULang:Vector<uft8>:Remove:Index

   ret;

|ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,&imut[ULang:Vector<uft8>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Push:(&this&)
//Variable:ULang:Vector<uft8>:Push:Val
//File:/Types/Vector.uc
//Line:48

   ULang:Vector<uft8>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr(A,D);

//Line:49

   int8 F = *Val;
   ULang:Vector<uft8>* G = (&this&);
   ULang:Vector<uft8>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,mov[ULang:Vector<uft8>* (&this&),int8 Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Push:(&this&)
//Variable:ULang:Vector<uft8>:Push:Val
//File:/Types/Vector.uc
//Line:53

   ULang:Vector<uft8>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr(A,D);

//Line:54

   int8 F = Val;
   ULang:Vector<uft8>* G = (&this&);
   ULang:Vector<uft8>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,&imut[ULang:Vector<uft8>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Insert:(&this&)
//Variable:ULang:Vector<uft8>:Insert:Index
//Variable:ULang:Vector<uft8>:Insert:Item

   ret;

|ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,mov[ULang:Vector<uft8>* (&this&),int64 Index,int8 Item] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Insert:(&this&)
//Variable:ULang:Vector<uft8>:Insert:Index
//Variable:ULang:Vector<uft8>:Insert:Item

   ret;

|ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>imut[ULang:Vector<uft8>* (&this&),ULang:Span<uft8> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Append:(&this&)
//Variable:ULang:Vector<uft8>:Append:Val

   ret;

|ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>mov[ULang:Vector<uft8>* (&this&),ULang:Span<uft8> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft8>:Append:(&this&)
//Variable:ULang:Vector<uft8>:Append:Val

   ret;

|ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr[ULang:Vector<uft8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft8>:(&Index&):(&this&)
//Variable:ULang:Vector<uft8>:(&Index&):Index


//File:/Types/Vector.uc
//Line:64

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&imut,uptr[ULang:Vector<uft8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft8>:(&Index&):(&this&)
//Variable:ULang:Vector<uft8>:(&Index&):Index


//File:/Types/Vector.uc
//Line:65

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,ULang:Range_t<uintptr>[ULang:Vector<uft8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:Vector<uft8>:(&Index&):(&this&)
//Variable:ULang:Vector<uft8>:(&Index&):Range
//File:/Types/Vector.uc
//Line:65
//Line:70

   ULang:Vector<uft8>* A = (&this&);
   ULang:Span<uft8> B = ULang:Vector<uft8>:AsSpan^ULang:Vector<uft8>&(A);
   ULang:Span<uft8>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft8> E = ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&imut,ULang:Range_t<uintptr>[ULang:Vector<uft8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:Vector<uft8>:(&Index&):(&this&)
//Variable:ULang:Vector<uft8>:(&Index&):Range
//File:/Types/Vector.uc
//Line:70
//Line:71

   ULang:Vector<uft8>* A = (&this&);
   ULang:Span<uft8> B = ULang:Vector<uft8>:AsSpan^ULang:Vector<uft8>&(A);
   ULang:Span<uft8>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft8> E = ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<uft8>:AsSpan^ULang:Vector<uft8>&[ULang:Vector<uft8>* (&this&)] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:Vector<uft8>:AsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<uft8> A;
   ULang:Span<uft8>* B = &A;

//Line:73

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:Vector<uft8>:iAsSpan^ULang:Vector<uft8>&imut[ULang:Vector<uft8>* (&this&)] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:Vector<uft8>:iAsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<uft8> A;
   ULang:Span<uft8>* B = &A;

//Line:74

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&[ULang:StringSpan_t<uft8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:(&_new&):(&this&)
//File:/Types/String.uc
//Line:12

   int64 A = 0;
   (&this&)->__0 = A;

//Line:13

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&,[&],uptr[ULang:StringSpan_t<uft8>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:(&_new&):(&this&)
//Variable:ULang:StringSpan_t<uft8>:(&_new&):data
//Variable:ULang:StringSpan_t<uft8>:(&_new&):size
//File:/Types/String.uc
//Line:16

   void* A = data;
   (&this&)->__0 = A;

//Line:17

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut[ULang:StringSpan_t<uft8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:Size:(&this&)


//File:/Types/String.uc
//Line:19

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:StringSpan_t<uft8>:iData^ULang:StringSpan_t<uft8>&imut[ULang:StringSpan_t<uft8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:iData:(&this&)


//File:/Types/String.uc
//Line:20

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:StringSpan_t<uft8>:Data^ULang:StringSpan_t<uft8>&[ULang:StringSpan_t<uft8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:Data:(&this&)


//File:/Types/String.uc
//Line:21

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut[ULang:StringSpan_t<uft8>* (&this&),ULang:StringSpan_t<uft8>* Other] -> int8:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:(&equal&):(&this&)
//Variable:ULang:StringSpan_t<uft8>:(&equal&):Other
//File:/Types/String.uc
//Line:24

   ULang:StringSpan_t<uft8>* A = (&this&);
   ULang:StringSpan_t<uft8>* B = A;
   int64 C = ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut(B);
   ULang:StringSpan_t<uft8>* D = Other;
   int64 E = ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut(D);
   int8 F = C!=E;
   int8 G = !F;
   gotoif (G) _label0;
   int8 H = 0;
   ret = H;
   goto _label1;

//Line:26
   _label0:

   int64 I;

//Variable:ULang:StringSpan_t<uft8>:(&equal&):1851961762880:i

   int32 J = 0;
   I = J;

   _label4:

   int64 K = I;
   ULang:StringSpan_t<uft8>* L = (&this&);
   ULang:StringSpan_t<uft8>* M = L;
   int64 N = ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut(M);
   int8 O = K<N;
   int8 P = !O;
   gotoif (P) _label2;
   ULang:StringSpan_t<uft8>* Q = (&this&);

//Line:28

   ULang:StringSpan_t<uft8>* R = Q;
   int64 S = I;
   void* T = ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr(R,S);
   int8 U = *T;
   ULang:StringSpan_t<uft8>* V = Other;
   int64 W = I;
   void* X = ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr(V,W);
   int8 Y = *X;
   int8 Z = U!=Y;
   int8 [ = !Z;
   gotoif ([) _label3;
   int8 \ = 0;
   ret = \;
   goto _label1;

//Line:26
   _label3:

   int64 ] = I;
   int64 ^ = 1;
   int64 _ = ]+^;
   I = _;
   goto _label4;

//Line:30
   _label2:

   int8 ` = 1;
   ret = `;

   _label1:

   ret;

|ULang:StringSpan_t<uft8>:(&notequal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut[ULang:StringSpan_t<uft8>* (&this&),ULang:StringSpan_t<uft8>* Other] -> int8:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:(&notequal&):(&this&)
//Variable:ULang:StringSpan_t<uft8>:(&notequal&):Other
//File:/Types/String.uc
//Line:32

   ULang:StringSpan_t<uft8>* A = (&this&);
   ULang:StringSpan_t<uft8>* B = A;
   ULang:StringSpan_t<uft8>* C = Other;
   int8 D = ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft8>:AsSpan^ULang:StringSpan_t<uft8>&[ULang:StringSpan_t<uft8>* (&this&)] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:AsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft8> A;
   ULang:Span<uft8>* B = &A;

//Line:34

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft8>:iAsSpan^ULang:StringSpan_t<uft8>&imut[ULang:StringSpan_t<uft8>* (&this&)] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:iAsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft8> A;
   ULang:Span<uft8>* B = &A;

//Line:35

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&[ULang:Span<uft8>* span] -> ULang:StringSpan_t<uft8>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:ToStr:span
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft8> A;
   ULang:StringSpan_t<uft8>* B = &A;

//Line:38

   ULang:Span<uft8>* C = span;
   void* D = ULang:Span<uft8>:Data^ULang:Span<uft8>&(C);
   ULang:Span<uft8>* E = span;
   int64 F = ULang:Span<uft8>:Size^ULang:Span<uft8>&imut(E);
   void G = ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&,[&],uptr(B,D,F);
   ret = A;
   ret;

|ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&imut[ULang:Span<uft8>* span] -> ULang:StringSpan_t<uft8>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:ToStr:span
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft8> A;
   ULang:StringSpan_t<uft8>* B = &A;

//Line:39

   ULang:Span<uft8>* C = span;
   void* D = ULang:Span<uft8>:Data^ULang:Span<uft8>&(C);
   ULang:Span<uft8>* E = span;
   int64 F = ULang:Span<uft8>:Size^ULang:Span<uft8>&imut(E);
   void G = ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&,[&],uptr(B,D,F);
   ret = A;
   ret;

|ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr[ULang:StringSpan_t<uft8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft8>:(&Index&):Index


//File:/Types/String.uc
//Line:41

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&imut,uptr[ULang:StringSpan_t<uft8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft8>:(&Index&):Index


//File:/Types/String.uc
//Line:42

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 1;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,ULang:Range_t<uintptr>[ULang:StringSpan_t<uft8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft8>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft8>:(&Index&):Range
//File:/Types/String.uc
//Line:44
//Line:42
//Line:44

   ULang:StringSpan_t<uft8>* A = (&this&);
   ULang:Span<uft8> B = ULang:StringSpan_t<uft8>:AsSpan^ULang:StringSpan_t<uft8>&(A);
   ULang:Span<uft8>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft8> E = ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>(C,D);
   ULang:Span<uft8>* F = &E;
   ULang:StringSpan_t<uft8> G = ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&(F);
   ret = G;
   ret;

|ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&imut,ULang:Range_t<uintptr>[ULang:StringSpan_t<uft8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft8>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft8>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft8>:(&Index&):Range
//File:/Types/String.uc
//Line:45
//Line:44
//Line:45

   ULang:StringSpan_t<uft8>* A = (&this&);
   ULang:Span<uft8> B = ULang:StringSpan_t<uft8>:AsSpan^ULang:StringSpan_t<uft8>&(A);
   ULang:Span<uft8>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft8> E = ULang:Span<uft8>:(&Index&)^ULang:Span<uft8>&,ULang:Range_t<uintptr>(C,D);
   ULang:Span<uft8>* F = &E;
   ULang:StringSpan_t<uft8> G = ULang:StringSpan_t<uft8>:ToStr^ULang:Span<uft8>&(F);
   ret = G;
   ret;

|ULang:String_t<uft8>:(&_init&)[ULang:String_t<uft8>* (&this&)] -> void:

 [Block:0]


//File:/Types/String.uc
//Line:49

   ULang:Vector<uft8>* A = &(&this&)->__0;

//Line:0

   void B = ULang:Vector<uft8>:(&_new&)^ULang:Vector<uft8>&(A);
   ret;

|ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&[ULang:String_t<uft8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&_new&):(&this&)

   ULang:String_t<uft8>* A = (&this&);
   void B = ULang:String_t<uft8>:(&_init&)(A);
   ret;

|ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:StringSpan_t<uft8>* span] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&_new&):(&this&)
//Variable:ULang:String_t<uft8>:(&_new&):span

   ULang:String_t<uft8>* A = (&this&);
   void B = ULang:String_t<uft8>:(&_init&)(A);

//File:/Types/String.uc
//Line:58

   ULang:String_t<uft8>* C = (&this&);
   ULang:StringSpan_t<uft8>* D = span;
   int64 E = ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut(D);
   void F = ULang:String_t<uft8>:Resize^ULang:String_t<uft8>&,uptr(C,E);

//Line:59

   int64 G;

//Variable:ULang:String_t<uft8>:(&_new&):1851962032560:i

   int32 H = 0;
   G = H;

   _label1:

   int64 I = G;
   ULang:StringSpan_t<uft8>* J = span;
   int64 K = ULang:StringSpan_t<uft8>:Size^ULang:StringSpan_t<uft8>&imut(J);
   int8 L = I<K;
   int8 M = !L;
   gotoif (M) _label0;
   ULang:StringSpan_t<uft8>* N = span;
   int64 O = G;
   void* P = ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,uptr(N,O);
   int8 Q = *P;
   ULang:String_t<uft8>* R = (&this&);
   ULang:String_t<uft8>* S = R;
   int64 T = G;
   void* U = ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&,uptr(S,T);
   *U = Q;
   int64 V = G;
   int64 W = 1;
   int64 X = V+W;
   G = X;
   goto _label1;

   _label0:

   ret;

|ULang:String_t<uft8>:iData^ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft8>:iData:(&this&)
//File:/Types/String.uc
//Line:61

   ULang:Vector<uft8>* A = &(&this&)->__0;
   void* B = ULang:Vector<uft8>:iData^ULang:Vector<uft8>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft8>:Data^ULang:String_t<uft8>&[ULang:String_t<uft8>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft8>:Data:(&this&)
//File:/Types/String.uc
//Line:62

   ULang:Vector<uft8>* A = &(&this&)->__0;
   void* B = ULang:Vector<uft8>:Data^ULang:Vector<uft8>&(A);
   ret = B;
   ret;

|ULang:String_t<uft8>:Size^ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:String_t<uft8>:Size:(&this&)
//File:/Types/String.uc
//Line:65

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = ULang:Vector<uft8>:Size^ULang:Vector<uft8>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft8>:Capacity^ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:String_t<uft8>:Capacity:(&this&)
//File:/Types/String.uc
//Line:66

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = ULang:Vector<uft8>:Capacity^ULang:Vector<uft8>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft8>:Resize^ULang:String_t<uft8>&,uptr[ULang:String_t<uft8>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Resize:(&this&)
//Variable:ULang:String_t<uft8>:Resize:Size
//File:/Types/String.uc
//Line:68

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = Size;
   void C = ULang:Vector<uft8>:Resize^ULang:Vector<uft8>&,uptr(A,B);
   ret;

|ULang:String_t<uft8>:Reserve^ULang:String_t<uft8>&,uptr[ULang:String_t<uft8>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Reserve:(&this&)
//Variable:ULang:String_t<uft8>:Reserve:Size
//File:/Types/String.uc
//Line:69

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = Size;
   void C = ULang:Vector<uft8>:Reserve^ULang:Vector<uft8>&,uptr(A,B);
   ret;

|ULang:String_t<uft8>:Clear^ULang:String_t<uft8>&[ULang:String_t<uft8>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Clear:(&this&)
//File:/Types/String.uc
//Line:70

   ULang:Vector<uft8>* A = &(&this&)->__0;
   void B = ULang:Vector<uft8>:Clear^ULang:Vector<uft8>&(A);
   ret;

|ULang:String_t<uft8>:Pop^ULang:String_t<uft8>&[ULang:String_t<uft8>* (&this&)] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft8>:Pop:(&this&)
//File:/Types/String.uc
//Line:72

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int8 B = ULang:Vector<uft8>:Pop^ULang:Vector<uft8>&(A);
   ret = B;
   ret;

|ULang:String_t<uft8>:Remove^ULang:String_t<uft8>&,uptr[ULang:String_t<uft8>* (&this&),int64 Index] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft8>:Remove:(&this&)
//Variable:ULang:String_t<uft8>:Remove:Index
//File:/Types/String.uc
//Line:73

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = Index;
   int8 C = ULang:Vector<uft8>:Remove^ULang:Vector<uft8>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft8>:Push^ULang:String_t<uft8>&,&imut[ULang:String_t<uft8>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Push:(&this&)
//Variable:ULang:String_t<uft8>:Push:Val
//File:/Types/String.uc
//Line:75

   ULang:Vector<uft8>* A = &(&this&)->__0;
   void* B = Val;
   void C = ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,&imut(A,B);
   ret;

|ULang:String_t<uft8>:Push^ULang:String_t<uft8>&,mov[ULang:String_t<uft8>* (&this&),int8 Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Push:(&this&)
//Variable:ULang:String_t<uft8>:Push:Val
//File:/Types/String.uc
//Line:76

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int8 B = Val;
   void C = ULang:Vector<uft8>:Push^ULang:Vector<uft8>&,mov(A,B);
   ret;

|ULang:String_t<uft8>:Insert^ULang:String_t<uft8>&,uptr,&imut[ULang:String_t<uft8>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Insert:(&this&)
//Variable:ULang:String_t<uft8>:Insert:Index
//Variable:ULang:String_t<uft8>:Insert:Item
//File:/Types/String.uc
//Line:78

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = Item;
   void D = ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,&imut(A,B,C);
   ret;

|ULang:String_t<uft8>:Insert^ULang:String_t<uft8>&,uptr,mov[ULang:String_t<uft8>* (&this&),int64 Index,int8 Item] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Insert:(&this&)
//Variable:ULang:String_t<uft8>:Insert:Index
//Variable:ULang:String_t<uft8>:Insert:Item
//File:/Types/String.uc
//Line:79

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = Index;
   int8 C = Item;
   void D = ULang:Vector<uft8>:Insert^ULang:Vector<uft8>&,uptr,mov(A,B,C);
   ret;

|ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&,uptr[ULang:String_t<uft8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&Index&):(&this&)
//Variable:ULang:String_t<uft8>:(&Index&):Index
//File:/Types/String.uc
//Line:79


//Line:82

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&imut,uptr[ULang:String_t<uft8>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&Index&):(&this&)
//Variable:ULang:String_t<uft8>:(&Index&):Index
//File:/Types/String.uc
//Line:82


//Line:83

   ULang:Vector<uft8>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = ULang:Vector<uft8>:(&Index&)^ULang:Vector<uft8>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft8>:Append^ULang:String_t<uft8>&,ULang:Span<uft8>imut[ULang:String_t<uft8>* (&this&),ULang:Span<uft8> Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Append:(&this&)
//Variable:ULang:String_t<uft8>:Append:Val
//File:/Types/String.uc
//Line:85

   ULang:Vector<uft8>* A = &(&this&)->__0;
   ULang:Span<uft8> B = Val;
   void C = ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>imut(A,B);
   ret;

|ULang:String_t<uft8>:Append^ULang:String_t<uft8>&,ULang:Span<uft8>mov[ULang:String_t<uft8>* (&this&),ULang:Span<uft8> Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:Append:(&this&)
//Variable:ULang:String_t<uft8>:Append:Val
//File:/Types/String.uc
//Line:86

   ULang:Vector<uft8>* A = &(&this&)->__0;
   ULang:Span<uft8> B = Val;
   void C = ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>mov(A,B);
   ret;

|ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:String_t<uft8>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&equal&):(&this&)
//Variable:ULang:String_t<uft8>:(&equal&):Other
//File:/Types/String.uc
//Line:89

   ULang:String_t<uft8>* A = (&this&);
   ULang:String_t<uft8>* B = A;
   ULang:StringSpan_t<uft8> C = ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut(B);
   ULang:StringSpan_t<uft8>* D = &C;
   ULang:String_t<uft8>* E = Other;
   ULang:StringSpan_t<uft8> F = ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut(E);
   ULang:StringSpan_t<uft8>* G = &F;
   int8 H = ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut(D,G);
   ret = H;
   ret;

|ULang:String_t<uft8>:(&notequal&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:String_t<uft8>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&notequal&):(&this&)
//Variable:ULang:String_t<uft8>:(&notequal&):Other
//File:/Types/String.uc
//Line:91

   ULang:String_t<uft8>* A = (&this&);
   ULang:String_t<uft8>* B = A;
   ULang:String_t<uft8>* C = Other;
   int8 D = ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:String_t<uft8>:(&Plus&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:String_t<uft8>* Other] -> ULang:String_t<uft8>:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&Plus&):(&this&)
//Variable:ULang:String_t<uft8>:(&Plus&):Other
//File:/Types/String.uc
//Line:94

   ULang:String_t<uft8>* A = (&this&);
   ULang:String_t<uft8>* B = A;
   ULang:String_t<uft8>* C = Other;
   ULang:StringSpan_t<uft8> D = ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut(C);
   ULang:String_t<uft8>* E;
   ULang:String_t<uft8>* F = &E;
   ULang:StringSpan_t<uft8>* G = &D;
   void H = ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut(F,G);
   ULang:String_t<uft8> I = ULang:String_t<uft8>:(&Plus&)^ULang:String_t<uft8>&imut,ULang:String_t<uft8>&imut(B,E);
   ret = I;
   ret;

|ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:String_t<uft8>* Other] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&Compound_Plus&):(&this&)
//Variable:ULang:String_t<uft8>:(&Compound_Plus&):Other
//File:/Types/String.uc
//Line:94

   ULang:String_t<uft8>* A = (&this&);

//Line:97

   ULang:String_t<uft8>* B = A;
   ULang:String_t<uft8>* C = Other;
   ULang:StringSpan_t<uft8> D = ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut(C);
   ULang:String_t<uft8>* E;
   ULang:String_t<uft8>* F = &E;
   ULang:StringSpan_t<uft8>* G = &D;
   void H = ULang:String_t<uft8>:(&_new&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut(F,G);
   void I = ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:String_t<uft8>&imut(B,E);
   ret;

|ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:StringSpan_t<uft8>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&equal&):(&this&)
//Variable:ULang:String_t<uft8>:(&equal&):Other
//File:/Types/String.uc
//Line:101

   ULang:String_t<uft8>* A = (&this&);
   ULang:String_t<uft8>* B = A;
   ULang:StringSpan_t<uft8> C = ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut(B);
   ULang:StringSpan_t<uft8>* D = &C;
   ULang:StringSpan_t<uft8>* E = Other;
   int8 F = ULang:StringSpan_t<uft8>:(&equal&)^ULang:StringSpan_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut(D,E);
   ret = F;
   ret;

|ULang:String_t<uft8>:(&notequal&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:StringSpan_t<uft8>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&notequal&):(&this&)
//Variable:ULang:String_t<uft8>:(&notequal&):Other
//File:/Types/String.uc
//Line:103

   ULang:String_t<uft8>* A = (&this&);
   ULang:String_t<uft8>* B = A;
   ULang:StringSpan_t<uft8>* C = Other;
   int8 D = ULang:String_t<uft8>:(&equal&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:String_t<uft8>:(&Plus&)^ULang:String_t<uft8>&imut,ULang:StringSpan_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:StringSpan_t<uft8>* Other] -> ULang:String_t<uft8>:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&Plus&):(&this&)
//Variable:ULang:String_t<uft8>:(&Plus&):Other
//File:/Types/String.uc
//Line:106
//Variable:ULang:String_t<uft8>:(&Plus&):copy

   ULang:String_t<uft8> A;
   ULang:String_t<uft8>* B = (&this&);
   ULang:String_t<uft8> C = *B;
   A = C;

//Line:107

   ULang:String_t<uft8>* D = &A;
   ULang:StringSpan_t<uft8>* E = Other;
   void F = ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut(D,E);

//Line:108

   ULang:String_t<uft8> G = A;
   ret = G;
   ret;

|ULang:String_t<uft8>:(&Compound_Plus&)^ULang:String_t<uft8>&,ULang:StringSpan_t<uft8>&imut[ULang:String_t<uft8>* (&this&),ULang:StringSpan_t<uft8>* Other] -> void:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&Compound_Plus&):(&this&)
//Variable:ULang:String_t<uft8>:(&Compound_Plus&):Other
//File:/Types/String.uc
//Line:111

   ULang:Vector<uft8>* A = &(&this&)->__0;
   ULang:StringSpan_t<uft8>* B = Other;
   ULang:Span<uft8> C = ULang:StringSpan_t<uft8>:iAsSpan^ULang:StringSpan_t<uft8>&imut(B);
   void D = ULang:Vector<uft8>:Append^ULang:Vector<uft8>&,ULang:Span<uft8>imut(A,C);
   ret;

|ULang:String_t<uft8>:AsSpan^ULang:String_t<uft8>&[ULang:String_t<uft8>* (&this&)] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:String_t<uft8>:AsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft8> A;
   ULang:Span<uft8>* B = &A;
   void C = ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&(B);
   ret = A;
   ret;

|ULang:String_t<uft8>:iAsSpan^ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&)] -> ULang:Span<uft8>:

 [Block:0]


//Variable:ULang:String_t<uft8>:iAsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft8> A;
   ULang:Span<uft8>* B = &A;
   void C = ULang:Span<uft8>:(&_new&)^ULang:Span<uft8>&(B);
   ret = A;
   ret;

|ULang:String_t<uft8>:Str^ULang:String_t<uft8>&[ULang:String_t<uft8>* (&this&)] -> ULang:StringSpan_t<uft8>:

 [Block:0]


//Variable:ULang:String_t<uft8>:Str:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft8> A;
   ULang:StringSpan_t<uft8>* B = &A;
   void C = ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&(B);
   ret = A;
   ret;

|ULang:String_t<uft8>:iStr^ULang:String_t<uft8>&imut[ULang:String_t<uft8>* (&this&)] -> ULang:StringSpan_t<uft8>:

 [Block:0]


//Variable:ULang:String_t<uft8>:iStr:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft8> A;
   ULang:StringSpan_t<uft8>* B = &A;
   void C = ULang:StringSpan_t<uft8>:(&_new&)^ULang:StringSpan_t<uft8>&(B);
   ret = A;
   ret;

|ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&,ULang:Range_t<uintptr>[ULang:String_t<uft8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft8>:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&Index&):(&this&)
//Variable:ULang:String_t<uft8>:(&Index&):Range
//File:/Types/String.uc
//Line:111
//Line:119

   ULang:String_t<uft8>* A = (&this&);
   ULang:StringSpan_t<uft8> B = ULang:String_t<uft8>:Str^ULang:String_t<uft8>&(A);
   ULang:StringSpan_t<uft8>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:StringSpan_t<uft8> E = ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:String_t<uft8>:(&Index&)^ULang:String_t<uft8>&imut,ULang:Range_t<uintptr>[ULang:String_t<uft8>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft8>:

 [Block:0]


//Variable:ULang:String_t<uft8>:(&Index&):(&this&)
//Variable:ULang:String_t<uft8>:(&Index&):Range
//File:/Types/String.uc
//Line:119
//Line:120

   ULang:String_t<uft8>* A = (&this&);
   ULang:StringSpan_t<uft8> B = ULang:String_t<uft8>:Str^ULang:String_t<uft8>&(A);
   ULang:StringSpan_t<uft8>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:StringSpan_t<uft8> E = ULang:StringSpan_t<uft8>:(&Index&)^ULang:StringSpan_t<uft8>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:String_t<uft8>:(&_de-init&)[ULang:String_t<uft8>* (&this&)] -> void:

 [Block:0]


//File:/Types/String.uc
//Line:0

   ULang:Vector<uft8>* A = &(&this&)->__0;
   void B = ULang:Vector<uft8>:(&_drop&)^ULang:Vector<uft8>&(A);
   ret;

|ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&[ULang:Span<uft16>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Span<uft16>:(&_new&):(&this&)
//File:/Types/Span.uc
//Line:7

   int64 A = 0;
   (&this&)->__0 = A;

//Line:8

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr[ULang:Span<uft16>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:Span<uft16>:(&_new&):(&this&)
//Variable:ULang:Span<uft16>:(&_new&):data
//Variable:ULang:Span<uft16>:(&_new&):size
//File:/Types/Span.uc
//Line:11

   void* A = data;
   (&this&)->__0 = A;

//Line:12

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:Span<uft16>:Size^ULang:Span<uft16>&imut[ULang:Span<uft16>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Span<uft16>:Size:(&this&)


//File:/Types/Span.uc
//Line:13

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Span<uft16>:Data^ULang:Span<uft16>&[ULang:Span<uft16>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<uft16>:Data:(&this&)


//File:/Types/Span.uc
//Line:14

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<uft16>:iData^ULang:Span<uft16>&imut[ULang:Span<uft16>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<uft16>:iData:(&this&)


//File:/Types/Span.uc
//Line:15

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,uptr[ULang:Span<uft16>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<uft16>:(&Index&):(&this&)
//Variable:ULang:Span<uft16>:(&Index&):Index


//File:/Types/Span.uc
//Line:18

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 2;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&imut,uptr[ULang:Span<uft16>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<uft16>:(&Index&):(&this&)
//Variable:ULang:Span<uft16>:(&Index&):Index


//File:/Types/Span.uc
//Line:19

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 2;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>[ULang:Span<uft16>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:Span<uft16>:(&Index&):(&this&)
//Variable:ULang:Span<uft16>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<uft16> A;
   ULang:Span<uft16>* B = &A;

//Line:21

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 2;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&imut,ULang:Range_t<uintptr>[ULang:Span<uft16>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:Span<uft16>:(&Index&):(&this&)
//Variable:ULang:Span<uft16>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<uft16> A;
   ULang:Span<uft16>* B = &A;

//Line:22

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 2;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Vector<uft16>:(&_new&)^ULang:Vector<uft16>&[ULang:Vector<uft16>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:(&_new&):(&this&)
//File:/Types/Vector.uc
//Line:9

   int64 A = 0;
   (&this&)->__0 = A;

//Line:10

   int64 B = 0;
   (&this&)->__1 = B;

//Line:11

   int64 C = 0;
   (&this&)->__2 = C;
   ret;

|ULang:Vector<uft16>:(&_drop&)^ULang:Vector<uft16>&[ULang:Vector<uft16>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:(&_drop&):(&this&)
//File:/Types/Vector.uc
//Line:13
//Variable:ULang:Vector<uft16>:(&_drop&):ptr

   int64 A;
   void* B = (&this&)->__0;
   A = B;

//Line:14

   int64 C = A;
   int64 D = 0;
   int8 E = C!=D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:15

   void* G = (&this&)->__0;
   LowLevel::Free(G);

   _label0:

   ret;

|ULang:Vector<uft16>:iData^ULang:Vector<uft16>&imut[ULang:Vector<uft16>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft16>:iData:(&this&)


//File:/Types/Vector.uc
//Line:17

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<uft16>:Data^ULang:Vector<uft16>&[ULang:Vector<uft16>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft16>:Data:(&this&)


//File:/Types/Vector.uc
//Line:18

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<uft16>:Size^ULang:Vector<uft16>&imut[ULang:Vector<uft16>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<uft16>:Size:(&this&)


//File:/Types/Vector.uc
//Line:20

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Vector<uft16>:Capacity^ULang:Vector<uft16>&imut[ULang:Vector<uft16>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<uft16>:Capacity:(&this&)


//File:/Types/Vector.uc
//Line:21

   int64 A = (&this&)->__2;
   ret = A;
   ret;

|ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr[ULang:Vector<uft16>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Resize:(&this&)
//Variable:ULang:Vector<uft16>:Resize:Size
//File:/Types/Vector.uc
//Line:24

   ULang:Vector<uft16>* A = (&this&);
   int64 B = Size;
   void C = ULang:Vector<uft16>:Reserve^ULang:Vector<uft16>&,uptr(A,B);

//Line:25

   int64 D = Size;
   (&this&)->__1 = D;
   ret;

|ULang:Vector<uft16>:Reserve^ULang:Vector<uft16>&,uptr[ULang:Vector<uft16>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Reserve:(&this&)
//Variable:ULang:Vector<uft16>:Reserve:Size
//File:/Types/Vector.uc
//Line:28

   int64 A = Size;
   int64 B = (&this&)->__2;
   int8 C = A>B;
   int8 D = !C;
   gotoif (D) _label0;

//Line:29
//Variable:ULang:Vector<uft16>:Reserve:1851963200432:oldsize

   int64 E;
   int64 F = (&this&)->__1;
   E = F;

//Line:30
//Variable:ULang:Vector<uft16>:Reserve:1851963200432:old

   void* G;
   void* H = (&this&)->__0;
   G = H;

//Line:33

   int64 I = Size;
   (&this&)->__2 = I;

//Line:34

   int64 J = Size;
   int64 K = 2;
   int64 L = J*K;
   void* M = LowLevel::Malloc(L);
   int64 N = 0;

   _label2:

   int8 O = N==J;
   gotoif (O) _label1;
   int64 P = N*K;
   void* Q = M+P;

//Line:0

   int16 R = 0;
   *Q = R;
   int32 S = 1;
   int64 T = N+S;
   N = T;
   goto _label2;

   _label1:

   (&this&)->__0 = M;

//Line:35

   int64 U;

//Variable:ULang:Vector<uft16>:Reserve:1851963200432:1851961879728:i

   int32 V = 0;
   U = V;

   _label4:

   int64 W = U;
   int64 X = E;
   int8 Y = W<X;
   int8 Z = !Y;
   gotoif (Z) _label3;

//Line:36

   void* [ = G;
   int64 \ = U;
   int64 ] = 2;
   int64 ^ = \*];
   void* _ = [+^;
   int16 ` = *_;
   void* a = (&this&)->__0;
   int64 b = U;
   int64 c = 2;
   int64 d = b*c;
   void* e = a+d;
   *e = `;

//Line:35

   int64 f = U;
   int64 g = 1;
   int64 h = f+g;
   U = h;
   goto _label4;

//Line:38
//Variable:ULang:Vector<uft16>:Reserve:1851963200432:ptr
   _label3:

   int64 i;
   void* j = G;
   i = j;

//Line:39

   int64 k = i;
   int64 l = 0;
   int8 m = k==l;
   int8 n = !m;
   gotoif (n) _label0;

//Line:40

   void* o = G;
   LowLevel::Free(o);

   _label0:

   ret;

|ULang:Vector<uft16>:Clear^ULang:Vector<uft16>&[ULang:Vector<uft16>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Clear:(&this&)
//File:/Types/Vector.uc
//Line:42

   int64 A = 0;
   (&this&)->__1 = A;
   ret;

|ULang:Vector<uft16>:Pop^ULang:Vector<uft16>&[ULang:Vector<uft16>* (&this&)] -> int16:

 [Block:0]


//Variable:ULang:Vector<uft16>:Pop:(&this&)

   ret;

|ULang:Vector<uft16>:Remove^ULang:Vector<uft16>&,uptr[ULang:Vector<uft16>* (&this&),int64 Index] -> int16:

 [Block:0]


//Variable:ULang:Vector<uft16>:Remove:(&this&)
//Variable:ULang:Vector<uft16>:Remove:Index

   ret;

|ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,&imut[ULang:Vector<uft16>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Push:(&this&)
//Variable:ULang:Vector<uft16>:Push:Val
//File:/Types/Vector.uc
//Line:48

   ULang:Vector<uft16>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr(A,D);

//Line:49

   int16 F = *Val;
   ULang:Vector<uft16>* G = (&this&);
   ULang:Vector<uft16>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,mov[ULang:Vector<uft16>* (&this&),int16 Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Push:(&this&)
//Variable:ULang:Vector<uft16>:Push:Val
//File:/Types/Vector.uc
//Line:53

   ULang:Vector<uft16>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr(A,D);

//Line:54

   int16 F = Val;
   ULang:Vector<uft16>* G = (&this&);
   ULang:Vector<uft16>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,&imut[ULang:Vector<uft16>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Insert:(&this&)
//Variable:ULang:Vector<uft16>:Insert:Index
//Variable:ULang:Vector<uft16>:Insert:Item

   ret;

|ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,mov[ULang:Vector<uft16>* (&this&),int64 Index,int16 Item] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Insert:(&this&)
//Variable:ULang:Vector<uft16>:Insert:Index
//Variable:ULang:Vector<uft16>:Insert:Item

   ret;

|ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>imut[ULang:Vector<uft16>* (&this&),ULang:Span<uft16> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Append:(&this&)
//Variable:ULang:Vector<uft16>:Append:Val

   ret;

|ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>mov[ULang:Vector<uft16>* (&this&),ULang:Span<uft16> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft16>:Append:(&this&)
//Variable:ULang:Vector<uft16>:Append:Val

   ret;

|ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr[ULang:Vector<uft16>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft16>:(&Index&):(&this&)
//Variable:ULang:Vector<uft16>:(&Index&):Index


//File:/Types/Vector.uc
//Line:64

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 2;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&imut,uptr[ULang:Vector<uft16>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft16>:(&Index&):(&this&)
//Variable:ULang:Vector<uft16>:(&Index&):Index


//File:/Types/Vector.uc
//Line:65

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 2;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,ULang:Range_t<uintptr>[ULang:Vector<uft16>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:Vector<uft16>:(&Index&):(&this&)
//Variable:ULang:Vector<uft16>:(&Index&):Range
//File:/Types/Vector.uc
//Line:65
//Line:70

   ULang:Vector<uft16>* A = (&this&);
   ULang:Span<uft16> B = ULang:Vector<uft16>:AsSpan^ULang:Vector<uft16>&(A);
   ULang:Span<uft16>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft16> E = ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&imut,ULang:Range_t<uintptr>[ULang:Vector<uft16>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:Vector<uft16>:(&Index&):(&this&)
//Variable:ULang:Vector<uft16>:(&Index&):Range
//File:/Types/Vector.uc
//Line:70
//Line:71

   ULang:Vector<uft16>* A = (&this&);
   ULang:Span<uft16> B = ULang:Vector<uft16>:AsSpan^ULang:Vector<uft16>&(A);
   ULang:Span<uft16>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft16> E = ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<uft16>:AsSpan^ULang:Vector<uft16>&[ULang:Vector<uft16>* (&this&)] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:Vector<uft16>:AsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<uft16> A;
   ULang:Span<uft16>* B = &A;

//Line:73

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:Vector<uft16>:iAsSpan^ULang:Vector<uft16>&imut[ULang:Vector<uft16>* (&this&)] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:Vector<uft16>:iAsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<uft16> A;
   ULang:Span<uft16>* B = &A;

//Line:74

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&[ULang:StringSpan_t<uft16>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:(&_new&):(&this&)
//File:/Types/String.uc
//Line:12

   int64 A = 0;
   (&this&)->__0 = A;

//Line:13

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&,[&],uptr[ULang:StringSpan_t<uft16>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:(&_new&):(&this&)
//Variable:ULang:StringSpan_t<uft16>:(&_new&):data
//Variable:ULang:StringSpan_t<uft16>:(&_new&):size
//File:/Types/String.uc
//Line:16

   void* A = data;
   (&this&)->__0 = A;

//Line:17

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut[ULang:StringSpan_t<uft16>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:Size:(&this&)


//File:/Types/String.uc
//Line:19

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:StringSpan_t<uft16>:iData^ULang:StringSpan_t<uft16>&imut[ULang:StringSpan_t<uft16>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:iData:(&this&)


//File:/Types/String.uc
//Line:20

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:StringSpan_t<uft16>:Data^ULang:StringSpan_t<uft16>&[ULang:StringSpan_t<uft16>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:Data:(&this&)


//File:/Types/String.uc
//Line:21

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut[ULang:StringSpan_t<uft16>* (&this&),ULang:StringSpan_t<uft16>* Other] -> int8:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:(&equal&):(&this&)
//Variable:ULang:StringSpan_t<uft16>:(&equal&):Other
//File:/Types/String.uc
//Line:24

   ULang:StringSpan_t<uft16>* A = (&this&);
   ULang:StringSpan_t<uft16>* B = A;
   int64 C = ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut(B);
   ULang:StringSpan_t<uft16>* D = Other;
   int64 E = ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut(D);
   int8 F = C!=E;
   int8 G = !F;
   gotoif (G) _label0;
   int8 H = 0;
   ret = H;
   goto _label1;

//Line:26
   _label0:

   int64 I;

//Variable:ULang:StringSpan_t<uft16>:(&equal&):1851961762880:i

   int32 J = 0;
   I = J;

   _label4:

   int64 K = I;
   ULang:StringSpan_t<uft16>* L = (&this&);
   ULang:StringSpan_t<uft16>* M = L;
   int64 N = ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut(M);
   int8 O = K<N;
   int8 P = !O;
   gotoif (P) _label2;
   ULang:StringSpan_t<uft16>* Q = (&this&);

//Line:28

   ULang:StringSpan_t<uft16>* R = Q;
   int64 S = I;
   void* T = ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr(R,S);
   int16 U = *T;
   ULang:StringSpan_t<uft16>* V = Other;
   int64 W = I;
   void* X = ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr(V,W);
   int16 Y = *X;
   int8 Z = U!=Y;
   int8 [ = !Z;
   gotoif ([) _label3;
   int8 \ = 0;
   ret = \;
   goto _label1;

//Line:26
   _label3:

   int64 ] = I;
   int64 ^ = 1;
   int64 _ = ]+^;
   I = _;
   goto _label4;

//Line:30
   _label2:

   int8 ` = 1;
   ret = `;

   _label1:

   ret;

|ULang:StringSpan_t<uft16>:(&notequal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut[ULang:StringSpan_t<uft16>* (&this&),ULang:StringSpan_t<uft16>* Other] -> int8:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:(&notequal&):(&this&)
//Variable:ULang:StringSpan_t<uft16>:(&notequal&):Other
//File:/Types/String.uc
//Line:32

   ULang:StringSpan_t<uft16>* A = (&this&);
   ULang:StringSpan_t<uft16>* B = A;
   ULang:StringSpan_t<uft16>* C = Other;
   int8 D = ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft16>:AsSpan^ULang:StringSpan_t<uft16>&[ULang:StringSpan_t<uft16>* (&this&)] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:AsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft16> A;
   ULang:Span<uft16>* B = &A;

//Line:34

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft16>:iAsSpan^ULang:StringSpan_t<uft16>&imut[ULang:StringSpan_t<uft16>* (&this&)] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:iAsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft16> A;
   ULang:Span<uft16>* B = &A;

//Line:35

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&[ULang:Span<uft16>* span] -> ULang:StringSpan_t<uft16>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:ToStr:span
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft16> A;
   ULang:StringSpan_t<uft16>* B = &A;

//Line:38

   ULang:Span<uft16>* C = span;
   void* D = ULang:Span<uft16>:Data^ULang:Span<uft16>&(C);
   ULang:Span<uft16>* E = span;
   int64 F = ULang:Span<uft16>:Size^ULang:Span<uft16>&imut(E);
   void G = ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&,[&],uptr(B,D,F);
   ret = A;
   ret;

|ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&imut[ULang:Span<uft16>* span] -> ULang:StringSpan_t<uft16>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:ToStr:span
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft16> A;
   ULang:StringSpan_t<uft16>* B = &A;

//Line:39

   ULang:Span<uft16>* C = span;
   void* D = ULang:Span<uft16>:Data^ULang:Span<uft16>&(C);
   ULang:Span<uft16>* E = span;
   int64 F = ULang:Span<uft16>:Size^ULang:Span<uft16>&imut(E);
   void G = ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&,[&],uptr(B,D,F);
   ret = A;
   ret;

|ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr[ULang:StringSpan_t<uft16>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft16>:(&Index&):Index


//File:/Types/String.uc
//Line:41

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 2;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&imut,uptr[ULang:StringSpan_t<uft16>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft16>:(&Index&):Index


//File:/Types/String.uc
//Line:42

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 2;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,ULang:Range_t<uintptr>[ULang:StringSpan_t<uft16>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft16>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft16>:(&Index&):Range
//File:/Types/String.uc
//Line:44
//Line:42
//Line:44

   ULang:StringSpan_t<uft16>* A = (&this&);
   ULang:Span<uft16> B = ULang:StringSpan_t<uft16>:AsSpan^ULang:StringSpan_t<uft16>&(A);
   ULang:Span<uft16>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft16> E = ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>(C,D);
   ULang:Span<uft16>* F = &E;
   ULang:StringSpan_t<uft16> G = ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&(F);
   ret = G;
   ret;

|ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&imut,ULang:Range_t<uintptr>[ULang:StringSpan_t<uft16>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft16>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft16>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft16>:(&Index&):Range
//File:/Types/String.uc
//Line:45
//Line:44
//Line:45

   ULang:StringSpan_t<uft16>* A = (&this&);
   ULang:Span<uft16> B = ULang:StringSpan_t<uft16>:AsSpan^ULang:StringSpan_t<uft16>&(A);
   ULang:Span<uft16>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft16> E = ULang:Span<uft16>:(&Index&)^ULang:Span<uft16>&,ULang:Range_t<uintptr>(C,D);
   ULang:Span<uft16>* F = &E;
   ULang:StringSpan_t<uft16> G = ULang:StringSpan_t<uft16>:ToStr^ULang:Span<uft16>&(F);
   ret = G;
   ret;

|ULang:String_t<uft16>:(&_init&)[ULang:String_t<uft16>* (&this&)] -> void:

 [Block:0]


//File:/Types/String.uc
//Line:49

   ULang:Vector<uft16>* A = &(&this&)->__0;

//Line:0

   void B = ULang:Vector<uft16>:(&_new&)^ULang:Vector<uft16>&(A);
   ret;

|ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&[ULang:String_t<uft16>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&_new&):(&this&)

   ULang:String_t<uft16>* A = (&this&);
   void B = ULang:String_t<uft16>:(&_init&)(A);
   ret;

|ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:StringSpan_t<uft16>* span] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&_new&):(&this&)
//Variable:ULang:String_t<uft16>:(&_new&):span

   ULang:String_t<uft16>* A = (&this&);
   void B = ULang:String_t<uft16>:(&_init&)(A);

//File:/Types/String.uc
//Line:58

   ULang:String_t<uft16>* C = (&this&);
   ULang:StringSpan_t<uft16>* D = span;
   int64 E = ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut(D);
   void F = ULang:String_t<uft16>:Resize^ULang:String_t<uft16>&,uptr(C,E);

//Line:59

   int64 G;

//Variable:ULang:String_t<uft16>:(&_new&):1851962032560:i

   int32 H = 0;
   G = H;

   _label1:

   int64 I = G;
   ULang:StringSpan_t<uft16>* J = span;
   int64 K = ULang:StringSpan_t<uft16>:Size^ULang:StringSpan_t<uft16>&imut(J);
   int8 L = I<K;
   int8 M = !L;
   gotoif (M) _label0;
   ULang:StringSpan_t<uft16>* N = span;
   int64 O = G;
   void* P = ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,uptr(N,O);
   int16 Q = *P;
   ULang:String_t<uft16>* R = (&this&);
   ULang:String_t<uft16>* S = R;
   int64 T = G;
   void* U = ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&,uptr(S,T);
   *U = Q;
   int64 V = G;
   int64 W = 1;
   int64 X = V+W;
   G = X;
   goto _label1;

   _label0:

   ret;

|ULang:String_t<uft16>:iData^ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft16>:iData:(&this&)
//File:/Types/String.uc
//Line:61

   ULang:Vector<uft16>* A = &(&this&)->__0;
   void* B = ULang:Vector<uft16>:iData^ULang:Vector<uft16>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft16>:Data^ULang:String_t<uft16>&[ULang:String_t<uft16>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft16>:Data:(&this&)
//File:/Types/String.uc
//Line:62

   ULang:Vector<uft16>* A = &(&this&)->__0;
   void* B = ULang:Vector<uft16>:Data^ULang:Vector<uft16>&(A);
   ret = B;
   ret;

|ULang:String_t<uft16>:Size^ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:String_t<uft16>:Size:(&this&)
//File:/Types/String.uc
//Line:65

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = ULang:Vector<uft16>:Size^ULang:Vector<uft16>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft16>:Capacity^ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:String_t<uft16>:Capacity:(&this&)
//File:/Types/String.uc
//Line:66

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = ULang:Vector<uft16>:Capacity^ULang:Vector<uft16>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft16>:Resize^ULang:String_t<uft16>&,uptr[ULang:String_t<uft16>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Resize:(&this&)
//Variable:ULang:String_t<uft16>:Resize:Size
//File:/Types/String.uc
//Line:68

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = Size;
   void C = ULang:Vector<uft16>:Resize^ULang:Vector<uft16>&,uptr(A,B);
   ret;

|ULang:String_t<uft16>:Reserve^ULang:String_t<uft16>&,uptr[ULang:String_t<uft16>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Reserve:(&this&)
//Variable:ULang:String_t<uft16>:Reserve:Size
//File:/Types/String.uc
//Line:69

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = Size;
   void C = ULang:Vector<uft16>:Reserve^ULang:Vector<uft16>&,uptr(A,B);
   ret;

|ULang:String_t<uft16>:Clear^ULang:String_t<uft16>&[ULang:String_t<uft16>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Clear:(&this&)
//File:/Types/String.uc
//Line:70

   ULang:Vector<uft16>* A = &(&this&)->__0;
   void B = ULang:Vector<uft16>:Clear^ULang:Vector<uft16>&(A);
   ret;

|ULang:String_t<uft16>:Pop^ULang:String_t<uft16>&[ULang:String_t<uft16>* (&this&)] -> int16:

 [Block:0]


//Variable:ULang:String_t<uft16>:Pop:(&this&)
//File:/Types/String.uc
//Line:72

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int16 B = ULang:Vector<uft16>:Pop^ULang:Vector<uft16>&(A);
   ret = B;
   ret;

|ULang:String_t<uft16>:Remove^ULang:String_t<uft16>&,uptr[ULang:String_t<uft16>* (&this&),int64 Index] -> int16:

 [Block:0]


//Variable:ULang:String_t<uft16>:Remove:(&this&)
//Variable:ULang:String_t<uft16>:Remove:Index
//File:/Types/String.uc
//Line:73

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = Index;
   int16 C = ULang:Vector<uft16>:Remove^ULang:Vector<uft16>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft16>:Push^ULang:String_t<uft16>&,&imut[ULang:String_t<uft16>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Push:(&this&)
//Variable:ULang:String_t<uft16>:Push:Val
//File:/Types/String.uc
//Line:75

   ULang:Vector<uft16>* A = &(&this&)->__0;
   void* B = Val;
   void C = ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,&imut(A,B);
   ret;

|ULang:String_t<uft16>:Push^ULang:String_t<uft16>&,mov[ULang:String_t<uft16>* (&this&),int16 Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Push:(&this&)
//Variable:ULang:String_t<uft16>:Push:Val
//File:/Types/String.uc
//Line:76

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int16 B = Val;
   void C = ULang:Vector<uft16>:Push^ULang:Vector<uft16>&,mov(A,B);
   ret;

|ULang:String_t<uft16>:Insert^ULang:String_t<uft16>&,uptr,&imut[ULang:String_t<uft16>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Insert:(&this&)
//Variable:ULang:String_t<uft16>:Insert:Index
//Variable:ULang:String_t<uft16>:Insert:Item
//File:/Types/String.uc
//Line:78

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = Item;
   void D = ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,&imut(A,B,C);
   ret;

|ULang:String_t<uft16>:Insert^ULang:String_t<uft16>&,uptr,mov[ULang:String_t<uft16>* (&this&),int64 Index,int16 Item] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Insert:(&this&)
//Variable:ULang:String_t<uft16>:Insert:Index
//Variable:ULang:String_t<uft16>:Insert:Item
//File:/Types/String.uc
//Line:79

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = Index;
   int16 C = Item;
   void D = ULang:Vector<uft16>:Insert^ULang:Vector<uft16>&,uptr,mov(A,B,C);
   ret;

|ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&,uptr[ULang:String_t<uft16>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&Index&):(&this&)
//Variable:ULang:String_t<uft16>:(&Index&):Index
//File:/Types/String.uc
//Line:79


//Line:82

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&imut,uptr[ULang:String_t<uft16>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&Index&):(&this&)
//Variable:ULang:String_t<uft16>:(&Index&):Index
//File:/Types/String.uc
//Line:82


//Line:83

   ULang:Vector<uft16>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = ULang:Vector<uft16>:(&Index&)^ULang:Vector<uft16>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft16>:Append^ULang:String_t<uft16>&,ULang:Span<uft16>imut[ULang:String_t<uft16>* (&this&),ULang:Span<uft16> Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Append:(&this&)
//Variable:ULang:String_t<uft16>:Append:Val
//File:/Types/String.uc
//Line:85

   ULang:Vector<uft16>* A = &(&this&)->__0;
   ULang:Span<uft16> B = Val;
   void C = ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>imut(A,B);
   ret;

|ULang:String_t<uft16>:Append^ULang:String_t<uft16>&,ULang:Span<uft16>mov[ULang:String_t<uft16>* (&this&),ULang:Span<uft16> Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:Append:(&this&)
//Variable:ULang:String_t<uft16>:Append:Val
//File:/Types/String.uc
//Line:86

   ULang:Vector<uft16>* A = &(&this&)->__0;
   ULang:Span<uft16> B = Val;
   void C = ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>mov(A,B);
   ret;

|ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:String_t<uft16>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&equal&):(&this&)
//Variable:ULang:String_t<uft16>:(&equal&):Other
//File:/Types/String.uc
//Line:89

   ULang:String_t<uft16>* A = (&this&);
   ULang:String_t<uft16>* B = A;
   ULang:StringSpan_t<uft16> C = ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut(B);
   ULang:StringSpan_t<uft16>* D = &C;
   ULang:String_t<uft16>* E = Other;
   ULang:StringSpan_t<uft16> F = ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut(E);
   ULang:StringSpan_t<uft16>* G = &F;
   int8 H = ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut(D,G);
   ret = H;
   ret;

|ULang:String_t<uft16>:(&notequal&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:String_t<uft16>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&notequal&):(&this&)
//Variable:ULang:String_t<uft16>:(&notequal&):Other
//File:/Types/String.uc
//Line:91

   ULang:String_t<uft16>* A = (&this&);
   ULang:String_t<uft16>* B = A;
   ULang:String_t<uft16>* C = Other;
   int8 D = ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:String_t<uft16>:(&Plus&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:String_t<uft16>* Other] -> ULang:String_t<uft16>:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&Plus&):(&this&)
//Variable:ULang:String_t<uft16>:(&Plus&):Other
//File:/Types/String.uc
//Line:94

   ULang:String_t<uft16>* A = (&this&);
   ULang:String_t<uft16>* B = A;
   ULang:String_t<uft16>* C = Other;
   ULang:StringSpan_t<uft16> D = ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut(C);
   ULang:String_t<uft16>* E;
   ULang:String_t<uft16>* F = &E;
   ULang:StringSpan_t<uft16>* G = &D;
   void H = ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut(F,G);
   ULang:String_t<uft16> I = ULang:String_t<uft16>:(&Plus&)^ULang:String_t<uft16>&imut,ULang:String_t<uft16>&imut(B,E);
   ret = I;
   ret;

|ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:String_t<uft16>* Other] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&Compound_Plus&):(&this&)
//Variable:ULang:String_t<uft16>:(&Compound_Plus&):Other
//File:/Types/String.uc
//Line:94

   ULang:String_t<uft16>* A = (&this&);

//Line:97

   ULang:String_t<uft16>* B = A;
   ULang:String_t<uft16>* C = Other;
   ULang:StringSpan_t<uft16> D = ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut(C);
   ULang:String_t<uft16>* E;
   ULang:String_t<uft16>* F = &E;
   ULang:StringSpan_t<uft16>* G = &D;
   void H = ULang:String_t<uft16>:(&_new&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut(F,G);
   void I = ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:String_t<uft16>&imut(B,E);
   ret;

|ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:StringSpan_t<uft16>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&equal&):(&this&)
//Variable:ULang:String_t<uft16>:(&equal&):Other
//File:/Types/String.uc
//Line:101

   ULang:String_t<uft16>* A = (&this&);
   ULang:String_t<uft16>* B = A;
   ULang:StringSpan_t<uft16> C = ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut(B);
   ULang:StringSpan_t<uft16>* D = &C;
   ULang:StringSpan_t<uft16>* E = Other;
   int8 F = ULang:StringSpan_t<uft16>:(&equal&)^ULang:StringSpan_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut(D,E);
   ret = F;
   ret;

|ULang:String_t<uft16>:(&notequal&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:StringSpan_t<uft16>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&notequal&):(&this&)
//Variable:ULang:String_t<uft16>:(&notequal&):Other
//File:/Types/String.uc
//Line:103

   ULang:String_t<uft16>* A = (&this&);
   ULang:String_t<uft16>* B = A;
   ULang:StringSpan_t<uft16>* C = Other;
   int8 D = ULang:String_t<uft16>:(&equal&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:String_t<uft16>:(&Plus&)^ULang:String_t<uft16>&imut,ULang:StringSpan_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:StringSpan_t<uft16>* Other] -> ULang:String_t<uft16>:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&Plus&):(&this&)
//Variable:ULang:String_t<uft16>:(&Plus&):Other
//File:/Types/String.uc
//Line:106
//Variable:ULang:String_t<uft16>:(&Plus&):copy

   ULang:String_t<uft16> A;
   ULang:String_t<uft16>* B = (&this&);
   ULang:String_t<uft16> C = *B;
   A = C;

//Line:107

   ULang:String_t<uft16>* D = &A;
   ULang:StringSpan_t<uft16>* E = Other;
   void F = ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut(D,E);

//Line:108

   ULang:String_t<uft16> G = A;
   ret = G;
   ret;

|ULang:String_t<uft16>:(&Compound_Plus&)^ULang:String_t<uft16>&,ULang:StringSpan_t<uft16>&imut[ULang:String_t<uft16>* (&this&),ULang:StringSpan_t<uft16>* Other] -> void:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&Compound_Plus&):(&this&)
//Variable:ULang:String_t<uft16>:(&Compound_Plus&):Other
//File:/Types/String.uc
//Line:111

   ULang:Vector<uft16>* A = &(&this&)->__0;
   ULang:StringSpan_t<uft16>* B = Other;
   ULang:Span<uft16> C = ULang:StringSpan_t<uft16>:iAsSpan^ULang:StringSpan_t<uft16>&imut(B);
   void D = ULang:Vector<uft16>:Append^ULang:Vector<uft16>&,ULang:Span<uft16>imut(A,C);
   ret;

|ULang:String_t<uft16>:AsSpan^ULang:String_t<uft16>&[ULang:String_t<uft16>* (&this&)] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:String_t<uft16>:AsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft16> A;
   ULang:Span<uft16>* B = &A;
   void C = ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&(B);
   ret = A;
   ret;

|ULang:String_t<uft16>:iAsSpan^ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&)] -> ULang:Span<uft16>:

 [Block:0]


//Variable:ULang:String_t<uft16>:iAsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft16> A;
   ULang:Span<uft16>* B = &A;
   void C = ULang:Span<uft16>:(&_new&)^ULang:Span<uft16>&(B);
   ret = A;
   ret;

|ULang:String_t<uft16>:Str^ULang:String_t<uft16>&[ULang:String_t<uft16>* (&this&)] -> ULang:StringSpan_t<uft16>:

 [Block:0]


//Variable:ULang:String_t<uft16>:Str:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft16> A;
   ULang:StringSpan_t<uft16>* B = &A;
   void C = ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&(B);
   ret = A;
   ret;

|ULang:String_t<uft16>:iStr^ULang:String_t<uft16>&imut[ULang:String_t<uft16>* (&this&)] -> ULang:StringSpan_t<uft16>:

 [Block:0]


//Variable:ULang:String_t<uft16>:iStr:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft16> A;
   ULang:StringSpan_t<uft16>* B = &A;
   void C = ULang:StringSpan_t<uft16>:(&_new&)^ULang:StringSpan_t<uft16>&(B);
   ret = A;
   ret;

|ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&,ULang:Range_t<uintptr>[ULang:String_t<uft16>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft16>:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&Index&):(&this&)
//Variable:ULang:String_t<uft16>:(&Index&):Range
//File:/Types/String.uc
//Line:111
//Line:119

   ULang:String_t<uft16>* A = (&this&);
   ULang:StringSpan_t<uft16> B = ULang:String_t<uft16>:Str^ULang:String_t<uft16>&(A);
   ULang:StringSpan_t<uft16>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:StringSpan_t<uft16> E = ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:String_t<uft16>:(&Index&)^ULang:String_t<uft16>&imut,ULang:Range_t<uintptr>[ULang:String_t<uft16>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft16>:

 [Block:0]


//Variable:ULang:String_t<uft16>:(&Index&):(&this&)
//Variable:ULang:String_t<uft16>:(&Index&):Range
//File:/Types/String.uc
//Line:119
//Line:120

   ULang:String_t<uft16>* A = (&this&);
   ULang:StringSpan_t<uft16> B = ULang:String_t<uft16>:Str^ULang:String_t<uft16>&(A);
   ULang:StringSpan_t<uft16>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:StringSpan_t<uft16> E = ULang:StringSpan_t<uft16>:(&Index&)^ULang:StringSpan_t<uft16>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:String_t<uft16>:(&_de-init&)[ULang:String_t<uft16>* (&this&)] -> void:

 [Block:0]


//File:/Types/String.uc
//Line:0

   ULang:Vector<uft16>* A = &(&this&)->__0;
   void B = ULang:Vector<uft16>:(&_drop&)^ULang:Vector<uft16>&(A);
   ret;

|ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&[ULang:Span<uft32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Span<uft32>:(&_new&):(&this&)
//File:/Types/Span.uc
//Line:7

   int64 A = 0;
   (&this&)->__0 = A;

//Line:8

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr[ULang:Span<uft32>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:Span<uft32>:(&_new&):(&this&)
//Variable:ULang:Span<uft32>:(&_new&):data
//Variable:ULang:Span<uft32>:(&_new&):size
//File:/Types/Span.uc
//Line:11

   void* A = data;
   (&this&)->__0 = A;

//Line:12

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:Span<uft32>:Size^ULang:Span<uft32>&imut[ULang:Span<uft32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Span<uft32>:Size:(&this&)


//File:/Types/Span.uc
//Line:13

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Span<uft32>:Data^ULang:Span<uft32>&[ULang:Span<uft32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<uft32>:Data:(&this&)


//File:/Types/Span.uc
//Line:14

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<uft32>:iData^ULang:Span<uft32>&imut[ULang:Span<uft32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Span<uft32>:iData:(&this&)


//File:/Types/Span.uc
//Line:15

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,uptr[ULang:Span<uft32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<uft32>:(&Index&):(&this&)
//Variable:ULang:Span<uft32>:(&Index&):Index


//File:/Types/Span.uc
//Line:18

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&imut,uptr[ULang:Span<uft32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Span<uft32>:(&Index&):(&this&)
//Variable:ULang:Span<uft32>:(&Index&):Index


//File:/Types/Span.uc
//Line:19

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>[ULang:Span<uft32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:Span<uft32>:(&Index&):(&this&)
//Variable:ULang:Span<uft32>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<uft32> A;
   ULang:Span<uft32>* B = &A;

//Line:21

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 4;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&imut,ULang:Range_t<uintptr>[ULang:Span<uft32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:Span<uft32>:(&Index&):(&this&)
//Variable:ULang:Span<uft32>:(&Index&):Range
//File:/Types/Span.uc
//Line:0

   ULang:Span<uft32> A;
   ULang:Span<uft32>* B = &A;

//Line:22

   void* C = (&this&)->__0;
   ULang:Range_t<uintptr>* D = &Range;
   int64 E = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(D);
   int64 F = 4;
   int64 G = E*F;
   void* H = C+G;
   ULang:Range_t<uintptr>* I = &Range;
   int64 J = ULang:Range_t<uintptr>:End^ULang:Range_t<uintptr>&imut(I);
   ULang:Range_t<uintptr>* K = &Range;
   int64 L = ULang:Range_t<uintptr>:Start^ULang:Range_t<uintptr>&imut(K);
   int64 M = J-L;
   void N = ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr(B,H,M);
   ret = A;
   ret;

|ULang:Vector<uft32>:(&_new&)^ULang:Vector<uft32>&[ULang:Vector<uft32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:(&_new&):(&this&)
//File:/Types/Vector.uc
//Line:9

   int64 A = 0;
   (&this&)->__0 = A;

//Line:10

   int64 B = 0;
   (&this&)->__1 = B;

//Line:11

   int64 C = 0;
   (&this&)->__2 = C;
   ret;

|ULang:Vector<uft32>:(&_drop&)^ULang:Vector<uft32>&[ULang:Vector<uft32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:(&_drop&):(&this&)
//File:/Types/Vector.uc
//Line:13
//Variable:ULang:Vector<uft32>:(&_drop&):ptr

   int64 A;
   void* B = (&this&)->__0;
   A = B;

//Line:14

   int64 C = A;
   int64 D = 0;
   int8 E = C!=D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:15

   void* G = (&this&)->__0;
   LowLevel::Free(G);

   _label0:

   ret;

|ULang:Vector<uft32>:iData^ULang:Vector<uft32>&imut[ULang:Vector<uft32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft32>:iData:(&this&)


//File:/Types/Vector.uc
//Line:17

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<uft32>:Data^ULang:Vector<uft32>&[ULang:Vector<uft32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft32>:Data:(&this&)


//File:/Types/Vector.uc
//Line:18

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:Vector<uft32>:Size^ULang:Vector<uft32>&imut[ULang:Vector<uft32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<uft32>:Size:(&this&)


//File:/Types/Vector.uc
//Line:20

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:Vector<uft32>:Capacity^ULang:Vector<uft32>&imut[ULang:Vector<uft32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:Vector<uft32>:Capacity:(&this&)


//File:/Types/Vector.uc
//Line:21

   int64 A = (&this&)->__2;
   ret = A;
   ret;

|ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr[ULang:Vector<uft32>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Resize:(&this&)
//Variable:ULang:Vector<uft32>:Resize:Size
//File:/Types/Vector.uc
//Line:24

   ULang:Vector<uft32>* A = (&this&);
   int64 B = Size;
   void C = ULang:Vector<uft32>:Reserve^ULang:Vector<uft32>&,uptr(A,B);

//Line:25

   int64 D = Size;
   (&this&)->__1 = D;
   ret;

|ULang:Vector<uft32>:Reserve^ULang:Vector<uft32>&,uptr[ULang:Vector<uft32>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Reserve:(&this&)
//Variable:ULang:Vector<uft32>:Reserve:Size
//File:/Types/Vector.uc
//Line:28

   int64 A = Size;
   int64 B = (&this&)->__2;
   int8 C = A>B;
   int8 D = !C;
   gotoif (D) _label0;

//Line:29
//Variable:ULang:Vector<uft32>:Reserve:1851963200432:oldsize

   int64 E;
   int64 F = (&this&)->__1;
   E = F;

//Line:30
//Variable:ULang:Vector<uft32>:Reserve:1851963200432:old

   void* G;
   void* H = (&this&)->__0;
   G = H;

//Line:33

   int64 I = Size;
   (&this&)->__2 = I;

//Line:34

   int64 J = Size;
   int64 K = 4;
   int64 L = J*K;
   void* M = LowLevel::Malloc(L);
   int64 N = 0;

   _label2:

   int8 O = N==J;
   gotoif (O) _label1;
   int64 P = N*K;
   void* Q = M+P;

//Line:0

   int32 R = 0;
   *Q = R;
   int32 S = 1;
   int64 T = N+S;
   N = T;
   goto _label2;

   _label1:

   (&this&)->__0 = M;

//Line:35

   int64 U;

//Variable:ULang:Vector<uft32>:Reserve:1851963200432:1851961879728:i

   int32 V = 0;
   U = V;

   _label4:

   int64 W = U;
   int64 X = E;
   int8 Y = W<X;
   int8 Z = !Y;
   gotoif (Z) _label3;

//Line:36

   void* [ = G;
   int64 \ = U;
   int64 ] = 4;
   int64 ^ = \*];
   void* _ = [+^;
   int32 ` = *_;
   void* a = (&this&)->__0;
   int64 b = U;
   int64 c = 4;
   int64 d = b*c;
   void* e = a+d;
   *e = `;

//Line:35

   int64 f = U;
   int64 g = 1;
   int64 h = f+g;
   U = h;
   goto _label4;

//Line:38
//Variable:ULang:Vector<uft32>:Reserve:1851963200432:ptr
   _label3:

   int64 i;
   void* j = G;
   i = j;

//Line:39

   int64 k = i;
   int64 l = 0;
   int8 m = k==l;
   int8 n = !m;
   gotoif (n) _label0;

//Line:40

   void* o = G;
   LowLevel::Free(o);

   _label0:

   ret;

|ULang:Vector<uft32>:Clear^ULang:Vector<uft32>&[ULang:Vector<uft32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Clear:(&this&)
//File:/Types/Vector.uc
//Line:42

   int64 A = 0;
   (&this&)->__1 = A;
   ret;

|ULang:Vector<uft32>:Pop^ULang:Vector<uft32>&[ULang:Vector<uft32>* (&this&)] -> int32:

 [Block:0]


//Variable:ULang:Vector<uft32>:Pop:(&this&)

   ret;

|ULang:Vector<uft32>:Remove^ULang:Vector<uft32>&,uptr[ULang:Vector<uft32>* (&this&),int64 Index] -> int32:

 [Block:0]


//Variable:ULang:Vector<uft32>:Remove:(&this&)
//Variable:ULang:Vector<uft32>:Remove:Index

   ret;

|ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,&imut[ULang:Vector<uft32>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Push:(&this&)
//Variable:ULang:Vector<uft32>:Push:Val
//File:/Types/Vector.uc
//Line:48

   ULang:Vector<uft32>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr(A,D);

//Line:49

   int32 F = *Val;
   ULang:Vector<uft32>* G = (&this&);
   ULang:Vector<uft32>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,mov[ULang:Vector<uft32>* (&this&),int32 Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Push:(&this&)
//Variable:ULang:Vector<uft32>:Push:Val
//File:/Types/Vector.uc
//Line:53

   ULang:Vector<uft32>* A = (&this&);
   int64 B = (&this&)->__1;
   int64 C = 1;
   int64 D = B+C;
   void E = ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr(A,D);

//Line:54

   int32 F = Val;
   ULang:Vector<uft32>* G = (&this&);
   ULang:Vector<uft32>* H = G;
   int64 I = (&this&)->__1;
   int64 J = 1;
   int64 K = I-J;
   void* L = ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr(H,K);
   *L = F;
   ret;

|ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,&imut[ULang:Vector<uft32>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Insert:(&this&)
//Variable:ULang:Vector<uft32>:Insert:Index
//Variable:ULang:Vector<uft32>:Insert:Item

   ret;

|ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,mov[ULang:Vector<uft32>* (&this&),int64 Index,int32 Item] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Insert:(&this&)
//Variable:ULang:Vector<uft32>:Insert:Index
//Variable:ULang:Vector<uft32>:Insert:Item

   ret;

|ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>imut[ULang:Vector<uft32>* (&this&),ULang:Span<uft32> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Append:(&this&)
//Variable:ULang:Vector<uft32>:Append:Val

   ret;

|ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>mov[ULang:Vector<uft32>* (&this&),ULang:Span<uft32> Val] -> void:

 [Block:0]


//Variable:ULang:Vector<uft32>:Append:(&this&)
//Variable:ULang:Vector<uft32>:Append:Val

   ret;

|ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr[ULang:Vector<uft32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft32>:(&Index&):(&this&)
//Variable:ULang:Vector<uft32>:(&Index&):Index


//File:/Types/Vector.uc
//Line:64

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&imut,uptr[ULang:Vector<uft32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:Vector<uft32>:(&Index&):(&this&)
//Variable:ULang:Vector<uft32>:(&Index&):Index


//File:/Types/Vector.uc
//Line:65

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,ULang:Range_t<uintptr>[ULang:Vector<uft32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:Vector<uft32>:(&Index&):(&this&)
//Variable:ULang:Vector<uft32>:(&Index&):Range
//File:/Types/Vector.uc
//Line:65
//Line:70

   ULang:Vector<uft32>* A = (&this&);
   ULang:Span<uft32> B = ULang:Vector<uft32>:AsSpan^ULang:Vector<uft32>&(A);
   ULang:Span<uft32>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft32> E = ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&imut,ULang:Range_t<uintptr>[ULang:Vector<uft32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:Vector<uft32>:(&Index&):(&this&)
//Variable:ULang:Vector<uft32>:(&Index&):Range
//File:/Types/Vector.uc
//Line:70
//Line:71

   ULang:Vector<uft32>* A = (&this&);
   ULang:Span<uft32> B = ULang:Vector<uft32>:AsSpan^ULang:Vector<uft32>&(A);
   ULang:Span<uft32>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft32> E = ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:Vector<uft32>:AsSpan^ULang:Vector<uft32>&[ULang:Vector<uft32>* (&this&)] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:Vector<uft32>:AsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<uft32> A;
   ULang:Span<uft32>* B = &A;

//Line:73

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:Vector<uft32>:iAsSpan^ULang:Vector<uft32>&imut[ULang:Vector<uft32>* (&this&)] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:Vector<uft32>:iAsSpan:(&this&)
//File:/Types/Vector.uc
//Line:0

   ULang:Span<uft32> A;
   ULang:Span<uft32>* B = &A;

//Line:74

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&[ULang:StringSpan_t<uft32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:(&_new&):(&this&)
//File:/Types/String.uc
//Line:12

   int64 A = 0;
   (&this&)->__0 = A;

//Line:13

   int64 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&,[&],uptr[ULang:StringSpan_t<uft32>* (&this&),void* data,int64 size] -> void:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:(&_new&):(&this&)
//Variable:ULang:StringSpan_t<uft32>:(&_new&):data
//Variable:ULang:StringSpan_t<uft32>:(&_new&):size
//File:/Types/String.uc
//Line:16

   void* A = data;
   (&this&)->__0 = A;

//Line:17

   int64 B = size;
   (&this&)->__1 = B;
   ret;

|ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut[ULang:StringSpan_t<uft32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:Size:(&this&)


//File:/Types/String.uc
//Line:19

   int64 A = (&this&)->__1;
   ret = A;
   ret;

|ULang:StringSpan_t<uft32>:iData^ULang:StringSpan_t<uft32>&imut[ULang:StringSpan_t<uft32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:iData:(&this&)


//File:/Types/String.uc
//Line:20

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:StringSpan_t<uft32>:Data^ULang:StringSpan_t<uft32>&[ULang:StringSpan_t<uft32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:Data:(&this&)


//File:/Types/String.uc
//Line:21

   void* A = (&this&)->__0;
   ret = A;
   ret;

|ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut[ULang:StringSpan_t<uft32>* (&this&),ULang:StringSpan_t<uft32>* Other] -> int8:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:(&equal&):(&this&)
//Variable:ULang:StringSpan_t<uft32>:(&equal&):Other
//File:/Types/String.uc
//Line:24

   ULang:StringSpan_t<uft32>* A = (&this&);
   ULang:StringSpan_t<uft32>* B = A;
   int64 C = ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut(B);
   ULang:StringSpan_t<uft32>* D = Other;
   int64 E = ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut(D);
   int8 F = C!=E;
   int8 G = !F;
   gotoif (G) _label0;
   int8 H = 0;
   ret = H;
   goto _label1;

//Line:26
   _label0:

   int64 I;

//Variable:ULang:StringSpan_t<uft32>:(&equal&):1851961762880:i

   int32 J = 0;
   I = J;

   _label4:

   int64 K = I;
   ULang:StringSpan_t<uft32>* L = (&this&);
   ULang:StringSpan_t<uft32>* M = L;
   int64 N = ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut(M);
   int8 O = K<N;
   int8 P = !O;
   gotoif (P) _label2;
   ULang:StringSpan_t<uft32>* Q = (&this&);

//Line:28

   ULang:StringSpan_t<uft32>* R = Q;
   int64 S = I;
   void* T = ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr(R,S);
   int32 U = *T;
   ULang:StringSpan_t<uft32>* V = Other;
   int64 W = I;
   void* X = ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr(V,W);
   int32 Y = *X;
   int8 Z = U!=Y;
   int8 [ = !Z;
   gotoif ([) _label3;
   int8 \ = 0;
   ret = \;
   goto _label1;

//Line:26
   _label3:

   int64 ] = I;
   int64 ^ = 1;
   int64 _ = ]+^;
   I = _;
   goto _label4;

//Line:30
   _label2:

   int8 ` = 1;
   ret = `;

   _label1:

   ret;

|ULang:StringSpan_t<uft32>:(&notequal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut[ULang:StringSpan_t<uft32>* (&this&),ULang:StringSpan_t<uft32>* Other] -> int8:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:(&notequal&):(&this&)
//Variable:ULang:StringSpan_t<uft32>:(&notequal&):Other
//File:/Types/String.uc
//Line:32

   ULang:StringSpan_t<uft32>* A = (&this&);
   ULang:StringSpan_t<uft32>* B = A;
   ULang:StringSpan_t<uft32>* C = Other;
   int8 D = ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft32>:AsSpan^ULang:StringSpan_t<uft32>&[ULang:StringSpan_t<uft32>* (&this&)] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:AsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft32> A;
   ULang:Span<uft32>* B = &A;

//Line:34

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft32>:iAsSpan^ULang:StringSpan_t<uft32>&imut[ULang:StringSpan_t<uft32>* (&this&)] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:iAsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft32> A;
   ULang:Span<uft32>* B = &A;

//Line:35

   void* C = (&this&)->__0;
   int64 D = (&this&)->__1;
   void E = ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&,[&],uptr(B,C,D);
   ret = A;
   ret;

|ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&[ULang:Span<uft32>* span] -> ULang:StringSpan_t<uft32>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:ToStr:span
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft32> A;
   ULang:StringSpan_t<uft32>* B = &A;

//Line:38

   ULang:Span<uft32>* C = span;
   void* D = ULang:Span<uft32>:Data^ULang:Span<uft32>&(C);
   ULang:Span<uft32>* E = span;
   int64 F = ULang:Span<uft32>:Size^ULang:Span<uft32>&imut(E);
   void G = ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&,[&],uptr(B,D,F);
   ret = A;
   ret;

|ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&imut[ULang:Span<uft32>* span] -> ULang:StringSpan_t<uft32>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:ToStr:span
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft32> A;
   ULang:StringSpan_t<uft32>* B = &A;

//Line:39

   ULang:Span<uft32>* C = span;
   void* D = ULang:Span<uft32>:Data^ULang:Span<uft32>&(C);
   ULang:Span<uft32>* E = span;
   int64 F = ULang:Span<uft32>:Size^ULang:Span<uft32>&imut(E);
   void G = ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&,[&],uptr(B,D,F);
   ret = A;
   ret;

|ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr[ULang:StringSpan_t<uft32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft32>:(&Index&):Index


//File:/Types/String.uc
//Line:41

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&imut,uptr[ULang:StringSpan_t<uft32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft32>:(&Index&):Index


//File:/Types/String.uc
//Line:42

   void* A = (&this&)->__0;
   int64 B = Index;
   int64 C = 4;
   int64 D = B*C;
   void* E = A+D;
   ret = E;
   ret;

|ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,ULang:Range_t<uintptr>[ULang:StringSpan_t<uft32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft32>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft32>:(&Index&):Range
//File:/Types/String.uc
//Line:44
//Line:42
//Line:44

   ULang:StringSpan_t<uft32>* A = (&this&);
   ULang:Span<uft32> B = ULang:StringSpan_t<uft32>:AsSpan^ULang:StringSpan_t<uft32>&(A);
   ULang:Span<uft32>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft32> E = ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>(C,D);
   ULang:Span<uft32>* F = &E;
   ULang:StringSpan_t<uft32> G = ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&(F);
   ret = G;
   ret;

|ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&imut,ULang:Range_t<uintptr>[ULang:StringSpan_t<uft32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft32>:

 [Block:0]


//Variable:ULang:StringSpan_t<uft32>:(&Index&):(&this&)
//Variable:ULang:StringSpan_t<uft32>:(&Index&):Range
//File:/Types/String.uc
//Line:45
//Line:44
//Line:45

   ULang:StringSpan_t<uft32>* A = (&this&);
   ULang:Span<uft32> B = ULang:StringSpan_t<uft32>:AsSpan^ULang:StringSpan_t<uft32>&(A);
   ULang:Span<uft32>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:Span<uft32> E = ULang:Span<uft32>:(&Index&)^ULang:Span<uft32>&,ULang:Range_t<uintptr>(C,D);
   ULang:Span<uft32>* F = &E;
   ULang:StringSpan_t<uft32> G = ULang:StringSpan_t<uft32>:ToStr^ULang:Span<uft32>&(F);
   ret = G;
   ret;

|ULang:String_t<uft32>:(&_init&)[ULang:String_t<uft32>* (&this&)] -> void:

 [Block:0]


//File:/Types/String.uc
//Line:49

   ULang:Vector<uft32>* A = &(&this&)->__0;

//Line:0

   void B = ULang:Vector<uft32>:(&_new&)^ULang:Vector<uft32>&(A);
   ret;

|ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&[ULang:String_t<uft32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&_new&):(&this&)

   ULang:String_t<uft32>* A = (&this&);
   void B = ULang:String_t<uft32>:(&_init&)(A);
   ret;

|ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:StringSpan_t<uft32>* span] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&_new&):(&this&)
//Variable:ULang:String_t<uft32>:(&_new&):span

   ULang:String_t<uft32>* A = (&this&);
   void B = ULang:String_t<uft32>:(&_init&)(A);

//File:/Types/String.uc
//Line:58

   ULang:String_t<uft32>* C = (&this&);
   ULang:StringSpan_t<uft32>* D = span;
   int64 E = ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut(D);
   void F = ULang:String_t<uft32>:Resize^ULang:String_t<uft32>&,uptr(C,E);

//Line:59

   int64 G;

//Variable:ULang:String_t<uft32>:(&_new&):1851962032560:i

   int32 H = 0;
   G = H;

   _label1:

   int64 I = G;
   ULang:StringSpan_t<uft32>* J = span;
   int64 K = ULang:StringSpan_t<uft32>:Size^ULang:StringSpan_t<uft32>&imut(J);
   int8 L = I<K;
   int8 M = !L;
   gotoif (M) _label0;
   ULang:StringSpan_t<uft32>* N = span;
   int64 O = G;
   void* P = ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,uptr(N,O);
   int32 Q = *P;
   ULang:String_t<uft32>* R = (&this&);
   ULang:String_t<uft32>* S = R;
   int64 T = G;
   void* U = ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&,uptr(S,T);
   *U = Q;
   int64 V = G;
   int64 W = 1;
   int64 X = V+W;
   G = X;
   goto _label1;

   _label0:

   ret;

|ULang:String_t<uft32>:iData^ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft32>:iData:(&this&)
//File:/Types/String.uc
//Line:61

   ULang:Vector<uft32>* A = &(&this&)->__0;
   void* B = ULang:Vector<uft32>:iData^ULang:Vector<uft32>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft32>:Data^ULang:String_t<uft32>&[ULang:String_t<uft32>* (&this&)] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft32>:Data:(&this&)
//File:/Types/String.uc
//Line:62

   ULang:Vector<uft32>* A = &(&this&)->__0;
   void* B = ULang:Vector<uft32>:Data^ULang:Vector<uft32>&(A);
   ret = B;
   ret;

|ULang:String_t<uft32>:Size^ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:String_t<uft32>:Size:(&this&)
//File:/Types/String.uc
//Line:65

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = ULang:Vector<uft32>:Size^ULang:Vector<uft32>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft32>:Capacity^ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&)] -> int64:

 [Block:0]


//Variable:ULang:String_t<uft32>:Capacity:(&this&)
//File:/Types/String.uc
//Line:66

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = ULang:Vector<uft32>:Capacity^ULang:Vector<uft32>&imut(A);
   ret = B;
   ret;

|ULang:String_t<uft32>:Resize^ULang:String_t<uft32>&,uptr[ULang:String_t<uft32>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Resize:(&this&)
//Variable:ULang:String_t<uft32>:Resize:Size
//File:/Types/String.uc
//Line:68

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = Size;
   void C = ULang:Vector<uft32>:Resize^ULang:Vector<uft32>&,uptr(A,B);
   ret;

|ULang:String_t<uft32>:Reserve^ULang:String_t<uft32>&,uptr[ULang:String_t<uft32>* (&this&),int64 Size] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Reserve:(&this&)
//Variable:ULang:String_t<uft32>:Reserve:Size
//File:/Types/String.uc
//Line:69

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = Size;
   void C = ULang:Vector<uft32>:Reserve^ULang:Vector<uft32>&,uptr(A,B);
   ret;

|ULang:String_t<uft32>:Clear^ULang:String_t<uft32>&[ULang:String_t<uft32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Clear:(&this&)
//File:/Types/String.uc
//Line:70

   ULang:Vector<uft32>* A = &(&this&)->__0;
   void B = ULang:Vector<uft32>:Clear^ULang:Vector<uft32>&(A);
   ret;

|ULang:String_t<uft32>:Pop^ULang:String_t<uft32>&[ULang:String_t<uft32>* (&this&)] -> int32:

 [Block:0]


//Variable:ULang:String_t<uft32>:Pop:(&this&)
//File:/Types/String.uc
//Line:72

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int32 B = ULang:Vector<uft32>:Pop^ULang:Vector<uft32>&(A);
   ret = B;
   ret;

|ULang:String_t<uft32>:Remove^ULang:String_t<uft32>&,uptr[ULang:String_t<uft32>* (&this&),int64 Index] -> int32:

 [Block:0]


//Variable:ULang:String_t<uft32>:Remove:(&this&)
//Variable:ULang:String_t<uft32>:Remove:Index
//File:/Types/String.uc
//Line:73

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = Index;
   int32 C = ULang:Vector<uft32>:Remove^ULang:Vector<uft32>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft32>:Push^ULang:String_t<uft32>&,&imut[ULang:String_t<uft32>* (&this&),void* Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Push:(&this&)
//Variable:ULang:String_t<uft32>:Push:Val
//File:/Types/String.uc
//Line:75

   ULang:Vector<uft32>* A = &(&this&)->__0;
   void* B = Val;
   void C = ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,&imut(A,B);
   ret;

|ULang:String_t<uft32>:Push^ULang:String_t<uft32>&,mov[ULang:String_t<uft32>* (&this&),int32 Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Push:(&this&)
//Variable:ULang:String_t<uft32>:Push:Val
//File:/Types/String.uc
//Line:76

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int32 B = Val;
   void C = ULang:Vector<uft32>:Push^ULang:Vector<uft32>&,mov(A,B);
   ret;

|ULang:String_t<uft32>:Insert^ULang:String_t<uft32>&,uptr,&imut[ULang:String_t<uft32>* (&this&),int64 Index,void* Item] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Insert:(&this&)
//Variable:ULang:String_t<uft32>:Insert:Index
//Variable:ULang:String_t<uft32>:Insert:Item
//File:/Types/String.uc
//Line:78

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = Item;
   void D = ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,&imut(A,B,C);
   ret;

|ULang:String_t<uft32>:Insert^ULang:String_t<uft32>&,uptr,mov[ULang:String_t<uft32>* (&this&),int64 Index,int32 Item] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Insert:(&this&)
//Variable:ULang:String_t<uft32>:Insert:Index
//Variable:ULang:String_t<uft32>:Insert:Item
//File:/Types/String.uc
//Line:79

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = Index;
   int32 C = Item;
   void D = ULang:Vector<uft32>:Insert^ULang:Vector<uft32>&,uptr,mov(A,B,C);
   ret;

|ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&,uptr[ULang:String_t<uft32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&Index&):(&this&)
//Variable:ULang:String_t<uft32>:(&Index&):Index
//File:/Types/String.uc
//Line:79


//Line:82

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&imut,uptr[ULang:String_t<uft32>* (&this&),int64 Index] -> void*:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&Index&):(&this&)
//Variable:ULang:String_t<uft32>:(&Index&):Index
//File:/Types/String.uc
//Line:82


//Line:83

   ULang:Vector<uft32>* A = &(&this&)->__0;
   int64 B = Index;
   void* C = ULang:Vector<uft32>:(&Index&)^ULang:Vector<uft32>&,uptr(A,B);
   ret = C;
   ret;

|ULang:String_t<uft32>:Append^ULang:String_t<uft32>&,ULang:Span<uft32>imut[ULang:String_t<uft32>* (&this&),ULang:Span<uft32> Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Append:(&this&)
//Variable:ULang:String_t<uft32>:Append:Val
//File:/Types/String.uc
//Line:85

   ULang:Vector<uft32>* A = &(&this&)->__0;
   ULang:Span<uft32> B = Val;
   void C = ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>imut(A,B);
   ret;

|ULang:String_t<uft32>:Append^ULang:String_t<uft32>&,ULang:Span<uft32>mov[ULang:String_t<uft32>* (&this&),ULang:Span<uft32> Val] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:Append:(&this&)
//Variable:ULang:String_t<uft32>:Append:Val
//File:/Types/String.uc
//Line:86

   ULang:Vector<uft32>* A = &(&this&)->__0;
   ULang:Span<uft32> B = Val;
   void C = ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>mov(A,B);
   ret;

|ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:String_t<uft32>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&equal&):(&this&)
//Variable:ULang:String_t<uft32>:(&equal&):Other
//File:/Types/String.uc
//Line:89

   ULang:String_t<uft32>* A = (&this&);
   ULang:String_t<uft32>* B = A;
   ULang:StringSpan_t<uft32> C = ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut(B);
   ULang:StringSpan_t<uft32>* D = &C;
   ULang:String_t<uft32>* E = Other;
   ULang:StringSpan_t<uft32> F = ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut(E);
   ULang:StringSpan_t<uft32>* G = &F;
   int8 H = ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut(D,G);
   ret = H;
   ret;

|ULang:String_t<uft32>:(&notequal&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:String_t<uft32>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&notequal&):(&this&)
//Variable:ULang:String_t<uft32>:(&notequal&):Other
//File:/Types/String.uc
//Line:91

   ULang:String_t<uft32>* A = (&this&);
   ULang:String_t<uft32>* B = A;
   ULang:String_t<uft32>* C = Other;
   int8 D = ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:String_t<uft32>:(&Plus&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:String_t<uft32>* Other] -> ULang:String_t<uft32>:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&Plus&):(&this&)
//Variable:ULang:String_t<uft32>:(&Plus&):Other
//File:/Types/String.uc
//Line:94

   ULang:String_t<uft32>* A = (&this&);
   ULang:String_t<uft32>* B = A;
   ULang:String_t<uft32>* C = Other;
   ULang:StringSpan_t<uft32> D = ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut(C);
   ULang:String_t<uft32>* E;
   ULang:String_t<uft32>* F = &E;
   ULang:StringSpan_t<uft32>* G = &D;
   void H = ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut(F,G);
   ULang:String_t<uft32> I = ULang:String_t<uft32>:(&Plus&)^ULang:String_t<uft32>&imut,ULang:String_t<uft32>&imut(B,E);
   ret = I;
   ret;

|ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:String_t<uft32>* Other] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&Compound_Plus&):(&this&)
//Variable:ULang:String_t<uft32>:(&Compound_Plus&):Other
//File:/Types/String.uc
//Line:94

   ULang:String_t<uft32>* A = (&this&);

//Line:97

   ULang:String_t<uft32>* B = A;
   ULang:String_t<uft32>* C = Other;
   ULang:StringSpan_t<uft32> D = ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut(C);
   ULang:String_t<uft32>* E;
   ULang:String_t<uft32>* F = &E;
   ULang:StringSpan_t<uft32>* G = &D;
   void H = ULang:String_t<uft32>:(&_new&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut(F,G);
   void I = ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:String_t<uft32>&imut(B,E);
   ret;

|ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:StringSpan_t<uft32>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&equal&):(&this&)
//Variable:ULang:String_t<uft32>:(&equal&):Other
//File:/Types/String.uc
//Line:101

   ULang:String_t<uft32>* A = (&this&);
   ULang:String_t<uft32>* B = A;
   ULang:StringSpan_t<uft32> C = ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut(B);
   ULang:StringSpan_t<uft32>* D = &C;
   ULang:StringSpan_t<uft32>* E = Other;
   int8 F = ULang:StringSpan_t<uft32>:(&equal&)^ULang:StringSpan_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut(D,E);
   ret = F;
   ret;

|ULang:String_t<uft32>:(&notequal&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:StringSpan_t<uft32>* Other] -> int8:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&notequal&):(&this&)
//Variable:ULang:String_t<uft32>:(&notequal&):Other
//File:/Types/String.uc
//Line:103

   ULang:String_t<uft32>* A = (&this&);
   ULang:String_t<uft32>* B = A;
   ULang:StringSpan_t<uft32>* C = Other;
   int8 D = ULang:String_t<uft32>:(&equal&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:String_t<uft32>:(&Plus&)^ULang:String_t<uft32>&imut,ULang:StringSpan_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:StringSpan_t<uft32>* Other] -> ULang:String_t<uft32>:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&Plus&):(&this&)
//Variable:ULang:String_t<uft32>:(&Plus&):Other
//File:/Types/String.uc
//Line:106
//Variable:ULang:String_t<uft32>:(&Plus&):copy

   ULang:String_t<uft32> A;
   ULang:String_t<uft32>* B = (&this&);
   ULang:String_t<uft32> C = *B;
   A = C;

//Line:107

   ULang:String_t<uft32>* D = &A;
   ULang:StringSpan_t<uft32>* E = Other;
   void F = ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut(D,E);

//Line:108

   ULang:String_t<uft32> G = A;
   ret = G;
   ret;

|ULang:String_t<uft32>:(&Compound_Plus&)^ULang:String_t<uft32>&,ULang:StringSpan_t<uft32>&imut[ULang:String_t<uft32>* (&this&),ULang:StringSpan_t<uft32>* Other] -> void:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&Compound_Plus&):(&this&)
//Variable:ULang:String_t<uft32>:(&Compound_Plus&):Other
//File:/Types/String.uc
//Line:111

   ULang:Vector<uft32>* A = &(&this&)->__0;
   ULang:StringSpan_t<uft32>* B = Other;
   ULang:Span<uft32> C = ULang:StringSpan_t<uft32>:iAsSpan^ULang:StringSpan_t<uft32>&imut(B);
   void D = ULang:Vector<uft32>:Append^ULang:Vector<uft32>&,ULang:Span<uft32>imut(A,C);
   ret;

|ULang:String_t<uft32>:AsSpan^ULang:String_t<uft32>&[ULang:String_t<uft32>* (&this&)] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:String_t<uft32>:AsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft32> A;
   ULang:Span<uft32>* B = &A;
   void C = ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&(B);
   ret = A;
   ret;

|ULang:String_t<uft32>:iAsSpan^ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&)] -> ULang:Span<uft32>:

 [Block:0]


//Variable:ULang:String_t<uft32>:iAsSpan:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:Span<uft32> A;
   ULang:Span<uft32>* B = &A;
   void C = ULang:Span<uft32>:(&_new&)^ULang:Span<uft32>&(B);
   ret = A;
   ret;

|ULang:String_t<uft32>:Str^ULang:String_t<uft32>&[ULang:String_t<uft32>* (&this&)] -> ULang:StringSpan_t<uft32>:

 [Block:0]


//Variable:ULang:String_t<uft32>:Str:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft32> A;
   ULang:StringSpan_t<uft32>* B = &A;
   void C = ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&(B);
   ret = A;
   ret;

|ULang:String_t<uft32>:iStr^ULang:String_t<uft32>&imut[ULang:String_t<uft32>* (&this&)] -> ULang:StringSpan_t<uft32>:

 [Block:0]


//Variable:ULang:String_t<uft32>:iStr:(&this&)
//File:/Types/String.uc
//Line:0

   ULang:StringSpan_t<uft32> A;
   ULang:StringSpan_t<uft32>* B = &A;
   void C = ULang:StringSpan_t<uft32>:(&_new&)^ULang:StringSpan_t<uft32>&(B);
   ret = A;
   ret;

|ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&,ULang:Range_t<uintptr>[ULang:String_t<uft32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft32>:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&Index&):(&this&)
//Variable:ULang:String_t<uft32>:(&Index&):Range
//File:/Types/String.uc
//Line:111
//Line:119

   ULang:String_t<uft32>* A = (&this&);
   ULang:StringSpan_t<uft32> B = ULang:String_t<uft32>:Str^ULang:String_t<uft32>&(A);
   ULang:StringSpan_t<uft32>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:StringSpan_t<uft32> E = ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:String_t<uft32>:(&Index&)^ULang:String_t<uft32>&imut,ULang:Range_t<uintptr>[ULang:String_t<uft32>* (&this&),ULang:Range_t<uintptr> Range] -> ULang:StringSpan_t<uft32>:

 [Block:0]


//Variable:ULang:String_t<uft32>:(&Index&):(&this&)
//Variable:ULang:String_t<uft32>:(&Index&):Range
//File:/Types/String.uc
//Line:119
//Line:120

   ULang:String_t<uft32>* A = (&this&);
   ULang:StringSpan_t<uft32> B = ULang:String_t<uft32>:Str^ULang:String_t<uft32>&(A);
   ULang:StringSpan_t<uft32>* C = &B;
   ULang:Range_t<uintptr> D = Range;
   ULang:StringSpan_t<uft32> E = ULang:StringSpan_t<uft32>:(&Index&)^ULang:StringSpan_t<uft32>&,ULang:Range_t<uintptr>(C,D);
   ret = E;
   ret;

|ULang:String_t<uft32>:(&_de-init&)[ULang:String_t<uft32>* (&this&)] -> void:

 [Block:0]


//File:/Types/String.uc
//Line:0

   ULang:Vector<uft32>* A = &(&this&)->__0;
   void B = ULang:Vector<uft32>:(&_drop&)^ULang:Vector<uft32>&(A);
   ret;

|ULang:Vec2i_t<sint32>:(&_new&)^ULang:Vec2i_t<sint32>&[ULang:Vec2i_t<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vec2i_t<sint32>:(&_new&):(&this&)
//File:/Types/Vec2.uc
//Line:42

   int32 A = 0;
   (&this&)->__0 = A;

//Line:43

   int32 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Vec2i_t<sint32>:(&_new&)^ULang:Vec2i_t<sint32>&,i32,i32[ULang:Vec2i_t<sint32>* (&this&),int32 x,int32 y] -> void:

 [Block:0]


//Variable:ULang:Vec2i_t<sint32>:(&_new&):(&this&)
//Variable:ULang:Vec2i_t<sint32>:(&_new&):x
//Variable:ULang:Vec2i_t<sint32>:(&_new&):y
//File:/Types/Vec2.uc
//Line:45

   int32 A = x;
   (&this&)->__0 = A;

//Line:46

   int32 B = y;
   (&this&)->__1 = B;
   ret;

|ULang:Vec2i_t<sint32>:(&equal&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut[ULang:Vec2i_t<sint32>* (&this&),ULang:Vec2i_t<sint32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec2i_t<sint32>:(&equal&):(&this&)
//Variable:ULang:Vec2i_t<sint32>:(&equal&):Other

   ULang:Vec2i_t<sint32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:49

   int32 B = A->__1;
   int32 C = Other->__1;
   int8 D = B==C;
   ULang:Vec2i_t<sint32>* E = (&this&);
   int32 F = E->__0;
   int32 G = Other->__0;
   int8 H = F==G;
   int8 I = D&&H;
   ret = I;
   ret;

|ULang:Vec2i_t<sint32>:(&notequal&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut[ULang:Vec2i_t<sint32>* (&this&),ULang:Vec2i_t<sint32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec2i_t<sint32>:(&notequal&):(&this&)
//Variable:ULang:Vec2i_t<sint32>:(&notequal&):Other
//File:/Types/Vec2.uc
//Line:52

   ULang:Vec2i_t<sint32>* A = (&this&);
   ULang:Vec2i_t<sint32>* B = A;
   ULang:Vec2i_t<sint32>* C = Other;
   int8 D = ULang:Vec2i_t<sint32>:(&equal&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:Vec2i_t<sint32>:(&Compound_Plus&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut[ULang:Vec2i_t<sint32>* (&this&),ULang:Vec2i_t<sint32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec2i_t<sint32>:(&Compound_Plus&):(&this&)
//Variable:ULang:Vec2i_t<sint32>:(&Compound_Plus&):Other

   ULang:Vec2i_t<sint32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:55

   ULang:Vec2i_t<sint32>* B = (&this&);
   int32 C = B->__0;
   int32 D = Other->__0;
   int32 E = C+D;
   A->__0 = E;
   ULang:Vec2i_t<sint32>* F = (&this&);

//Line:56

   ULang:Vec2i_t<sint32>* G = (&this&);
   int32 H = G->__1;
   int32 I = Other->__1;
   int32 J = H+I;
   F->__1 = J;
   ret;

|ULang:Vec2i_t<sint32>:(&Compound_Sub&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut[ULang:Vec2i_t<sint32>* (&this&),ULang:Vec2i_t<sint32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec2i_t<sint32>:(&Compound_Sub&):(&this&)
//Variable:ULang:Vec2i_t<sint32>:(&Compound_Sub&):Other

   ULang:Vec2i_t<sint32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:59

   ULang:Vec2i_t<sint32>* B = (&this&);
   int32 C = B->__0;
   int32 D = Other->__0;
   int32 E = C-D;
   A->__0 = E;
   ULang:Vec2i_t<sint32>* F = (&this&);

//Line:60

   ULang:Vec2i_t<sint32>* G = (&this&);
   int32 H = G->__1;
   int32 I = Other->__1;
   int32 J = H-I;
   F->__1 = J;
   ret;

|ULang:Vec2i_t<sint32>:(&Plus&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut[ULang:Vec2i_t<sint32>* (&this&),ULang:Vec2i_t<sint32>* Other] -> ULang:Vec2i_t<sint32>:

 [Block:0]


//Variable:ULang:Vec2i_t<sint32>:(&Plus&):(&this&)
//Variable:ULang:Vec2i_t<sint32>:(&Plus&):Other
//File:/Types/Vec2.uc
//Line:63
//Variable:ULang:Vec2i_t<sint32>:(&Plus&):copy

   ULang:Vec2i_t<sint32> A;
   ULang:Vec2i_t<sint32>* B = (&this&);
   ULang:Vec2i_t<sint32> C = *B;
   A = C;

//Line:64

   ULang:Vec2i_t<sint32>* D = &A;
   ULang:Vec2i_t<sint32>* E = Other;
   void F = ULang:Vec2i_t<sint32>:(&Compound_Plus&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut(D,E);

//Line:65

   ULang:Vec2i_t<sint32> G = A;
   ret = G;
   ret;

|ULang:Vec2i_t<sint32>:(&Minus&)^ULang:Vec2i_t<sint32>&imut,ULang:Vec2i_t<sint32>&imut[ULang:Vec2i_t<sint32>* (&this&),ULang:Vec2i_t<sint32>* Other] -> ULang:Vec2i_t<sint32>:

 [Block:0]


//Variable:ULang:Vec2i_t<sint32>:(&Minus&):(&this&)
//Variable:ULang:Vec2i_t<sint32>:(&Minus&):Other
//File:/Types/Vec2.uc
//Line:68
//Variable:ULang:Vec2i_t<sint32>:(&Minus&):copy

   ULang:Vec2i_t<sint32> A;
   ULang:Vec2i_t<sint32>* B = (&this&);
   ULang:Vec2i_t<sint32> C = *B;
   A = C;

//Line:69

   ULang:Vec2i_t<sint32>* D = &A;
   ULang:Vec2i_t<sint32>* E = Other;
   void F = ULang:Vec2i_t<sint32>:(&Compound_Sub&)^ULang:Vec2i_t<sint32>&,ULang:Vec2i_t<sint32>&imut(D,E);

//Line:70

   ULang:Vec2i_t<sint32> G = A;
   ret = G;
   ret;

|ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&[ULang:Vec3f_t<float32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&_new&):(&this&)
//File:/Types/Vec3.uc
//Line:10

   float32 A = 0.000000;
   (&this&)->__0 = A;

//Line:11

   float32 B = 0.000000;
   (&this&)->__1 = B;

//Line:12

   float32 C = 0.000000;
   (&this&)->__2 = C;
   ret;

|ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&,f32,f32,f32[ULang:Vec3f_t<float32>* (&this&),float32 x,float32 y,float32 z] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&_new&):(&this&)
//Variable:ULang:Vec3f_t<float32>:(&_new&):x
//Variable:ULang:Vec3f_t<float32>:(&_new&):y
//Variable:ULang:Vec3f_t<float32>:(&_new&):z
//File:/Types/Vec3.uc
//Line:15

   float32 A = x;
   (&this&)->__0 = A;

//Line:16

   float32 B = y;
   (&this&)->__1 = B;

//Line:17

   float32 C = z;
   (&this&)->__2 = C;
   ret;

|ULang:Vec3f_t<float32>:(&_new&)^ULang:Vec3f_t<float32>&,ULang:Vec2f_t<float32>&imut,f32[ULang:Vec3f_t<float32>* (&this&),ULang:Vec2f_t<float32>* pos,float32 z] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&_new&):(&this&)
//Variable:ULang:Vec3f_t<float32>:(&_new&):pos
//Variable:ULang:Vec3f_t<float32>:(&_new&):z
//File:/Types/Vec3.uc
//Line:20

   float32 A = pos->__0;
   (&this&)->__0 = A;

//Line:21

   float32 B = pos->__1;
   (&this&)->__1 = B;

//Line:22

   float32 C = z;
   (&this&)->__2 = C;
   ret;

|ULang:Vec3f_t<float32>:(&equal&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&[ULang:Vec3f_t<float32>* (&this&),ULang:Vec3f_t<float32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&equal&):(&this&)
//Variable:ULang:Vec3f_t<float32>:(&equal&):Other

   ULang:Vec3f_t<float32>* A = (&this&);

//File:/Types/Vec3.uc
//Line:25

   float32 B = A->__2;
   float32 C = Other->__2;
   int8 D = B==C;
   ULang:Vec3f_t<float32>* E = (&this&);
   float32 F = E->__1;
   float32 G = Other->__1;
   int8 H = F==G;
   int8 I = D&&H;
   ULang:Vec3f_t<float32>* J = (&this&);
   float32 K = J->__0;
   float32 L = Other->__0;
   int8 M = K==L;
   int8 N = I&&M;
   ret = N;
   ret;

|ULang:Vec3f_t<float32>:(&notequal&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&[ULang:Vec3f_t<float32>* (&this&),ULang:Vec3f_t<float32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&notequal&):(&this&)
//Variable:ULang:Vec3f_t<float32>:(&notequal&):Other
//File:/Types/Vec3.uc
//Line:28

   ULang:Vec3f_t<float32>* A = (&this&);
   ULang:Vec3f_t<float32>* B = A;
   ULang:Vec3f_t<float32>* C = Other;
   int8 D = ULang:Vec3f_t<float32>:(&equal&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:Vec3f_t<float32>:(&Compound_Plus&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut[ULang:Vec3f_t<float32>* (&this&),ULang:Vec3f_t<float32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&Compound_Plus&):(&this&)
//Variable:ULang:Vec3f_t<float32>:(&Compound_Plus&):Other

   ULang:Vec3f_t<float32>* A = (&this&);

//File:/Types/Vec3.uc
//Line:31

   ULang:Vec3f_t<float32>* B = (&this&);
   float32 C = B->__0;
   float32 D = Other->__0;
   float32 E = C+D;
   A->__0 = E;
   ULang:Vec3f_t<float32>* F = (&this&);

//Line:32

   ULang:Vec3f_t<float32>* G = (&this&);
   float32 H = G->__1;
   float32 I = Other->__1;
   float32 J = H+I;
   F->__1 = J;
   ULang:Vec3f_t<float32>* K = (&this&);

//Line:33

   ULang:Vec3f_t<float32>* L = (&this&);
   float32 M = L->__2;
   float32 N = Other->__2;
   float32 O = M+N;
   K->__2 = O;
   ret;

|ULang:Vec3f_t<float32>:(&Compound_Sub&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut[ULang:Vec3f_t<float32>* (&this&),ULang:Vec3f_t<float32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&Compound_Sub&):(&this&)
//Variable:ULang:Vec3f_t<float32>:(&Compound_Sub&):Other

   ULang:Vec3f_t<float32>* A = (&this&);

//File:/Types/Vec3.uc
//Line:36

   ULang:Vec3f_t<float32>* B = (&this&);
   float32 C = B->__0;
   float32 D = Other->__0;
   float32 E = C-D;
   A->__0 = E;
   ULang:Vec3f_t<float32>* F = (&this&);

//Line:37

   ULang:Vec3f_t<float32>* G = (&this&);
   float32 H = G->__1;
   float32 I = Other->__1;
   float32 J = H-I;
   F->__1 = J;
   ULang:Vec3f_t<float32>* K = (&this&);

//Line:38

   ULang:Vec3f_t<float32>* L = (&this&);
   float32 M = L->__2;
   float32 N = Other->__2;
   float32 O = M-N;
   K->__2 = O;
   ret;

|ULang:Vec3f_t<float32>:(&Plus&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&imut[ULang:Vec3f_t<float32>* (&this&),ULang:Vec3f_t<float32>* Other] -> ULang:Vec3f_t<float32>:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&Plus&):(&this&)
//Variable:ULang:Vec3f_t<float32>:(&Plus&):Other
//File:/Types/Vec3.uc
//Line:41
//Variable:ULang:Vec3f_t<float32>:(&Plus&):copy

   ULang:Vec3f_t<float32> A;
   ULang:Vec3f_t<float32>* B = (&this&);
   ULang:Vec3f_t<float32> C = *B;
   A = C;

//Line:42

   ULang:Vec3f_t<float32>* D = &A;
   ULang:Vec3f_t<float32>* E = Other;
   void F = ULang:Vec3f_t<float32>:(&Compound_Plus&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut(D,E);

//Line:43

   ULang:Vec3f_t<float32> G = A;
   ret = G;
   ret;

|ULang:Vec3f_t<float32>:(&Minus&)^ULang:Vec3f_t<float32>&imut,ULang:Vec3f_t<float32>&imut[ULang:Vec3f_t<float32>* (&this&),ULang:Vec3f_t<float32>* Other] -> ULang:Vec3f_t<float32>:

 [Block:0]


//Variable:ULang:Vec3f_t<float32>:(&Minus&):(&this&)
//Variable:ULang:Vec3f_t<float32>:(&Minus&):Other
//File:/Types/Vec3.uc
//Line:46
//Variable:ULang:Vec3f_t<float32>:(&Minus&):copy

   ULang:Vec3f_t<float32> A;
   ULang:Vec3f_t<float32>* B = (&this&);
   ULang:Vec3f_t<float32> C = *B;
   A = C;

//Line:47

   ULang:Vec3f_t<float32>* D = &A;
   ULang:Vec3f_t<float32>* E = Other;
   void F = ULang:Vec3f_t<float32>:(&Compound_Sub&)^ULang:Vec3f_t<float32>&,ULang:Vec3f_t<float32>&imut(D,E);

//Line:48

   ULang:Vec3f_t<float32> G = A;
   ret = G;
   ret;

|ULang:Vec2f_t<sint32>:(&_new&)^ULang:Vec2f_t<sint32>&[ULang:Vec2f_t<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vec2f_t<sint32>:(&_new&):(&this&)
//File:/Types/Vec2.uc
//Line:7

   int32 A = 0;
   (&this&)->__0 = A;

//Line:8

   int32 B = 0;
   (&this&)->__1 = B;
   ret;

|ULang:Vec2f_t<sint32>:(&_new&)^ULang:Vec2f_t<sint32>&,i32,i32[ULang:Vec2f_t<sint32>* (&this&),int32 x,int32 y] -> void:

 [Block:0]


//Variable:ULang:Vec2f_t<sint32>:(&_new&):(&this&)
//Variable:ULang:Vec2f_t<sint32>:(&_new&):x
//Variable:ULang:Vec2f_t<sint32>:(&_new&):y
//File:/Types/Vec2.uc
//Line:11

   int32 A = x;
   (&this&)->__0 = A;

//Line:12

   int32 B = y;
   (&this&)->__1 = B;
   ret;

|ULang:Vec2f_t<sint32>:(&equal&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut[ULang:Vec2f_t<sint32>* (&this&),ULang:Vec2f_t<sint32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec2f_t<sint32>:(&equal&):(&this&)
//Variable:ULang:Vec2f_t<sint32>:(&equal&):Other

   ULang:Vec2f_t<sint32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:15

   int32 B = A->__1;
   int32 C = Other->__1;
   int8 D = B==C;
   ULang:Vec2f_t<sint32>* E = (&this&);
   int32 F = E->__0;
   int32 G = Other->__0;
   int8 H = F==G;
   int8 I = D&&H;
   ret = I;
   ret;

|ULang:Vec2f_t<sint32>:(&notequal&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut[ULang:Vec2f_t<sint32>* (&this&),ULang:Vec2f_t<sint32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec2f_t<sint32>:(&notequal&):(&this&)
//Variable:ULang:Vec2f_t<sint32>:(&notequal&):Other
//File:/Types/Vec2.uc
//Line:18

   ULang:Vec2f_t<sint32>* A = (&this&);
   ULang:Vec2f_t<sint32>* B = A;
   ULang:Vec2f_t<sint32>* C = Other;
   int8 D = ULang:Vec2f_t<sint32>:(&equal&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:Vec2f_t<sint32>:(&Compound_Plus&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut[ULang:Vec2f_t<sint32>* (&this&),ULang:Vec2f_t<sint32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec2f_t<sint32>:(&Compound_Plus&):(&this&)
//Variable:ULang:Vec2f_t<sint32>:(&Compound_Plus&):Other

   ULang:Vec2f_t<sint32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:21

   ULang:Vec2f_t<sint32>* B = (&this&);
   int32 C = B->__0;
   int32 D = Other->__0;
   int32 E = C+D;
   A->__0 = E;
   ULang:Vec2f_t<sint32>* F = (&this&);

//Line:22

   ULang:Vec2f_t<sint32>* G = (&this&);
   int32 H = G->__1;
   int32 I = Other->__1;
   int32 J = H+I;
   F->__1 = J;
   ret;

|ULang:Vec2f_t<sint32>:(&Compound_Sub&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut[ULang:Vec2f_t<sint32>* (&this&),ULang:Vec2f_t<sint32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec2f_t<sint32>:(&Compound_Sub&):(&this&)
//Variable:ULang:Vec2f_t<sint32>:(&Compound_Sub&):Other

   ULang:Vec2f_t<sint32>* A = (&this&);

//File:/Types/Vec2.uc
//Line:25

   ULang:Vec2f_t<sint32>* B = (&this&);
   int32 C = B->__0;
   int32 D = Other->__0;
   int32 E = C-D;
   A->__0 = E;
   ULang:Vec2f_t<sint32>* F = (&this&);

//Line:26

   ULang:Vec2f_t<sint32>* G = (&this&);
   int32 H = G->__1;
   int32 I = Other->__1;
   int32 J = H-I;
   F->__1 = J;
   ret;

|ULang:Vec2f_t<sint32>:(&Plus&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut[ULang:Vec2f_t<sint32>* (&this&),ULang:Vec2f_t<sint32>* Other] -> ULang:Vec2f_t<sint32>:

 [Block:0]


//Variable:ULang:Vec2f_t<sint32>:(&Plus&):(&this&)
//Variable:ULang:Vec2f_t<sint32>:(&Plus&):Other
//File:/Types/Vec2.uc
//Line:29
//Variable:ULang:Vec2f_t<sint32>:(&Plus&):copy

   ULang:Vec2f_t<sint32> A;
   ULang:Vec2f_t<sint32>* B = (&this&);
   ULang:Vec2f_t<sint32> C = *B;
   A = C;

//Line:30

   ULang:Vec2f_t<sint32>* D = &A;
   ULang:Vec2f_t<sint32>* E = Other;
   void F = ULang:Vec2f_t<sint32>:(&Compound_Plus&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut(D,E);

//Line:31

   ULang:Vec2f_t<sint32> G = A;
   ret = G;
   ret;

|ULang:Vec2f_t<sint32>:(&Minus&)^ULang:Vec2f_t<sint32>&imut,ULang:Vec2f_t<sint32>&imut[ULang:Vec2f_t<sint32>* (&this&),ULang:Vec2f_t<sint32>* Other] -> ULang:Vec2f_t<sint32>:

 [Block:0]


//Variable:ULang:Vec2f_t<sint32>:(&Minus&):(&this&)
//Variable:ULang:Vec2f_t<sint32>:(&Minus&):Other
//File:/Types/Vec2.uc
//Line:34
//Variable:ULang:Vec2f_t<sint32>:(&Minus&):copy

   ULang:Vec2f_t<sint32> A;
   ULang:Vec2f_t<sint32>* B = (&this&);
   ULang:Vec2f_t<sint32> C = *B;
   A = C;

//Line:35

   ULang:Vec2f_t<sint32>* D = &A;
   ULang:Vec2f_t<sint32>* E = Other;
   void F = ULang:Vec2f_t<sint32>:(&Compound_Sub&)^ULang:Vec2f_t<sint32>&,ULang:Vec2f_t<sint32>&imut(D,E);

//Line:36

   ULang:Vec2f_t<sint32> G = A;
   ret = G;
   ret;

|ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&[ULang:Vec3f_t<sint32>* (&this&)] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&_new&):(&this&)
//File:/Types/Vec3.uc
//Line:10

   int32 A = 0;
   (&this&)->__0 = A;

//Line:11

   int32 B = 0;
   (&this&)->__1 = B;

//Line:12

   int32 C = 0;
   (&this&)->__2 = C;
   ret;

|ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&,i32,i32,i32[ULang:Vec3f_t<sint32>* (&this&),int32 x,int32 y,int32 z] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&_new&):(&this&)
//Variable:ULang:Vec3f_t<sint32>:(&_new&):x
//Variable:ULang:Vec3f_t<sint32>:(&_new&):y
//Variable:ULang:Vec3f_t<sint32>:(&_new&):z
//File:/Types/Vec3.uc
//Line:15

   int32 A = x;
   (&this&)->__0 = A;

//Line:16

   int32 B = y;
   (&this&)->__1 = B;

//Line:17

   int32 C = z;
   (&this&)->__2 = C;
   ret;

|ULang:Vec3f_t<sint32>:(&_new&)^ULang:Vec3f_t<sint32>&,ULang:Vec2f_t<sint32>&imut,i32[ULang:Vec3f_t<sint32>* (&this&),ULang:Vec2f_t<sint32>* pos,int32 z] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&_new&):(&this&)
//Variable:ULang:Vec3f_t<sint32>:(&_new&):pos
//Variable:ULang:Vec3f_t<sint32>:(&_new&):z
//File:/Types/Vec3.uc
//Line:20

   int32 A = pos->__0;
   (&this&)->__0 = A;

//Line:21

   int32 B = pos->__1;
   (&this&)->__1 = B;

//Line:22

   int32 C = z;
   (&this&)->__2 = C;
   ret;

|ULang:Vec3f_t<sint32>:(&equal&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&[ULang:Vec3f_t<sint32>* (&this&),ULang:Vec3f_t<sint32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&equal&):(&this&)
//Variable:ULang:Vec3f_t<sint32>:(&equal&):Other

   ULang:Vec3f_t<sint32>* A = (&this&);

//File:/Types/Vec3.uc
//Line:25

   int32 B = A->__2;
   int32 C = Other->__2;
   int8 D = B==C;
   ULang:Vec3f_t<sint32>* E = (&this&);
   int32 F = E->__1;
   int32 G = Other->__1;
   int8 H = F==G;
   int8 I = D&&H;
   ULang:Vec3f_t<sint32>* J = (&this&);
   int32 K = J->__0;
   int32 L = Other->__0;
   int8 M = K==L;
   int8 N = I&&M;
   ret = N;
   ret;

|ULang:Vec3f_t<sint32>:(&notequal&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&[ULang:Vec3f_t<sint32>* (&this&),ULang:Vec3f_t<sint32>* Other] -> int8:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&notequal&):(&this&)
//Variable:ULang:Vec3f_t<sint32>:(&notequal&):Other
//File:/Types/Vec3.uc
//Line:28

   ULang:Vec3f_t<sint32>* A = (&this&);
   ULang:Vec3f_t<sint32>* B = A;
   ULang:Vec3f_t<sint32>* C = Other;
   int8 D = ULang:Vec3f_t<sint32>:(&equal&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&(B,C);
   int8 E = !D;
   ret = E;
   ret;

|ULang:Vec3f_t<sint32>:(&Compound_Plus&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut[ULang:Vec3f_t<sint32>* (&this&),ULang:Vec3f_t<sint32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&Compound_Plus&):(&this&)
//Variable:ULang:Vec3f_t<sint32>:(&Compound_Plus&):Other

   ULang:Vec3f_t<sint32>* A = (&this&);

//File:/Types/Vec3.uc
//Line:31

   ULang:Vec3f_t<sint32>* B = (&this&);
   int32 C = B->__0;
   int32 D = Other->__0;
   int32 E = C+D;
   A->__0 = E;
   ULang:Vec3f_t<sint32>* F = (&this&);

//Line:32

   ULang:Vec3f_t<sint32>* G = (&this&);
   int32 H = G->__1;
   int32 I = Other->__1;
   int32 J = H+I;
   F->__1 = J;
   ULang:Vec3f_t<sint32>* K = (&this&);

//Line:33

   ULang:Vec3f_t<sint32>* L = (&this&);
   int32 M = L->__2;
   int32 N = Other->__2;
   int32 O = M+N;
   K->__2 = O;
   ret;

|ULang:Vec3f_t<sint32>:(&Compound_Sub&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut[ULang:Vec3f_t<sint32>* (&this&),ULang:Vec3f_t<sint32>* Other] -> void:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&Compound_Sub&):(&this&)
//Variable:ULang:Vec3f_t<sint32>:(&Compound_Sub&):Other

   ULang:Vec3f_t<sint32>* A = (&this&);

//File:/Types/Vec3.uc
//Line:36

   ULang:Vec3f_t<sint32>* B = (&this&);
   int32 C = B->__0;
   int32 D = Other->__0;
   int32 E = C-D;
   A->__0 = E;
   ULang:Vec3f_t<sint32>* F = (&this&);

//Line:37

   ULang:Vec3f_t<sint32>* G = (&this&);
   int32 H = G->__1;
   int32 I = Other->__1;
   int32 J = H-I;
   F->__1 = J;
   ULang:Vec3f_t<sint32>* K = (&this&);

//Line:38

   ULang:Vec3f_t<sint32>* L = (&this&);
   int32 M = L->__2;
   int32 N = Other->__2;
   int32 O = M-N;
   K->__2 = O;
   ret;

|ULang:Vec3f_t<sint32>:(&Plus&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&imut[ULang:Vec3f_t<sint32>* (&this&),ULang:Vec3f_t<sint32>* Other] -> ULang:Vec3f_t<sint32>:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&Plus&):(&this&)
//Variable:ULang:Vec3f_t<sint32>:(&Plus&):Other
//File:/Types/Vec3.uc
//Line:41
//Variable:ULang:Vec3f_t<sint32>:(&Plus&):copy

   ULang:Vec3f_t<sint32> A;
   ULang:Vec3f_t<sint32>* B = (&this&);
   ULang:Vec3f_t<sint32> C = *B;
   A = C;

//Line:42

   ULang:Vec3f_t<sint32>* D = &A;
   ULang:Vec3f_t<sint32>* E = Other;
   void F = ULang:Vec3f_t<sint32>:(&Compound_Plus&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut(D,E);

//Line:43

   ULang:Vec3f_t<sint32> G = A;
   ret = G;
   ret;

|ULang:Vec3f_t<sint32>:(&Minus&)^ULang:Vec3f_t<sint32>&imut,ULang:Vec3f_t<sint32>&imut[ULang:Vec3f_t<sint32>* (&this&),ULang:Vec3f_t<sint32>* Other] -> ULang:Vec3f_t<sint32>:

 [Block:0]


//Variable:ULang:Vec3f_t<sint32>:(&Minus&):(&this&)
//Variable:ULang:Vec3f_t<sint32>:(&Minus&):Other
//File:/Types/Vec3.uc
//Line:46
//Variable:ULang:Vec3f_t<sint32>:(&Minus&):copy

   ULang:Vec3f_t<sint32> A;
   ULang:Vec3f_t<sint32>* B = (&this&);
   ULang:Vec3f_t<sint32> C = *B;
   A = C;

//Line:47

   ULang:Vec3f_t<sint32>* D = &A;
   ULang:Vec3f_t<sint32>* E = Other;
   void F = ULang:Vec3f_t<sint32>:(&Compound_Sub&)^ULang:Vec3f_t<sint32>&,ULang:Vec3f_t<sint32>&imut(D,E);

//Line:48

   ULang:Vec3f_t<sint32> G = A;
   ret = G;
   ret;

|ULang:Vec4f_t<float32>:(&_new&)^ULang:Vec4f_t<float32>&[ULang:Vec4f_t<float32>* (&this&)] -> void:

 [Block:0]

   ret;

|putchar[int8 Val] -> void:

 [Block:0]


//Variable:putchar:Val

   ret;

|malloc[int64 Size] -> void*:

 [Block:0]


//Variable:malloc:Size

   ret;

|free[void* Block] -> void:

 [Block:0]


//Variable:free:Block

   ret;

|ULang:Native:OS_PrintChar^c[int8 Value] -> void:

 [Block:0]


//Variable:ULang:Native:OS_PrintChar:Value
//File:/OS_Calls.uc
//Line:7

   int8 A = Value;
   void B = putchar(A);
   ret;

|ULang:Native:OS_PrintSpan^c[&]imut,uptr[void* Buffer,int64 Size] -> void:

 [Block:0]


//Variable:ULang:Native:OS_PrintSpan:Buffer
//Variable:ULang:Native:OS_PrintSpan:Size
//File:/OS_Calls.uc
//Line:16

   int64 A;

//Variable:ULang:Native:OS_PrintSpan:2624469285312:i

   int32 B = 0;
   A = B;

   _label1:

   int64 C = A;
   int64 D = Size;
   int8 E = C<D;
   int8 F = !E;
   gotoif (F) _label0;

//Line:17

   void* G = Buffer;
   int64 H = A;
   int64 I = 1;
   int64 J = H*I;
   void* K = G+J;
   int8 L = *K;
   void M = ULang:Native:OS_PrintChar^c(L);

//Line:16

   int64 N = A;
   int64 O = 1;
   int64 P = N+O;
   A = P;
   goto _label1;

   _label0:

   ret;

|ULang:Native:OS_PrintClear[] -> void:

 [Block:0]

   ret;

|ULang:Native:OS_Malloc^uptr[int64 Size] -> void:

 [Block:0]


//Variable:ULang:Native:OS_Malloc:Size
//File:/OS_Calls.uc
//Line:27

   int64 A = Size;
   void* B = malloc(A);
   ret;

|ULang:Native:OS_Free^u8[&][void* Block] -> void:

 [Block:0]


//Variable:ULang:Native:OS_Free:Block
//File:/OS_Calls.uc
//Line:34

   void* A = Block;
   void B = free(A);
   ret;

